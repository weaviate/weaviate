//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// SchemaClusterStatusReader is a Reader for the SchemaClusterStatus structure.
type SchemaClusterStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchemaClusterStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchemaClusterStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewSchemaClusterStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSchemaClusterStatusOK creates a SchemaClusterStatusOK with default headers values
func NewSchemaClusterStatusOK() *SchemaClusterStatusOK {
	return &SchemaClusterStatusOK{}
}

/*
SchemaClusterStatusOK describes a response with status code 200, with default header values.

The schema in the cluster is in sync.
*/
type SchemaClusterStatusOK struct {
	Payload *models.SchemaClusterStatus
}

// IsSuccess returns true when this schema cluster status o k response has a 2xx status code
func (o *SchemaClusterStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this schema cluster status o k response has a 3xx status code
func (o *SchemaClusterStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this schema cluster status o k response has a 4xx status code
func (o *SchemaClusterStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this schema cluster status o k response has a 5xx status code
func (o *SchemaClusterStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this schema cluster status o k response a status code equal to that given
func (o *SchemaClusterStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the schema cluster status o k response
func (o *SchemaClusterStatusOK) Code() int {
	return 200
}

func (o *SchemaClusterStatusOK) Error() string {
	return fmt.Sprintf("[GET /schema/cluster-status][%d] schemaClusterStatusOK  %+v", 200, o.Payload)
}

func (o *SchemaClusterStatusOK) String() string {
	return fmt.Sprintf("[GET /schema/cluster-status][%d] schemaClusterStatusOK  %+v", 200, o.Payload)
}

func (o *SchemaClusterStatusOK) GetPayload() *models.SchemaClusterStatus {
	return o.Payload
}

func (o *SchemaClusterStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SchemaClusterStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaClusterStatusInternalServerError creates a SchemaClusterStatusInternalServerError with default headers values
func NewSchemaClusterStatusInternalServerError() *SchemaClusterStatusInternalServerError {
	return &SchemaClusterStatusInternalServerError{}
}

/*
SchemaClusterStatusInternalServerError describes a response with status code 500, with default header values.

The schema is either out of sync (see response body) or the sync check could not be completed.
*/
type SchemaClusterStatusInternalServerError struct {
	Payload *models.SchemaClusterStatus
}

// IsSuccess returns true when this schema cluster status internal server error response has a 2xx status code
func (o *SchemaClusterStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this schema cluster status internal server error response has a 3xx status code
func (o *SchemaClusterStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this schema cluster status internal server error response has a 4xx status code
func (o *SchemaClusterStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this schema cluster status internal server error response has a 5xx status code
func (o *SchemaClusterStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this schema cluster status internal server error response a status code equal to that given
func (o *SchemaClusterStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the schema cluster status internal server error response
func (o *SchemaClusterStatusInternalServerError) Code() int {
	return 500
}

func (o *SchemaClusterStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /schema/cluster-status][%d] schemaClusterStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *SchemaClusterStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /schema/cluster-status][%d] schemaClusterStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *SchemaClusterStatusInternalServerError) GetPayload() *models.SchemaClusterStatus {
	return o.Payload
}

func (o *SchemaClusterStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SchemaClusterStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
