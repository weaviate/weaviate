//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2022 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/semi-technologies/weaviate/entities/models"
)

// SchemaObjectsGetReader is a Reader for the SchemaObjectsGet structure.
type SchemaObjectsGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SchemaObjectsGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSchemaObjectsGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewSchemaObjectsGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSchemaObjectsGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSchemaObjectsGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSchemaObjectsGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSchemaObjectsGetOK creates a SchemaObjectsGetOK with default headers values
func NewSchemaObjectsGetOK() *SchemaObjectsGetOK {
	return &SchemaObjectsGetOK{}
}

/*
SchemaObjectsGetOK handles this case with default header values.

Found the Class, returned as body
*/
type SchemaObjectsGetOK struct {
	Payload *models.Class
}

func (o *SchemaObjectsGetOK) Error() string {
	return fmt.Sprintf("[GET /schema/{className}][%d] schemaObjectsGetOK  %+v", 200, o.Payload)
}

func (o *SchemaObjectsGetOK) GetPayload() *models.Class {
	return o.Payload
}

func (o *SchemaObjectsGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Class)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaObjectsGetUnauthorized creates a SchemaObjectsGetUnauthorized with default headers values
func NewSchemaObjectsGetUnauthorized() *SchemaObjectsGetUnauthorized {
	return &SchemaObjectsGetUnauthorized{}
}

/*
SchemaObjectsGetUnauthorized handles this case with default header values.

Unauthorized or invalid credentials.
*/
type SchemaObjectsGetUnauthorized struct {
}

func (o *SchemaObjectsGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /schema/{className}][%d] schemaObjectsGetUnauthorized ", 401)
}

func (o *SchemaObjectsGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaObjectsGetForbidden creates a SchemaObjectsGetForbidden with default headers values
func NewSchemaObjectsGetForbidden() *SchemaObjectsGetForbidden {
	return &SchemaObjectsGetForbidden{}
}

/*
SchemaObjectsGetForbidden handles this case with default header values.

Forbidden
*/
type SchemaObjectsGetForbidden struct {
	Payload *models.ErrorResponse
}

func (o *SchemaObjectsGetForbidden) Error() string {
	return fmt.Sprintf("[GET /schema/{className}][%d] schemaObjectsGetForbidden  %+v", 403, o.Payload)
}

func (o *SchemaObjectsGetForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaObjectsGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSchemaObjectsGetNotFound creates a SchemaObjectsGetNotFound with default headers values
func NewSchemaObjectsGetNotFound() *SchemaObjectsGetNotFound {
	return &SchemaObjectsGetNotFound{}
}

/*
SchemaObjectsGetNotFound handles this case with default header values.

This class does not exist
*/
type SchemaObjectsGetNotFound struct {
}

func (o *SchemaObjectsGetNotFound) Error() string {
	return fmt.Sprintf("[GET /schema/{className}][%d] schemaObjectsGetNotFound ", 404)
}

func (o *SchemaObjectsGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSchemaObjectsGetInternalServerError creates a SchemaObjectsGetInternalServerError with default headers values
func NewSchemaObjectsGetInternalServerError() *SchemaObjectsGetInternalServerError {
	return &SchemaObjectsGetInternalServerError{}
}

/*
SchemaObjectsGetInternalServerError handles this case with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type SchemaObjectsGetInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *SchemaObjectsGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /schema/{className}][%d] schemaObjectsGetInternalServerError  %+v", 500, o.Payload)
}

func (o *SchemaObjectsGetInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *SchemaObjectsGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
