//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package vectorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// VectorizationCancelReader is a Reader for the VectorizationCancel structure.
type VectorizationCancelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VectorizationCancelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVectorizationCancelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVectorizationCancelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewVectorizationCancelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewVectorizationCancelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVectorizationCancelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVectorizationCancelUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVectorizationCancelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVectorizationCancelOK creates a VectorizationCancelOK with default headers values
func NewVectorizationCancelOK() *VectorizationCancelOK {
	return &VectorizationCancelOK{}
}

/*
VectorizationCancelOK describes a response with status code 200, with default header values.

The task was successfully cancelled
*/
type VectorizationCancelOK struct {
}

// IsSuccess returns true when this vectorization cancel o k response has a 2xx status code
func (o *VectorizationCancelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this vectorization cancel o k response has a 3xx status code
func (o *VectorizationCancelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization cancel o k response has a 4xx status code
func (o *VectorizationCancelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this vectorization cancel o k response has a 5xx status code
func (o *VectorizationCancelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization cancel o k response a status code equal to that given
func (o *VectorizationCancelOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the vectorization cancel o k response
func (o *VectorizationCancelOK) Code() int {
	return 200
}

func (o *VectorizationCancelOK) Error() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelOK ", 200)
}

func (o *VectorizationCancelOK) String() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelOK ", 200)
}

func (o *VectorizationCancelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVectorizationCancelBadRequest creates a VectorizationCancelBadRequest with default headers values
func NewVectorizationCancelBadRequest() *VectorizationCancelBadRequest {
	return &VectorizationCancelBadRequest{}
}

/*
VectorizationCancelBadRequest describes a response with status code 400, with default header values.

Malformed request.
*/
type VectorizationCancelBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization cancel bad request response has a 2xx status code
func (o *VectorizationCancelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization cancel bad request response has a 3xx status code
func (o *VectorizationCancelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization cancel bad request response has a 4xx status code
func (o *VectorizationCancelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization cancel bad request response has a 5xx status code
func (o *VectorizationCancelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization cancel bad request response a status code equal to that given
func (o *VectorizationCancelBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the vectorization cancel bad request response
func (o *VectorizationCancelBadRequest) Code() int {
	return 400
}

func (o *VectorizationCancelBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelBadRequest  %+v", 400, o.Payload)
}

func (o *VectorizationCancelBadRequest) String() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelBadRequest  %+v", 400, o.Payload)
}

func (o *VectorizationCancelBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationCancelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationCancelUnauthorized creates a VectorizationCancelUnauthorized with default headers values
func NewVectorizationCancelUnauthorized() *VectorizationCancelUnauthorized {
	return &VectorizationCancelUnauthorized{}
}

/*
VectorizationCancelUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type VectorizationCancelUnauthorized struct {
}

// IsSuccess returns true when this vectorization cancel unauthorized response has a 2xx status code
func (o *VectorizationCancelUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization cancel unauthorized response has a 3xx status code
func (o *VectorizationCancelUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization cancel unauthorized response has a 4xx status code
func (o *VectorizationCancelUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization cancel unauthorized response has a 5xx status code
func (o *VectorizationCancelUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization cancel unauthorized response a status code equal to that given
func (o *VectorizationCancelUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the vectorization cancel unauthorized response
func (o *VectorizationCancelUnauthorized) Code() int {
	return 401
}

func (o *VectorizationCancelUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelUnauthorized ", 401)
}

func (o *VectorizationCancelUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelUnauthorized ", 401)
}

func (o *VectorizationCancelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVectorizationCancelForbidden creates a VectorizationCancelForbidden with default headers values
func NewVectorizationCancelForbidden() *VectorizationCancelForbidden {
	return &VectorizationCancelForbidden{}
}

/*
VectorizationCancelForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type VectorizationCancelForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization cancel forbidden response has a 2xx status code
func (o *VectorizationCancelForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization cancel forbidden response has a 3xx status code
func (o *VectorizationCancelForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization cancel forbidden response has a 4xx status code
func (o *VectorizationCancelForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization cancel forbidden response has a 5xx status code
func (o *VectorizationCancelForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization cancel forbidden response a status code equal to that given
func (o *VectorizationCancelForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the vectorization cancel forbidden response
func (o *VectorizationCancelForbidden) Code() int {
	return 403
}

func (o *VectorizationCancelForbidden) Error() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelForbidden  %+v", 403, o.Payload)
}

func (o *VectorizationCancelForbidden) String() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelForbidden  %+v", 403, o.Payload)
}

func (o *VectorizationCancelForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationCancelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationCancelNotFound creates a VectorizationCancelNotFound with default headers values
func NewVectorizationCancelNotFound() *VectorizationCancelNotFound {
	return &VectorizationCancelNotFound{}
}

/*
VectorizationCancelNotFound describes a response with status code 404, with default header values.

Vectorization task not found
*/
type VectorizationCancelNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization cancel not found response has a 2xx status code
func (o *VectorizationCancelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization cancel not found response has a 3xx status code
func (o *VectorizationCancelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization cancel not found response has a 4xx status code
func (o *VectorizationCancelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization cancel not found response has a 5xx status code
func (o *VectorizationCancelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization cancel not found response a status code equal to that given
func (o *VectorizationCancelNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the vectorization cancel not found response
func (o *VectorizationCancelNotFound) Code() int {
	return 404
}

func (o *VectorizationCancelNotFound) Error() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelNotFound  %+v", 404, o.Payload)
}

func (o *VectorizationCancelNotFound) String() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelNotFound  %+v", 404, o.Payload)
}

func (o *VectorizationCancelNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationCancelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationCancelUnprocessableEntity creates a VectorizationCancelUnprocessableEntity with default headers values
func NewVectorizationCancelUnprocessableEntity() *VectorizationCancelUnprocessableEntity {
	return &VectorizationCancelUnprocessableEntity{}
}

/*
VectorizationCancelUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous.
*/
type VectorizationCancelUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization cancel unprocessable entity response has a 2xx status code
func (o *VectorizationCancelUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization cancel unprocessable entity response has a 3xx status code
func (o *VectorizationCancelUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization cancel unprocessable entity response has a 4xx status code
func (o *VectorizationCancelUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization cancel unprocessable entity response has a 5xx status code
func (o *VectorizationCancelUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization cancel unprocessable entity response a status code equal to that given
func (o *VectorizationCancelUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the vectorization cancel unprocessable entity response
func (o *VectorizationCancelUnprocessableEntity) Code() int {
	return 422
}

func (o *VectorizationCancelUnprocessableEntity) Error() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VectorizationCancelUnprocessableEntity) String() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VectorizationCancelUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationCancelUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationCancelInternalServerError creates a VectorizationCancelInternalServerError with default headers values
func NewVectorizationCancelInternalServerError() *VectorizationCancelInternalServerError {
	return &VectorizationCancelInternalServerError{}
}

/*
VectorizationCancelInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type VectorizationCancelInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization cancel internal server error response has a 2xx status code
func (o *VectorizationCancelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization cancel internal server error response has a 3xx status code
func (o *VectorizationCancelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization cancel internal server error response has a 4xx status code
func (o *VectorizationCancelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this vectorization cancel internal server error response has a 5xx status code
func (o *VectorizationCancelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this vectorization cancel internal server error response a status code equal to that given
func (o *VectorizationCancelInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the vectorization cancel internal server error response
func (o *VectorizationCancelInternalServerError) Code() int {
	return 500
}

func (o *VectorizationCancelInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelInternalServerError  %+v", 500, o.Payload)
}

func (o *VectorizationCancelInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationCancelInternalServerError  %+v", 500, o.Payload)
}

func (o *VectorizationCancelInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationCancelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
