//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package vectorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// VectorizationGetStatusReader is a Reader for the VectorizationGetStatus structure.
type VectorizationGetStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VectorizationGetStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVectorizationGetStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVectorizationGetStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewVectorizationGetStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewVectorizationGetStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVectorizationGetStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVectorizationGetStatusUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVectorizationGetStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVectorizationGetStatusOK creates a VectorizationGetStatusOK with default headers values
func NewVectorizationGetStatusOK() *VectorizationGetStatusOK {
	return &VectorizationGetStatusOK{}
}

/*
VectorizationGetStatusOK describes a response with status code 200, with default header values.

The status of the vectorization task
*/
type VectorizationGetStatusOK struct {
	Payload *models.VectorizationStatusResponse
}

// IsSuccess returns true when this vectorization get status o k response has a 2xx status code
func (o *VectorizationGetStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this vectorization get status o k response has a 3xx status code
func (o *VectorizationGetStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization get status o k response has a 4xx status code
func (o *VectorizationGetStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this vectorization get status o k response has a 5xx status code
func (o *VectorizationGetStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization get status o k response a status code equal to that given
func (o *VectorizationGetStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the vectorization get status o k response
func (o *VectorizationGetStatusOK) Code() int {
	return 200
}

func (o *VectorizationGetStatusOK) Error() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusOK  %+v", 200, o.Payload)
}

func (o *VectorizationGetStatusOK) String() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusOK  %+v", 200, o.Payload)
}

func (o *VectorizationGetStatusOK) GetPayload() *models.VectorizationStatusResponse {
	return o.Payload
}

func (o *VectorizationGetStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VectorizationStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationGetStatusBadRequest creates a VectorizationGetStatusBadRequest with default headers values
func NewVectorizationGetStatusBadRequest() *VectorizationGetStatusBadRequest {
	return &VectorizationGetStatusBadRequest{}
}

/*
VectorizationGetStatusBadRequest describes a response with status code 400, with default header values.

Malformed request.
*/
type VectorizationGetStatusBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization get status bad request response has a 2xx status code
func (o *VectorizationGetStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization get status bad request response has a 3xx status code
func (o *VectorizationGetStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization get status bad request response has a 4xx status code
func (o *VectorizationGetStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization get status bad request response has a 5xx status code
func (o *VectorizationGetStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization get status bad request response a status code equal to that given
func (o *VectorizationGetStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the vectorization get status bad request response
func (o *VectorizationGetStatusBadRequest) Code() int {
	return 400
}

func (o *VectorizationGetStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusBadRequest  %+v", 400, o.Payload)
}

func (o *VectorizationGetStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusBadRequest  %+v", 400, o.Payload)
}

func (o *VectorizationGetStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationGetStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationGetStatusUnauthorized creates a VectorizationGetStatusUnauthorized with default headers values
func NewVectorizationGetStatusUnauthorized() *VectorizationGetStatusUnauthorized {
	return &VectorizationGetStatusUnauthorized{}
}

/*
VectorizationGetStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type VectorizationGetStatusUnauthorized struct {
}

// IsSuccess returns true when this vectorization get status unauthorized response has a 2xx status code
func (o *VectorizationGetStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization get status unauthorized response has a 3xx status code
func (o *VectorizationGetStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization get status unauthorized response has a 4xx status code
func (o *VectorizationGetStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization get status unauthorized response has a 5xx status code
func (o *VectorizationGetStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization get status unauthorized response a status code equal to that given
func (o *VectorizationGetStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the vectorization get status unauthorized response
func (o *VectorizationGetStatusUnauthorized) Code() int {
	return 401
}

func (o *VectorizationGetStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusUnauthorized ", 401)
}

func (o *VectorizationGetStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusUnauthorized ", 401)
}

func (o *VectorizationGetStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVectorizationGetStatusForbidden creates a VectorizationGetStatusForbidden with default headers values
func NewVectorizationGetStatusForbidden() *VectorizationGetStatusForbidden {
	return &VectorizationGetStatusForbidden{}
}

/*
VectorizationGetStatusForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type VectorizationGetStatusForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization get status forbidden response has a 2xx status code
func (o *VectorizationGetStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization get status forbidden response has a 3xx status code
func (o *VectorizationGetStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization get status forbidden response has a 4xx status code
func (o *VectorizationGetStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization get status forbidden response has a 5xx status code
func (o *VectorizationGetStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization get status forbidden response a status code equal to that given
func (o *VectorizationGetStatusForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the vectorization get status forbidden response
func (o *VectorizationGetStatusForbidden) Code() int {
	return 403
}

func (o *VectorizationGetStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusForbidden  %+v", 403, o.Payload)
}

func (o *VectorizationGetStatusForbidden) String() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusForbidden  %+v", 403, o.Payload)
}

func (o *VectorizationGetStatusForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationGetStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationGetStatusNotFound creates a VectorizationGetStatusNotFound with default headers values
func NewVectorizationGetStatusNotFound() *VectorizationGetStatusNotFound {
	return &VectorizationGetStatusNotFound{}
}

/*
VectorizationGetStatusNotFound describes a response with status code 404, with default header values.

Vectorization task not found
*/
type VectorizationGetStatusNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization get status not found response has a 2xx status code
func (o *VectorizationGetStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization get status not found response has a 3xx status code
func (o *VectorizationGetStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization get status not found response has a 4xx status code
func (o *VectorizationGetStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization get status not found response has a 5xx status code
func (o *VectorizationGetStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization get status not found response a status code equal to that given
func (o *VectorizationGetStatusNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the vectorization get status not found response
func (o *VectorizationGetStatusNotFound) Code() int {
	return 404
}

func (o *VectorizationGetStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusNotFound  %+v", 404, o.Payload)
}

func (o *VectorizationGetStatusNotFound) String() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusNotFound  %+v", 404, o.Payload)
}

func (o *VectorizationGetStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationGetStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationGetStatusUnprocessableEntity creates a VectorizationGetStatusUnprocessableEntity with default headers values
func NewVectorizationGetStatusUnprocessableEntity() *VectorizationGetStatusUnprocessableEntity {
	return &VectorizationGetStatusUnprocessableEntity{}
}

/*
VectorizationGetStatusUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous.
*/
type VectorizationGetStatusUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization get status unprocessable entity response has a 2xx status code
func (o *VectorizationGetStatusUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization get status unprocessable entity response has a 3xx status code
func (o *VectorizationGetStatusUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization get status unprocessable entity response has a 4xx status code
func (o *VectorizationGetStatusUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization get status unprocessable entity response has a 5xx status code
func (o *VectorizationGetStatusUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization get status unprocessable entity response a status code equal to that given
func (o *VectorizationGetStatusUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the vectorization get status unprocessable entity response
func (o *VectorizationGetStatusUnprocessableEntity) Code() int {
	return 422
}

func (o *VectorizationGetStatusUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VectorizationGetStatusUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VectorizationGetStatusUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationGetStatusUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationGetStatusInternalServerError creates a VectorizationGetStatusInternalServerError with default headers values
func NewVectorizationGetStatusInternalServerError() *VectorizationGetStatusInternalServerError {
	return &VectorizationGetStatusInternalServerError{}
}

/*
VectorizationGetStatusInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type VectorizationGetStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization get status internal server error response has a 2xx status code
func (o *VectorizationGetStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization get status internal server error response has a 3xx status code
func (o *VectorizationGetStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization get status internal server error response has a 4xx status code
func (o *VectorizationGetStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this vectorization get status internal server error response has a 5xx status code
func (o *VectorizationGetStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this vectorization get status internal server error response a status code equal to that given
func (o *VectorizationGetStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the vectorization get status internal server error response
func (o *VectorizationGetStatusInternalServerError) Code() int {
	return 500
}

func (o *VectorizationGetStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *VectorizationGetStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationGetStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *VectorizationGetStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationGetStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
