//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package vectorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// VectorizationStartReader is a Reader for the VectorizationStart structure.
type VectorizationStartReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VectorizationStartReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVectorizationStartOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVectorizationStartBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewVectorizationStartUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewVectorizationStartForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewVectorizationStartConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewVectorizationStartUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVectorizationStartInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVectorizationStartOK creates a VectorizationStartOK with default headers values
func NewVectorizationStartOK() *VectorizationStartOK {
	return &VectorizationStartOK{}
}

/*
VectorizationStartOK describes a response with status code 200, with default header values.

The task was successfully started
*/
type VectorizationStartOK struct {
}

// IsSuccess returns true when this vectorization start o k response has a 2xx status code
func (o *VectorizationStartOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this vectorization start o k response has a 3xx status code
func (o *VectorizationStartOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization start o k response has a 4xx status code
func (o *VectorizationStartOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this vectorization start o k response has a 5xx status code
func (o *VectorizationStartOK) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization start o k response a status code equal to that given
func (o *VectorizationStartOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the vectorization start o k response
func (o *VectorizationStartOK) Code() int {
	return 200
}

func (o *VectorizationStartOK) Error() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartOK ", 200)
}

func (o *VectorizationStartOK) String() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartOK ", 200)
}

func (o *VectorizationStartOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVectorizationStartBadRequest creates a VectorizationStartBadRequest with default headers values
func NewVectorizationStartBadRequest() *VectorizationStartBadRequest {
	return &VectorizationStartBadRequest{}
}

/*
VectorizationStartBadRequest describes a response with status code 400, with default header values.

Malformed request.
*/
type VectorizationStartBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization start bad request response has a 2xx status code
func (o *VectorizationStartBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization start bad request response has a 3xx status code
func (o *VectorizationStartBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization start bad request response has a 4xx status code
func (o *VectorizationStartBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization start bad request response has a 5xx status code
func (o *VectorizationStartBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization start bad request response a status code equal to that given
func (o *VectorizationStartBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the vectorization start bad request response
func (o *VectorizationStartBadRequest) Code() int {
	return 400
}

func (o *VectorizationStartBadRequest) Error() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartBadRequest  %+v", 400, o.Payload)
}

func (o *VectorizationStartBadRequest) String() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartBadRequest  %+v", 400, o.Payload)
}

func (o *VectorizationStartBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationStartBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationStartUnauthorized creates a VectorizationStartUnauthorized with default headers values
func NewVectorizationStartUnauthorized() *VectorizationStartUnauthorized {
	return &VectorizationStartUnauthorized{}
}

/*
VectorizationStartUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type VectorizationStartUnauthorized struct {
}

// IsSuccess returns true when this vectorization start unauthorized response has a 2xx status code
func (o *VectorizationStartUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization start unauthorized response has a 3xx status code
func (o *VectorizationStartUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization start unauthorized response has a 4xx status code
func (o *VectorizationStartUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization start unauthorized response has a 5xx status code
func (o *VectorizationStartUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization start unauthorized response a status code equal to that given
func (o *VectorizationStartUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the vectorization start unauthorized response
func (o *VectorizationStartUnauthorized) Code() int {
	return 401
}

func (o *VectorizationStartUnauthorized) Error() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartUnauthorized ", 401)
}

func (o *VectorizationStartUnauthorized) String() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartUnauthorized ", 401)
}

func (o *VectorizationStartUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVectorizationStartForbidden creates a VectorizationStartForbidden with default headers values
func NewVectorizationStartForbidden() *VectorizationStartForbidden {
	return &VectorizationStartForbidden{}
}

/*
VectorizationStartForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type VectorizationStartForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization start forbidden response has a 2xx status code
func (o *VectorizationStartForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization start forbidden response has a 3xx status code
func (o *VectorizationStartForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization start forbidden response has a 4xx status code
func (o *VectorizationStartForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization start forbidden response has a 5xx status code
func (o *VectorizationStartForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization start forbidden response a status code equal to that given
func (o *VectorizationStartForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the vectorization start forbidden response
func (o *VectorizationStartForbidden) Code() int {
	return 403
}

func (o *VectorizationStartForbidden) Error() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartForbidden  %+v", 403, o.Payload)
}

func (o *VectorizationStartForbidden) String() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartForbidden  %+v", 403, o.Payload)
}

func (o *VectorizationStartForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationStartForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationStartConflict creates a VectorizationStartConflict with default headers values
func NewVectorizationStartConflict() *VectorizationStartConflict {
	return &VectorizationStartConflict{}
}

/*
VectorizationStartConflict describes a response with status code 409, with default header values.

Task already exists
*/
type VectorizationStartConflict struct {
}

// IsSuccess returns true when this vectorization start conflict response has a 2xx status code
func (o *VectorizationStartConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization start conflict response has a 3xx status code
func (o *VectorizationStartConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization start conflict response has a 4xx status code
func (o *VectorizationStartConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization start conflict response has a 5xx status code
func (o *VectorizationStartConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization start conflict response a status code equal to that given
func (o *VectorizationStartConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the vectorization start conflict response
func (o *VectorizationStartConflict) Code() int {
	return 409
}

func (o *VectorizationStartConflict) Error() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartConflict ", 409)
}

func (o *VectorizationStartConflict) String() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartConflict ", 409)
}

func (o *VectorizationStartConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewVectorizationStartUnprocessableEntity creates a VectorizationStartUnprocessableEntity with default headers values
func NewVectorizationStartUnprocessableEntity() *VectorizationStartUnprocessableEntity {
	return &VectorizationStartUnprocessableEntity{}
}

/*
VectorizationStartUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous.
*/
type VectorizationStartUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization start unprocessable entity response has a 2xx status code
func (o *VectorizationStartUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization start unprocessable entity response has a 3xx status code
func (o *VectorizationStartUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization start unprocessable entity response has a 4xx status code
func (o *VectorizationStartUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this vectorization start unprocessable entity response has a 5xx status code
func (o *VectorizationStartUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this vectorization start unprocessable entity response a status code equal to that given
func (o *VectorizationStartUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the vectorization start unprocessable entity response
func (o *VectorizationStartUnprocessableEntity) Code() int {
	return 422
}

func (o *VectorizationStartUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VectorizationStartUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *VectorizationStartUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationStartUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVectorizationStartInternalServerError creates a VectorizationStartInternalServerError with default headers values
func NewVectorizationStartInternalServerError() *VectorizationStartInternalServerError {
	return &VectorizationStartInternalServerError{}
}

/*
VectorizationStartInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type VectorizationStartInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this vectorization start internal server error response has a 2xx status code
func (o *VectorizationStartInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this vectorization start internal server error response has a 3xx status code
func (o *VectorizationStartInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this vectorization start internal server error response has a 4xx status code
func (o *VectorizationStartInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this vectorization start internal server error response has a 5xx status code
func (o *VectorizationStartInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this vectorization start internal server error response a status code equal to that given
func (o *VectorizationStartInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the vectorization start internal server error response
func (o *VectorizationStartInternalServerError) Code() int {
	return 500
}

func (o *VectorizationStartInternalServerError) Error() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartInternalServerError  %+v", 500, o.Payload)
}

func (o *VectorizationStartInternalServerError) String() string {
	return fmt.Sprintf("[POST /schema/{collectionName}/vectorize/{targetVector}][%d] vectorizationStartInternalServerError  %+v", 500, o.Payload)
}

func (o *VectorizationStartInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *VectorizationStartInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
