//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// ReplicationScaleApplyReader is a Reader for the ReplicationScaleApply structure.
type ReplicationScaleApplyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplicationScaleApplyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplicationScaleApplyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplicationScaleApplyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReplicationScaleApplyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplicationScaleApplyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplicationScaleApplyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReplicationScaleApplyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 501:
		result := NewReplicationScaleApplyNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReplicationScaleApplyOK creates a ReplicationScaleApplyOK with default headers values
func NewReplicationScaleApplyOK() *ReplicationScaleApplyOK {
	return &ReplicationScaleApplyOK{}
}

/*
ReplicationScaleApplyOK describes a response with status code 200, with default header values.

List of replication shard copy operation IDs initiated for the scale operation
*/
type ReplicationScaleApplyOK struct {
	Payload *models.ReplicationScaleApplyResponse
}

// IsSuccess returns true when this replication scale apply o k response has a 2xx status code
func (o *ReplicationScaleApplyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this replication scale apply o k response has a 3xx status code
func (o *ReplicationScaleApplyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replication scale apply o k response has a 4xx status code
func (o *ReplicationScaleApplyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this replication scale apply o k response has a 5xx status code
func (o *ReplicationScaleApplyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this replication scale apply o k response a status code equal to that given
func (o *ReplicationScaleApplyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the replication scale apply o k response
func (o *ReplicationScaleApplyOK) Code() int {
	return 200
}

func (o *ReplicationScaleApplyOK) Error() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyOK  %+v", 200, o.Payload)
}

func (o *ReplicationScaleApplyOK) String() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyOK  %+v", 200, o.Payload)
}

func (o *ReplicationScaleApplyOK) GetPayload() *models.ReplicationScaleApplyResponse {
	return o.Payload
}

func (o *ReplicationScaleApplyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ReplicationScaleApplyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicationScaleApplyBadRequest creates a ReplicationScaleApplyBadRequest with default headers values
func NewReplicationScaleApplyBadRequest() *ReplicationScaleApplyBadRequest {
	return &ReplicationScaleApplyBadRequest{}
}

/*
ReplicationScaleApplyBadRequest describes a response with status code 400, with default header values.

Bad request.
*/
type ReplicationScaleApplyBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replication scale apply bad request response has a 2xx status code
func (o *ReplicationScaleApplyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replication scale apply bad request response has a 3xx status code
func (o *ReplicationScaleApplyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replication scale apply bad request response has a 4xx status code
func (o *ReplicationScaleApplyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this replication scale apply bad request response has a 5xx status code
func (o *ReplicationScaleApplyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this replication scale apply bad request response a status code equal to that given
func (o *ReplicationScaleApplyBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the replication scale apply bad request response
func (o *ReplicationScaleApplyBadRequest) Code() int {
	return 400
}

func (o *ReplicationScaleApplyBadRequest) Error() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyBadRequest  %+v", 400, o.Payload)
}

func (o *ReplicationScaleApplyBadRequest) String() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyBadRequest  %+v", 400, o.Payload)
}

func (o *ReplicationScaleApplyBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicationScaleApplyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicationScaleApplyUnauthorized creates a ReplicationScaleApplyUnauthorized with default headers values
func NewReplicationScaleApplyUnauthorized() *ReplicationScaleApplyUnauthorized {
	return &ReplicationScaleApplyUnauthorized{}
}

/*
ReplicationScaleApplyUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type ReplicationScaleApplyUnauthorized struct {
}

// IsSuccess returns true when this replication scale apply unauthorized response has a 2xx status code
func (o *ReplicationScaleApplyUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replication scale apply unauthorized response has a 3xx status code
func (o *ReplicationScaleApplyUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replication scale apply unauthorized response has a 4xx status code
func (o *ReplicationScaleApplyUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this replication scale apply unauthorized response has a 5xx status code
func (o *ReplicationScaleApplyUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this replication scale apply unauthorized response a status code equal to that given
func (o *ReplicationScaleApplyUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the replication scale apply unauthorized response
func (o *ReplicationScaleApplyUnauthorized) Code() int {
	return 401
}

func (o *ReplicationScaleApplyUnauthorized) Error() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyUnauthorized ", 401)
}

func (o *ReplicationScaleApplyUnauthorized) String() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyUnauthorized ", 401)
}

func (o *ReplicationScaleApplyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplicationScaleApplyForbidden creates a ReplicationScaleApplyForbidden with default headers values
func NewReplicationScaleApplyForbidden() *ReplicationScaleApplyForbidden {
	return &ReplicationScaleApplyForbidden{}
}

/*
ReplicationScaleApplyForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReplicationScaleApplyForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replication scale apply forbidden response has a 2xx status code
func (o *ReplicationScaleApplyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replication scale apply forbidden response has a 3xx status code
func (o *ReplicationScaleApplyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replication scale apply forbidden response has a 4xx status code
func (o *ReplicationScaleApplyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this replication scale apply forbidden response has a 5xx status code
func (o *ReplicationScaleApplyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this replication scale apply forbidden response a status code equal to that given
func (o *ReplicationScaleApplyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the replication scale apply forbidden response
func (o *ReplicationScaleApplyForbidden) Code() int {
	return 403
}

func (o *ReplicationScaleApplyForbidden) Error() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyForbidden  %+v", 403, o.Payload)
}

func (o *ReplicationScaleApplyForbidden) String() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyForbidden  %+v", 403, o.Payload)
}

func (o *ReplicationScaleApplyForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicationScaleApplyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicationScaleApplyNotFound creates a ReplicationScaleApplyNotFound with default headers values
func NewReplicationScaleApplyNotFound() *ReplicationScaleApplyNotFound {
	return &ReplicationScaleApplyNotFound{}
}

/*
ReplicationScaleApplyNotFound describes a response with status code 404, with default header values.

Collection not found.
*/
type ReplicationScaleApplyNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replication scale apply not found response has a 2xx status code
func (o *ReplicationScaleApplyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replication scale apply not found response has a 3xx status code
func (o *ReplicationScaleApplyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replication scale apply not found response has a 4xx status code
func (o *ReplicationScaleApplyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this replication scale apply not found response has a 5xx status code
func (o *ReplicationScaleApplyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this replication scale apply not found response a status code equal to that given
func (o *ReplicationScaleApplyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the replication scale apply not found response
func (o *ReplicationScaleApplyNotFound) Code() int {
	return 404
}

func (o *ReplicationScaleApplyNotFound) Error() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyNotFound  %+v", 404, o.Payload)
}

func (o *ReplicationScaleApplyNotFound) String() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyNotFound  %+v", 404, o.Payload)
}

func (o *ReplicationScaleApplyNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicationScaleApplyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicationScaleApplyInternalServerError creates a ReplicationScaleApplyInternalServerError with default headers values
func NewReplicationScaleApplyInternalServerError() *ReplicationScaleApplyInternalServerError {
	return &ReplicationScaleApplyInternalServerError{}
}

/*
ReplicationScaleApplyInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type ReplicationScaleApplyInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replication scale apply internal server error response has a 2xx status code
func (o *ReplicationScaleApplyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replication scale apply internal server error response has a 3xx status code
func (o *ReplicationScaleApplyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replication scale apply internal server error response has a 4xx status code
func (o *ReplicationScaleApplyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this replication scale apply internal server error response has a 5xx status code
func (o *ReplicationScaleApplyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this replication scale apply internal server error response a status code equal to that given
func (o *ReplicationScaleApplyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the replication scale apply internal server error response
func (o *ReplicationScaleApplyInternalServerError) Code() int {
	return 500
}

func (o *ReplicationScaleApplyInternalServerError) Error() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyInternalServerError  %+v", 500, o.Payload)
}

func (o *ReplicationScaleApplyInternalServerError) String() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyInternalServerError  %+v", 500, o.Payload)
}

func (o *ReplicationScaleApplyInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicationScaleApplyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplicationScaleApplyNotImplemented creates a ReplicationScaleApplyNotImplemented with default headers values
func NewReplicationScaleApplyNotImplemented() *ReplicationScaleApplyNotImplemented {
	return &ReplicationScaleApplyNotImplemented{}
}

/*
ReplicationScaleApplyNotImplemented describes a response with status code 501, with default header values.

Replica movement operations are disabled.
*/
type ReplicationScaleApplyNotImplemented struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this replication scale apply not implemented response has a 2xx status code
func (o *ReplicationScaleApplyNotImplemented) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this replication scale apply not implemented response has a 3xx status code
func (o *ReplicationScaleApplyNotImplemented) IsRedirect() bool {
	return false
}

// IsClientError returns true when this replication scale apply not implemented response has a 4xx status code
func (o *ReplicationScaleApplyNotImplemented) IsClientError() bool {
	return false
}

// IsServerError returns true when this replication scale apply not implemented response has a 5xx status code
func (o *ReplicationScaleApplyNotImplemented) IsServerError() bool {
	return true
}

// IsCode returns true when this replication scale apply not implemented response a status code equal to that given
func (o *ReplicationScaleApplyNotImplemented) IsCode(code int) bool {
	return code == 501
}

// Code gets the status code for the replication scale apply not implemented response
func (o *ReplicationScaleApplyNotImplemented) Code() int {
	return 501
}

func (o *ReplicationScaleApplyNotImplemented) Error() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyNotImplemented  %+v", 501, o.Payload)
}

func (o *ReplicationScaleApplyNotImplemented) String() string {
	return fmt.Sprintf("[POST /replication/scale][%d] replicationScaleApplyNotImplemented  %+v", 501, o.Payload)
}

func (o *ReplicationScaleApplyNotImplemented) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *ReplicationScaleApplyNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
