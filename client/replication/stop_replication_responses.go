//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// StopReplicationReader is a Reader for the StopReplication structure.
type StopReplicationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopReplicationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStopReplicationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStopReplicationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopReplicationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopReplicationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopReplicationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopReplicationNoContent creates a StopReplicationNoContent with default headers values
func NewStopReplicationNoContent() *StopReplicationNoContent {
	return &StopReplicationNoContent{}
}

/*
StopReplicationNoContent describes a response with status code 204, with default header values.

Successfully stopped.
*/
type StopReplicationNoContent struct {
}

// IsSuccess returns true when this stop replication no content response has a 2xx status code
func (o *StopReplicationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop replication no content response has a 3xx status code
func (o *StopReplicationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop replication no content response has a 4xx status code
func (o *StopReplicationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop replication no content response has a 5xx status code
func (o *StopReplicationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this stop replication no content response a status code equal to that given
func (o *StopReplicationNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the stop replication no content response
func (o *StopReplicationNoContent) Code() int {
	return 204
}

func (o *StopReplicationNoContent) Error() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationNoContent ", 204)
}

func (o *StopReplicationNoContent) String() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationNoContent ", 204)
}

func (o *StopReplicationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopReplicationUnauthorized creates a StopReplicationUnauthorized with default headers values
func NewStopReplicationUnauthorized() *StopReplicationUnauthorized {
	return &StopReplicationUnauthorized{}
}

/*
StopReplicationUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type StopReplicationUnauthorized struct {
}

// IsSuccess returns true when this stop replication unauthorized response has a 2xx status code
func (o *StopReplicationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop replication unauthorized response has a 3xx status code
func (o *StopReplicationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop replication unauthorized response has a 4xx status code
func (o *StopReplicationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop replication unauthorized response has a 5xx status code
func (o *StopReplicationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this stop replication unauthorized response a status code equal to that given
func (o *StopReplicationUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the stop replication unauthorized response
func (o *StopReplicationUnauthorized) Code() int {
	return 401
}

func (o *StopReplicationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationUnauthorized ", 401)
}

func (o *StopReplicationUnauthorized) String() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationUnauthorized ", 401)
}

func (o *StopReplicationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopReplicationForbidden creates a StopReplicationForbidden with default headers values
func NewStopReplicationForbidden() *StopReplicationForbidden {
	return &StopReplicationForbidden{}
}

/*
StopReplicationForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type StopReplicationForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stop replication forbidden response has a 2xx status code
func (o *StopReplicationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop replication forbidden response has a 3xx status code
func (o *StopReplicationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop replication forbidden response has a 4xx status code
func (o *StopReplicationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop replication forbidden response has a 5xx status code
func (o *StopReplicationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this stop replication forbidden response a status code equal to that given
func (o *StopReplicationForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the stop replication forbidden response
func (o *StopReplicationForbidden) Code() int {
	return 403
}

func (o *StopReplicationForbidden) Error() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationForbidden  %+v", 403, o.Payload)
}

func (o *StopReplicationForbidden) String() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationForbidden  %+v", 403, o.Payload)
}

func (o *StopReplicationForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StopReplicationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopReplicationNotFound creates a StopReplicationNotFound with default headers values
func NewStopReplicationNotFound() *StopReplicationNotFound {
	return &StopReplicationNotFound{}
}

/*
StopReplicationNotFound describes a response with status code 404, with default header values.

Shard replica operation not found
*/
type StopReplicationNotFound struct {
}

// IsSuccess returns true when this stop replication not found response has a 2xx status code
func (o *StopReplicationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop replication not found response has a 3xx status code
func (o *StopReplicationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop replication not found response has a 4xx status code
func (o *StopReplicationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop replication not found response has a 5xx status code
func (o *StopReplicationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop replication not found response a status code equal to that given
func (o *StopReplicationNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop replication not found response
func (o *StopReplicationNotFound) Code() int {
	return 404
}

func (o *StopReplicationNotFound) Error() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationNotFound ", 404)
}

func (o *StopReplicationNotFound) String() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationNotFound ", 404)
}

func (o *StopReplicationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStopReplicationInternalServerError creates a StopReplicationInternalServerError with default headers values
func NewStopReplicationInternalServerError() *StopReplicationInternalServerError {
	return &StopReplicationInternalServerError{}
}

/*
StopReplicationInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type StopReplicationInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this stop replication internal server error response has a 2xx status code
func (o *StopReplicationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop replication internal server error response has a 3xx status code
func (o *StopReplicationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop replication internal server error response has a 4xx status code
func (o *StopReplicationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop replication internal server error response has a 5xx status code
func (o *StopReplicationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop replication internal server error response a status code equal to that given
func (o *StopReplicationInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop replication internal server error response
func (o *StopReplicationInternalServerError) Code() int {
	return 500
}

func (o *StopReplicationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationInternalServerError  %+v", 500, o.Payload)
}

func (o *StopReplicationInternalServerError) String() string {
	return fmt.Sprintf("[POST /replication/replicate/{id}/stop][%d] stopReplicationInternalServerError  %+v", 500, o.Payload)
}

func (o *StopReplicationInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *StopReplicationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
