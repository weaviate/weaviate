//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteReplicaParams creates a new DeleteReplicaParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteReplicaParams() *DeleteReplicaParams {
	return &DeleteReplicaParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteReplicaParamsWithTimeout creates a new DeleteReplicaParams object
// with the ability to set a timeout on a request.
func NewDeleteReplicaParamsWithTimeout(timeout time.Duration) *DeleteReplicaParams {
	return &DeleteReplicaParams{
		timeout: timeout,
	}
}

// NewDeleteReplicaParamsWithContext creates a new DeleteReplicaParams object
// with the ability to set a context for a request.
func NewDeleteReplicaParamsWithContext(ctx context.Context) *DeleteReplicaParams {
	return &DeleteReplicaParams{
		Context: ctx,
	}
}

// NewDeleteReplicaParamsWithHTTPClient creates a new DeleteReplicaParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteReplicaParamsWithHTTPClient(client *http.Client) *DeleteReplicaParams {
	return &DeleteReplicaParams{
		HTTPClient: client,
	}
}

/*
DeleteReplicaParams contains all the parameters to send to the API endpoint

	for the delete replica operation.

	Typically these are written to a http.Request.
*/
type DeleteReplicaParams struct {

	/* Collection.

	   The collection to delete the shard from.
	*/
	Collection *string

	/* NodeID.

	   The node ID to delete the replica from.
	*/
	NodeID *string

	/* Shard.

	   The shard to delete.
	*/
	Shard *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete replica params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteReplicaParams) WithDefaults() *DeleteReplicaParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete replica params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteReplicaParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete replica params
func (o *DeleteReplicaParams) WithTimeout(timeout time.Duration) *DeleteReplicaParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete replica params
func (o *DeleteReplicaParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete replica params
func (o *DeleteReplicaParams) WithContext(ctx context.Context) *DeleteReplicaParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete replica params
func (o *DeleteReplicaParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete replica params
func (o *DeleteReplicaParams) WithHTTPClient(client *http.Client) *DeleteReplicaParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete replica params
func (o *DeleteReplicaParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCollection adds the collection to the delete replica params
func (o *DeleteReplicaParams) WithCollection(collection *string) *DeleteReplicaParams {
	o.SetCollection(collection)
	return o
}

// SetCollection adds the collection to the delete replica params
func (o *DeleteReplicaParams) SetCollection(collection *string) {
	o.Collection = collection
}

// WithNodeID adds the nodeID to the delete replica params
func (o *DeleteReplicaParams) WithNodeID(nodeID *string) *DeleteReplicaParams {
	o.SetNodeID(nodeID)
	return o
}

// SetNodeID adds the nodeId to the delete replica params
func (o *DeleteReplicaParams) SetNodeID(nodeID *string) {
	o.NodeID = nodeID
}

// WithShard adds the shard to the delete replica params
func (o *DeleteReplicaParams) WithShard(shard *string) *DeleteReplicaParams {
	o.SetShard(shard)
	return o
}

// SetShard adds the shard to the delete replica params
func (o *DeleteReplicaParams) SetShard(shard *string) {
	o.Shard = shard
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteReplicaParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Collection != nil {

		// query param collection
		var qrCollection string

		if o.Collection != nil {
			qrCollection = *o.Collection
		}
		qCollection := qrCollection
		if qCollection != "" {

			if err := r.SetQueryParam("collection", qCollection); err != nil {
				return err
			}
		}
	}

	if o.NodeID != nil {

		// query param nodeId
		var qrNodeID string

		if o.NodeID != nil {
			qrNodeID = *o.NodeID
		}
		qNodeID := qrNodeID
		if qNodeID != "" {

			if err := r.SetQueryParam("nodeId", qNodeID); err != nil {
				return err
			}
		}
	}

	if o.Shard != nil {

		// query param shard
		var qrShard string

		if o.Shard != nil {
			qrShard = *o.Shard
		}
		qShard := qrShard
		if qShard != "" {

			if err := r.SetQueryParam("shard", qShard); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
