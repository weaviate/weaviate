//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/weaviate/weaviate/entities/models"
)

// DeleteReplicaReader is a Reader for the DeleteReplica structure.
type DeleteReplicaReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteReplicaReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteReplicaNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteReplicaBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteReplicaUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteReplicaForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteReplicaNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteReplicaInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteReplicaNoContent creates a DeleteReplicaNoContent with default headers values
func NewDeleteReplicaNoContent() *DeleteReplicaNoContent {
	return &DeleteReplicaNoContent{}
}

/*
DeleteReplicaNoContent describes a response with status code 204, with default header values.

Successfully deleted.
*/
type DeleteReplicaNoContent struct {
}

// IsSuccess returns true when this delete replica no content response has a 2xx status code
func (o *DeleteReplicaNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete replica no content response has a 3xx status code
func (o *DeleteReplicaNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete replica no content response has a 4xx status code
func (o *DeleteReplicaNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete replica no content response has a 5xx status code
func (o *DeleteReplicaNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete replica no content response a status code equal to that given
func (o *DeleteReplicaNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the delete replica no content response
func (o *DeleteReplicaNoContent) Code() int {
	return 204
}

func (o *DeleteReplicaNoContent) Error() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaNoContent ", 204)
}

func (o *DeleteReplicaNoContent) String() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaNoContent ", 204)
}

func (o *DeleteReplicaNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteReplicaBadRequest creates a DeleteReplicaBadRequest with default headers values
func NewDeleteReplicaBadRequest() *DeleteReplicaBadRequest {
	return &DeleteReplicaBadRequest{}
}

/*
DeleteReplicaBadRequest describes a response with status code 400, with default header values.

Bad request.
*/
type DeleteReplicaBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete replica bad request response has a 2xx status code
func (o *DeleteReplicaBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete replica bad request response has a 3xx status code
func (o *DeleteReplicaBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete replica bad request response has a 4xx status code
func (o *DeleteReplicaBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete replica bad request response has a 5xx status code
func (o *DeleteReplicaBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete replica bad request response a status code equal to that given
func (o *DeleteReplicaBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete replica bad request response
func (o *DeleteReplicaBadRequest) Code() int {
	return 400
}

func (o *DeleteReplicaBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteReplicaBadRequest) String() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteReplicaBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteReplicaBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReplicaUnauthorized creates a DeleteReplicaUnauthorized with default headers values
func NewDeleteReplicaUnauthorized() *DeleteReplicaUnauthorized {
	return &DeleteReplicaUnauthorized{}
}

/*
DeleteReplicaUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type DeleteReplicaUnauthorized struct {
}

// IsSuccess returns true when this delete replica unauthorized response has a 2xx status code
func (o *DeleteReplicaUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete replica unauthorized response has a 3xx status code
func (o *DeleteReplicaUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete replica unauthorized response has a 4xx status code
func (o *DeleteReplicaUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete replica unauthorized response has a 5xx status code
func (o *DeleteReplicaUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete replica unauthorized response a status code equal to that given
func (o *DeleteReplicaUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete replica unauthorized response
func (o *DeleteReplicaUnauthorized) Code() int {
	return 401
}

func (o *DeleteReplicaUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaUnauthorized ", 401)
}

func (o *DeleteReplicaUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaUnauthorized ", 401)
}

func (o *DeleteReplicaUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteReplicaForbidden creates a DeleteReplicaForbidden with default headers values
func NewDeleteReplicaForbidden() *DeleteReplicaForbidden {
	return &DeleteReplicaForbidden{}
}

/*
DeleteReplicaForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteReplicaForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete replica forbidden response has a 2xx status code
func (o *DeleteReplicaForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete replica forbidden response has a 3xx status code
func (o *DeleteReplicaForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete replica forbidden response has a 4xx status code
func (o *DeleteReplicaForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete replica forbidden response has a 5xx status code
func (o *DeleteReplicaForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete replica forbidden response a status code equal to that given
func (o *DeleteReplicaForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the delete replica forbidden response
func (o *DeleteReplicaForbidden) Code() int {
	return 403
}

func (o *DeleteReplicaForbidden) Error() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaForbidden  %+v", 403, o.Payload)
}

func (o *DeleteReplicaForbidden) String() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaForbidden  %+v", 403, o.Payload)
}

func (o *DeleteReplicaForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteReplicaForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReplicaNotFound creates a DeleteReplicaNotFound with default headers values
func NewDeleteReplicaNotFound() *DeleteReplicaNotFound {
	return &DeleteReplicaNotFound{}
}

/*
DeleteReplicaNotFound describes a response with status code 404, with default header values.

Collection or shard or replica not found.
*/
type DeleteReplicaNotFound struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete replica not found response has a 2xx status code
func (o *DeleteReplicaNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete replica not found response has a 3xx status code
func (o *DeleteReplicaNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete replica not found response has a 4xx status code
func (o *DeleteReplicaNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete replica not found response has a 5xx status code
func (o *DeleteReplicaNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete replica not found response a status code equal to that given
func (o *DeleteReplicaNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete replica not found response
func (o *DeleteReplicaNotFound) Code() int {
	return 404
}

func (o *DeleteReplicaNotFound) Error() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaNotFound  %+v", 404, o.Payload)
}

func (o *DeleteReplicaNotFound) String() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaNotFound  %+v", 404, o.Payload)
}

func (o *DeleteReplicaNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteReplicaNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteReplicaInternalServerError creates a DeleteReplicaInternalServerError with default headers values
func NewDeleteReplicaInternalServerError() *DeleteReplicaInternalServerError {
	return &DeleteReplicaInternalServerError{}
}

/*
DeleteReplicaInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type DeleteReplicaInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this delete replica internal server error response has a 2xx status code
func (o *DeleteReplicaInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete replica internal server error response has a 3xx status code
func (o *DeleteReplicaInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete replica internal server error response has a 4xx status code
func (o *DeleteReplicaInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete replica internal server error response has a 5xx status code
func (o *DeleteReplicaInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete replica internal server error response a status code equal to that given
func (o *DeleteReplicaInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the delete replica internal server error response
func (o *DeleteReplicaInternalServerError) Code() int {
	return 500
}

func (o *DeleteReplicaInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteReplicaInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /replication/replica][%d] deleteReplicaInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteReplicaInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *DeleteReplicaInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
