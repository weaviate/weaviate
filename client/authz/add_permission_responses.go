//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/weaviate/weaviate/entities/models"
)

// AddPermissionReader is a Reader for the AddPermission structure.
type AddPermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddPermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewAddPermissionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewAddPermissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddPermissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddPermissionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddPermissionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddPermissionCreated creates a AddPermissionCreated with default headers values
func NewAddPermissionCreated() *AddPermissionCreated {
	return &AddPermissionCreated{}
}

/*
AddPermissionCreated describes a response with status code 201, with default header values.

Permission added successfully
*/
type AddPermissionCreated struct {
}

// IsSuccess returns true when this add permission created response has a 2xx status code
func (o *AddPermissionCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add permission created response has a 3xx status code
func (o *AddPermissionCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add permission created response has a 4xx status code
func (o *AddPermissionCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add permission created response has a 5xx status code
func (o *AddPermissionCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add permission created response a status code equal to that given
func (o *AddPermissionCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add permission created response
func (o *AddPermissionCreated) Code() int {
	return 201
}

func (o *AddPermissionCreated) Error() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionCreated ", 201)
}

func (o *AddPermissionCreated) String() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionCreated ", 201)
}

func (o *AddPermissionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddPermissionUnauthorized creates a AddPermissionUnauthorized with default headers values
func NewAddPermissionUnauthorized() *AddPermissionUnauthorized {
	return &AddPermissionUnauthorized{}
}

/*
AddPermissionUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type AddPermissionUnauthorized struct {
}

// IsSuccess returns true when this add permission unauthorized response has a 2xx status code
func (o *AddPermissionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add permission unauthorized response has a 3xx status code
func (o *AddPermissionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add permission unauthorized response has a 4xx status code
func (o *AddPermissionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add permission unauthorized response has a 5xx status code
func (o *AddPermissionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add permission unauthorized response a status code equal to that given
func (o *AddPermissionUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add permission unauthorized response
func (o *AddPermissionUnauthorized) Code() int {
	return 401
}

func (o *AddPermissionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionUnauthorized ", 401)
}

func (o *AddPermissionUnauthorized) String() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionUnauthorized ", 401)
}

func (o *AddPermissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddPermissionForbidden creates a AddPermissionForbidden with default headers values
func NewAddPermissionForbidden() *AddPermissionForbidden {
	return &AddPermissionForbidden{}
}

/*
AddPermissionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddPermissionForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add permission forbidden response has a 2xx status code
func (o *AddPermissionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add permission forbidden response has a 3xx status code
func (o *AddPermissionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add permission forbidden response has a 4xx status code
func (o *AddPermissionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add permission forbidden response has a 5xx status code
func (o *AddPermissionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add permission forbidden response a status code equal to that given
func (o *AddPermissionForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add permission forbidden response
func (o *AddPermissionForbidden) Code() int {
	return 403
}

func (o *AddPermissionForbidden) Error() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionForbidden  %+v", 403, o.Payload)
}

func (o *AddPermissionForbidden) String() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionForbidden  %+v", 403, o.Payload)
}

func (o *AddPermissionForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddPermissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPermissionUnprocessableEntity creates a AddPermissionUnprocessableEntity with default headers values
func NewAddPermissionUnprocessableEntity() *AddPermissionUnprocessableEntity {
	return &AddPermissionUnprocessableEntity{}
}

/*
AddPermissionUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type AddPermissionUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add permission unprocessable entity response has a 2xx status code
func (o *AddPermissionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add permission unprocessable entity response has a 3xx status code
func (o *AddPermissionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add permission unprocessable entity response has a 4xx status code
func (o *AddPermissionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this add permission unprocessable entity response has a 5xx status code
func (o *AddPermissionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this add permission unprocessable entity response a status code equal to that given
func (o *AddPermissionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the add permission unprocessable entity response
func (o *AddPermissionUnprocessableEntity) Code() int {
	return 422
}

func (o *AddPermissionUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddPermissionUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddPermissionUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddPermissionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddPermissionInternalServerError creates a AddPermissionInternalServerError with default headers values
func NewAddPermissionInternalServerError() *AddPermissionInternalServerError {
	return &AddPermissionInternalServerError{}
}

/*
AddPermissionInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type AddPermissionInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this add permission internal server error response has a 2xx status code
func (o *AddPermissionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add permission internal server error response has a 3xx status code
func (o *AddPermissionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add permission internal server error response has a 4xx status code
func (o *AddPermissionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add permission internal server error response has a 5xx status code
func (o *AddPermissionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add permission internal server error response a status code equal to that given
func (o *AddPermissionInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add permission internal server error response
func (o *AddPermissionInternalServerError) Code() int {
	return 500
}

func (o *AddPermissionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionInternalServerError  %+v", 500, o.Payload)
}

func (o *AddPermissionInternalServerError) String() string {
	return fmt.Sprintf("[POST /authz/roles/add-permission][%d] addPermissionInternalServerError  %+v", 500, o.Payload)
}

func (o *AddPermissionInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddPermissionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AddPermissionBody add permission body
swagger:model AddPermissionBody
*/
type AddPermissionBody struct {

	// name
	Name interface{} `json:"name,omitempty"`

	// permissions
	Permissions []*models.Permission `json:"permissions"`
}

// Validate validates this add permission body
func (o *AddPermissionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddPermissionBody) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(o.Permissions); i++ {
		if swag.IsZero(o.Permissions[i]) { // not required
			continue
		}

		if o.Permissions[i] != nil {
			if err := o.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this add permission body based on the context it is used
func (o *AddPermissionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddPermissionBody) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Permissions); i++ {

		if o.Permissions[i] != nil {
			if err := o.Permissions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddPermissionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddPermissionBody) UnmarshalBinary(b []byte) error {
	var res AddPermissionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
