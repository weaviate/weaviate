//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package batch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/weaviate/weaviate/entities/models"
)

// BatchObjectsPatchReader is a Reader for the BatchObjectsPatch structure.
type BatchObjectsPatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BatchObjectsPatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBatchObjectsPatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewBatchObjectsPatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewBatchObjectsPatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewBatchObjectsPatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewBatchObjectsPatchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewBatchObjectsPatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewBatchObjectsPatchOK creates a BatchObjectsPatchOK with default headers values
func NewBatchObjectsPatchOK() *BatchObjectsPatchOK {
	return &BatchObjectsPatchOK{}
}

/*
BatchObjectsPatchOK describes a response with status code 200, with default header values.

Request succeeded, see response body to get detailed information about each patched item.
*/
type BatchObjectsPatchOK struct {
	Payload []*models.ObjectsGetResponse
}

// IsSuccess returns true when this batch objects patch o k response has a 2xx status code
func (o *BatchObjectsPatchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this batch objects patch o k response has a 3xx status code
func (o *BatchObjectsPatchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects patch o k response has a 4xx status code
func (o *BatchObjectsPatchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this batch objects patch o k response has a 5xx status code
func (o *BatchObjectsPatchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects patch o k response a status code equal to that given
func (o *BatchObjectsPatchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the batch objects patch o k response
func (o *BatchObjectsPatchOK) Code() int {
	return 200
}

func (o *BatchObjectsPatchOK) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchOK  %+v", 200, o.Payload)
}

func (o *BatchObjectsPatchOK) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchOK  %+v", 200, o.Payload)
}

func (o *BatchObjectsPatchOK) GetPayload() []*models.ObjectsGetResponse {
	return o.Payload
}

func (o *BatchObjectsPatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsPatchBadRequest creates a BatchObjectsPatchBadRequest with default headers values
func NewBatchObjectsPatchBadRequest() *BatchObjectsPatchBadRequest {
	return &BatchObjectsPatchBadRequest{}
}

/*
BatchObjectsPatchBadRequest describes a response with status code 400, with default header values.

Malformed request.
*/
type BatchObjectsPatchBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects patch bad request response has a 2xx status code
func (o *BatchObjectsPatchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects patch bad request response has a 3xx status code
func (o *BatchObjectsPatchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects patch bad request response has a 4xx status code
func (o *BatchObjectsPatchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects patch bad request response has a 5xx status code
func (o *BatchObjectsPatchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects patch bad request response a status code equal to that given
func (o *BatchObjectsPatchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the batch objects patch bad request response
func (o *BatchObjectsPatchBadRequest) Code() int {
	return 400
}

func (o *BatchObjectsPatchBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchBadRequest  %+v", 400, o.Payload)
}

func (o *BatchObjectsPatchBadRequest) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchBadRequest  %+v", 400, o.Payload)
}

func (o *BatchObjectsPatchBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsPatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsPatchUnauthorized creates a BatchObjectsPatchUnauthorized with default headers values
func NewBatchObjectsPatchUnauthorized() *BatchObjectsPatchUnauthorized {
	return &BatchObjectsPatchUnauthorized{}
}

/*
BatchObjectsPatchUnauthorized describes a response with status code 401, with default header values.

Unauthorized or invalid credentials.
*/
type BatchObjectsPatchUnauthorized struct {
}

// IsSuccess returns true when this batch objects patch unauthorized response has a 2xx status code
func (o *BatchObjectsPatchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects patch unauthorized response has a 3xx status code
func (o *BatchObjectsPatchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects patch unauthorized response has a 4xx status code
func (o *BatchObjectsPatchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects patch unauthorized response has a 5xx status code
func (o *BatchObjectsPatchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects patch unauthorized response a status code equal to that given
func (o *BatchObjectsPatchUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the batch objects patch unauthorized response
func (o *BatchObjectsPatchUnauthorized) Code() int {
	return 401
}

func (o *BatchObjectsPatchUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchUnauthorized ", 401)
}

func (o *BatchObjectsPatchUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchUnauthorized ", 401)
}

func (o *BatchObjectsPatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBatchObjectsPatchForbidden creates a BatchObjectsPatchForbidden with default headers values
func NewBatchObjectsPatchForbidden() *BatchObjectsPatchForbidden {
	return &BatchObjectsPatchForbidden{}
}

/*
BatchObjectsPatchForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type BatchObjectsPatchForbidden struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects patch forbidden response has a 2xx status code
func (o *BatchObjectsPatchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects patch forbidden response has a 3xx status code
func (o *BatchObjectsPatchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects patch forbidden response has a 4xx status code
func (o *BatchObjectsPatchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects patch forbidden response has a 5xx status code
func (o *BatchObjectsPatchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects patch forbidden response a status code equal to that given
func (o *BatchObjectsPatchForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the batch objects patch forbidden response
func (o *BatchObjectsPatchForbidden) Code() int {
	return 403
}

func (o *BatchObjectsPatchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchForbidden  %+v", 403, o.Payload)
}

func (o *BatchObjectsPatchForbidden) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchForbidden  %+v", 403, o.Payload)
}

func (o *BatchObjectsPatchForbidden) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsPatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsPatchUnprocessableEntity creates a BatchObjectsPatchUnprocessableEntity with default headers values
func NewBatchObjectsPatchUnprocessableEntity() *BatchObjectsPatchUnprocessableEntity {
	return &BatchObjectsPatchUnprocessableEntity{}
}

/*
BatchObjectsPatchUnprocessableEntity describes a response with status code 422, with default header values.

Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?
*/
type BatchObjectsPatchUnprocessableEntity struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects patch unprocessable entity response has a 2xx status code
func (o *BatchObjectsPatchUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects patch unprocessable entity response has a 3xx status code
func (o *BatchObjectsPatchUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects patch unprocessable entity response has a 4xx status code
func (o *BatchObjectsPatchUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this batch objects patch unprocessable entity response has a 5xx status code
func (o *BatchObjectsPatchUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this batch objects patch unprocessable entity response a status code equal to that given
func (o *BatchObjectsPatchUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the batch objects patch unprocessable entity response
func (o *BatchObjectsPatchUnprocessableEntity) Code() int {
	return 422
}

func (o *BatchObjectsPatchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *BatchObjectsPatchUnprocessableEntity) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *BatchObjectsPatchUnprocessableEntity) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsPatchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBatchObjectsPatchInternalServerError creates a BatchObjectsPatchInternalServerError with default headers values
func NewBatchObjectsPatchInternalServerError() *BatchObjectsPatchInternalServerError {
	return &BatchObjectsPatchInternalServerError{}
}

/*
BatchObjectsPatchInternalServerError describes a response with status code 500, with default header values.

An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.
*/
type BatchObjectsPatchInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this batch objects patch internal server error response has a 2xx status code
func (o *BatchObjectsPatchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this batch objects patch internal server error response has a 3xx status code
func (o *BatchObjectsPatchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this batch objects patch internal server error response has a 4xx status code
func (o *BatchObjectsPatchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this batch objects patch internal server error response has a 5xx status code
func (o *BatchObjectsPatchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this batch objects patch internal server error response a status code equal to that given
func (o *BatchObjectsPatchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the batch objects patch internal server error response
func (o *BatchObjectsPatchInternalServerError) Code() int {
	return 500
}

func (o *BatchObjectsPatchInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchInternalServerError  %+v", 500, o.Payload)
}

func (o *BatchObjectsPatchInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /batch/objects][%d] batchObjectsPatchInternalServerError  %+v", 500, o.Payload)
}

func (o *BatchObjectsPatchInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *BatchObjectsPatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
BatchObjectsPatchBody batch objects patch body
swagger:model BatchObjectsPatchBody
*/
type BatchObjectsPatchBody struct {

	// objects
	Objects []*models.Object `json:"objects"`
}

// Validate validates this batch objects patch body
func (o *BatchObjectsPatchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateObjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BatchObjectsPatchBody) validateObjects(formats strfmt.Registry) error {
	if swag.IsZero(o.Objects) { // not required
		return nil
	}

	for i := 0; i < len(o.Objects); i++ {
		if swag.IsZero(o.Objects[i]) { // not required
			continue
		}

		if o.Objects[i] != nil {
			if err := o.Objects[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this batch objects patch body based on the context it is used
func (o *BatchObjectsPatchBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BatchObjectsPatchBody) contextValidateObjects(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Objects); i++ {

		if o.Objects[i] != nil {
			if err := o.Objects[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "objects" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *BatchObjectsPatchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BatchObjectsPatchBody) UnmarshalBinary(b []byte) error {
	var res BatchObjectsPatchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
