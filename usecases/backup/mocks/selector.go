//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Selector is an autogenerated mock type for the Selector type
type Selector struct {
	mock.Mock
}

// Backupable provides a mock function with given fields: _a0, classes
func (_m *Selector) Backupable(_a0 context.Context, classes []string) error {
	ret := _m.Called(_a0, classes)

	if len(ret) == 0 {
		panic("no return value specified for Backupable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(_a0, classes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListClasses provides a mock function with given fields: ctx
func (_m *Selector) ListClasses(ctx context.Context) []string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListClasses")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Shards provides a mock function with given fields: ctx, class
func (_m *Selector) Shards(ctx context.Context, class string) ([]string, error) {
	ret := _m.Called(ctx, class)

	if len(ret) == 0 {
		panic("no return value specified for Shards")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, class)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, class)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSelector creates a new instance of Selector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSelector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Selector {
	mock := &Selector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
