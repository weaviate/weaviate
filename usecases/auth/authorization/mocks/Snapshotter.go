//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"

	authorization "github.com/weaviate/weaviate/usecases/auth/authorization"
)

// Snapshotter is an autogenerated mock type for the Snapshotter type
type Snapshotter struct {
	mock.Mock
}

// Restore provides a mock function with given fields: r
func (_m *Snapshotter) Restore(r io.Reader) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Snapshot provides a mock function with no fields
func (_m *Snapshotter) Snapshot() (*authorization.Snapshot, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshot")
	}

	var r0 *authorization.Snapshot
	var r1 error
	if rf, ok := ret.Get(0).(func() (*authorization.Snapshot, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *authorization.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authorization.Snapshot)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSnapshotter creates a new instance of Snapshotter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapshotter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Snapshotter {
	mock := &Snapshotter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
