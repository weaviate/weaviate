//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package cluster

import mock "github.com/stretchr/testify/mock"

// MockNodeSelector is an autogenerated mock type for the NodeSelector type
type MockNodeSelector struct {
	mock.Mock
}

type MockNodeSelector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNodeSelector) EXPECT() *MockNodeSelector_Expecter {
	return &MockNodeSelector_Expecter{mock: &_m.Mock}
}

// AllHostnames provides a mock function with no fields
func (_m *MockNodeSelector) AllHostnames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllHostnames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNodeSelector_AllHostnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllHostnames'
type MockNodeSelector_AllHostnames_Call struct {
	*mock.Call
}

// AllHostnames is a helper method to define mock.On call
func (_e *MockNodeSelector_Expecter) AllHostnames() *MockNodeSelector_AllHostnames_Call {
	return &MockNodeSelector_AllHostnames_Call{Call: _e.mock.On("AllHostnames")}
}

func (_c *MockNodeSelector_AllHostnames_Call) Run(run func()) *MockNodeSelector_AllHostnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeSelector_AllHostnames_Call) Return(_a0 []string) *MockNodeSelector_AllHostnames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeSelector_AllHostnames_Call) RunAndReturn(run func() []string) *MockNodeSelector_AllHostnames_Call {
	_c.Call.Return(run)
	return _c
}

// LocalName provides a mock function with no fields
func (_m *MockNodeSelector) LocalName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNodeSelector_LocalName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalName'
type MockNodeSelector_LocalName_Call struct {
	*mock.Call
}

// LocalName is a helper method to define mock.On call
func (_e *MockNodeSelector_Expecter) LocalName() *MockNodeSelector_LocalName_Call {
	return &MockNodeSelector_LocalName_Call{Call: _e.mock.On("LocalName")}
}

func (_c *MockNodeSelector_LocalName_Call) Run(run func()) *MockNodeSelector_LocalName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeSelector_LocalName_Call) Return(_a0 string) *MockNodeSelector_LocalName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeSelector_LocalName_Call) RunAndReturn(run func() string) *MockNodeSelector_LocalName_Call {
	_c.Call.Return(run)
	return _c
}

// NodeAddress provides a mock function with given fields: id
func (_m *MockNodeSelector) NodeAddress(id string) string {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for NodeAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNodeSelector_NodeAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeAddress'
type MockNodeSelector_NodeAddress_Call struct {
	*mock.Call
}

// NodeAddress is a helper method to define mock.On call
//   - id string
func (_e *MockNodeSelector_Expecter) NodeAddress(id interface{}) *MockNodeSelector_NodeAddress_Call {
	return &MockNodeSelector_NodeAddress_Call{Call: _e.mock.On("NodeAddress", id)}
}

func (_c *MockNodeSelector_NodeAddress_Call) Run(run func(id string)) *MockNodeSelector_NodeAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNodeSelector_NodeAddress_Call) Return(_a0 string) *MockNodeSelector_NodeAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeSelector_NodeAddress_Call) RunAndReturn(run func(string) string) *MockNodeSelector_NodeAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NodeHostname provides a mock function with given fields: name
func (_m *MockNodeSelector) NodeHostname(name string) (string, bool) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for NodeHostname")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockNodeSelector_NodeHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeHostname'
type MockNodeSelector_NodeHostname_Call struct {
	*mock.Call
}

// NodeHostname is a helper method to define mock.On call
//   - name string
func (_e *MockNodeSelector_Expecter) NodeHostname(name interface{}) *MockNodeSelector_NodeHostname_Call {
	return &MockNodeSelector_NodeHostname_Call{Call: _e.mock.On("NodeHostname", name)}
}

func (_c *MockNodeSelector_NodeHostname_Call) Run(run func(name string)) *MockNodeSelector_NodeHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNodeSelector_NodeHostname_Call) Return(_a0 string, _a1 bool) *MockNodeSelector_NodeHostname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNodeSelector_NodeHostname_Call) RunAndReturn(run func(string) (string, bool)) *MockNodeSelector_NodeHostname_Call {
	_c.Call.Return(run)
	return _c
}

// NonStorageNodes provides a mock function with no fields
func (_m *MockNodeSelector) NonStorageNodes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NonStorageNodes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNodeSelector_NonStorageNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NonStorageNodes'
type MockNodeSelector_NonStorageNodes_Call struct {
	*mock.Call
}

// NonStorageNodes is a helper method to define mock.On call
func (_e *MockNodeSelector_Expecter) NonStorageNodes() *MockNodeSelector_NonStorageNodes_Call {
	return &MockNodeSelector_NonStorageNodes_Call{Call: _e.mock.On("NonStorageNodes")}
}

func (_c *MockNodeSelector_NonStorageNodes_Call) Run(run func()) *MockNodeSelector_NonStorageNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeSelector_NonStorageNodes_Call) Return(_a0 []string) *MockNodeSelector_NonStorageNodes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeSelector_NonStorageNodes_Call) RunAndReturn(run func() []string) *MockNodeSelector_NonStorageNodes_Call {
	_c.Call.Return(run)
	return _c
}

// SortCandidates provides a mock function with given fields: nodes
func (_m *MockNodeSelector) SortCandidates(nodes []string) []string {
	ret := _m.Called(nodes)

	if len(ret) == 0 {
		panic("no return value specified for SortCandidates")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNodeSelector_SortCandidates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SortCandidates'
type MockNodeSelector_SortCandidates_Call struct {
	*mock.Call
}

// SortCandidates is a helper method to define mock.On call
//   - nodes []string
func (_e *MockNodeSelector_Expecter) SortCandidates(nodes interface{}) *MockNodeSelector_SortCandidates_Call {
	return &MockNodeSelector_SortCandidates_Call{Call: _e.mock.On("SortCandidates", nodes)}
}

func (_c *MockNodeSelector_SortCandidates_Call) Run(run func(nodes []string)) *MockNodeSelector_SortCandidates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockNodeSelector_SortCandidates_Call) Return(_a0 []string) *MockNodeSelector_SortCandidates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeSelector_SortCandidates_Call) RunAndReturn(run func([]string) []string) *MockNodeSelector_SortCandidates_Call {
	_c.Call.Return(run)
	return _c
}

// StorageCandidates provides a mock function with no fields
func (_m *MockNodeSelector) StorageCandidates() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StorageCandidates")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockNodeSelector_StorageCandidates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageCandidates'
type MockNodeSelector_StorageCandidates_Call struct {
	*mock.Call
}

// StorageCandidates is a helper method to define mock.On call
func (_e *MockNodeSelector_Expecter) StorageCandidates() *MockNodeSelector_StorageCandidates_Call {
	return &MockNodeSelector_StorageCandidates_Call{Call: _e.mock.On("StorageCandidates")}
}

func (_c *MockNodeSelector_StorageCandidates_Call) Run(run func()) *MockNodeSelector_StorageCandidates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNodeSelector_StorageCandidates_Call) Return(_a0 []string) *MockNodeSelector_StorageCandidates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNodeSelector_StorageCandidates_Call) RunAndReturn(run func() []string) *MockNodeSelector_StorageCandidates_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNodeSelector creates a new instance of MockNodeSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNodeSelector(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockNodeSelector {
	mock := &MockNodeSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
