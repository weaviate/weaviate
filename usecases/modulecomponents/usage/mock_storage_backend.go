//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package usage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "github.com/weaviate/weaviate/cluster/usage/types"
)

// MockStorageBackend is an autogenerated mock type for the StorageBackend type
type MockStorageBackend struct {
	mock.Mock
}

type MockStorageBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageBackend) EXPECT() *MockStorageBackend_Expecter {
	return &MockStorageBackend_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockStorageBackend) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageBackend_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStorageBackend_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStorageBackend_Expecter) Close() *MockStorageBackend_Close_Call {
	return &MockStorageBackend_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStorageBackend_Close_Call) Run(run func()) *MockStorageBackend_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageBackend_Close_Call) Return(_a0 error) *MockStorageBackend_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageBackend_Close_Call) RunAndReturn(run func() error) *MockStorageBackend_Close_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfig provides a mock function with given fields: config
func (_m *MockStorageBackend) UpdateConfig(config StorageConfig) (bool, error) {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfig")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(StorageConfig) (bool, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(StorageConfig) bool); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(StorageConfig) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorageBackend_UpdateConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfig'
type MockStorageBackend_UpdateConfig_Call struct {
	*mock.Call
}

// UpdateConfig is a helper method to define mock.On call
//   - config StorageConfig
func (_e *MockStorageBackend_Expecter) UpdateConfig(config interface{}) *MockStorageBackend_UpdateConfig_Call {
	return &MockStorageBackend_UpdateConfig_Call{Call: _e.mock.On("UpdateConfig", config)}
}

func (_c *MockStorageBackend_UpdateConfig_Call) Run(run func(config StorageConfig)) *MockStorageBackend_UpdateConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(StorageConfig))
	})
	return _c
}

func (_c *MockStorageBackend_UpdateConfig_Call) Return(_a0 bool, _a1 error) *MockStorageBackend_UpdateConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorageBackend_UpdateConfig_Call) RunAndReturn(run func(StorageConfig) (bool, error)) *MockStorageBackend_UpdateConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UploadUsageData provides a mock function with given fields: ctx, _a1
func (_m *MockStorageBackend) UploadUsageData(ctx context.Context, _a1 *types.Report) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UploadUsageData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Report) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageBackend_UploadUsageData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadUsageData'
type MockStorageBackend_UploadUsageData_Call struct {
	*mock.Call
}

// UploadUsageData is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 *types.Report
func (_e *MockStorageBackend_Expecter) UploadUsageData(ctx interface{}, _a1 interface{}) *MockStorageBackend_UploadUsageData_Call {
	return &MockStorageBackend_UploadUsageData_Call{Call: _e.mock.On("UploadUsageData", ctx, _a1)}
}

func (_c *MockStorageBackend_UploadUsageData_Call) Run(run func(ctx context.Context, _a1 *types.Report)) *MockStorageBackend_UploadUsageData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.Report))
	})
	return _c
}

func (_c *MockStorageBackend_UploadUsageData_Call) Return(_a0 error) *MockStorageBackend_UploadUsageData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageBackend_UploadUsageData_Call) RunAndReturn(run func(context.Context, *types.Report) error) *MockStorageBackend_UploadUsageData_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPermissions provides a mock function with given fields: ctx
func (_m *MockStorageBackend) VerifyPermissions(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorageBackend_VerifyPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPermissions'
type MockStorageBackend_VerifyPermissions_Call struct {
	*mock.Call
}

// VerifyPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageBackend_Expecter) VerifyPermissions(ctx interface{}) *MockStorageBackend_VerifyPermissions_Call {
	return &MockStorageBackend_VerifyPermissions_Call{Call: _e.mock.On("VerifyPermissions", ctx)}
}

func (_c *MockStorageBackend_VerifyPermissions_Call) Run(run func(ctx context.Context)) *MockStorageBackend_VerifyPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockStorageBackend_VerifyPermissions_Call) Return(_a0 error) *MockStorageBackend_VerifyPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorageBackend_VerifyPermissions_Call) RunAndReturn(run func(context.Context) error) *MockStorageBackend_VerifyPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorageBackend creates a new instance of MockStorageBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageBackend {
	mock := &MockStorageBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
