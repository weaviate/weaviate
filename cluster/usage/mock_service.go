//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package usage

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"

	types "github.com/weaviate/weaviate/cluster/usage/types"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// SetJitterInterval provides a mock function with given fields: interval
func (_m *MockService) SetJitterInterval(interval time.Duration) {
	_m.Called(interval)
}

// MockService_SetJitterInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJitterInterval'
type MockService_SetJitterInterval_Call struct {
	*mock.Call
}

// SetJitterInterval is a helper method to define mock.On call
//   - interval time.Duration
func (_e *MockService_Expecter) SetJitterInterval(interval interface{}) *MockService_SetJitterInterval_Call {
	return &MockService_SetJitterInterval_Call{Call: _e.mock.On("SetJitterInterval", interval)}
}

func (_c *MockService_SetJitterInterval_Call) Run(run func(interval time.Duration)) *MockService_SetJitterInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockService_SetJitterInterval_Call) Return() *MockService_SetJitterInterval_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockService_SetJitterInterval_Call) RunAndReturn(run func(time.Duration)) *MockService_SetJitterInterval_Call {
	_c.Run(run)
	return _c
}

// Usage provides a mock function with given fields: ctx
func (_m *MockService) Usage(ctx context.Context) (*types.Report, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Usage")
	}

	var r0 *types.Report
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Report, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Report); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Report)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Usage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Usage'
type MockService_Usage_Call struct {
	*mock.Call
}

// Usage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) Usage(ctx interface{}) *MockService_Usage_Call {
	return &MockService_Usage_Call{Call: _e.mock.On("Usage", ctx)}
}

func (_c *MockService_Usage_Call) Run(run func(ctx context.Context)) *MockService_Usage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockService_Usage_Call) Return(_a0 *types.Report, _a1 error) *MockService_Usage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Usage_Call) RunAndReturn(run func(context.Context) (*types.Report, error)) *MockService_Usage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
