//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import mock "github.com/stretchr/testify/mock"

// MockRouter is an autogenerated mock type for the Router type
type MockRouter struct {
	mock.Mock
}

type MockRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRouter) EXPECT() *MockRouter_Expecter {
	return &MockRouter_Expecter{mock: &_m.Mock}
}

// AllHostnames provides a mock function with no fields
func (_m *MockRouter) AllHostnames() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllHostnames")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockRouter_AllHostnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllHostnames'
type MockRouter_AllHostnames_Call struct {
	*mock.Call
}

// AllHostnames is a helper method to define mock.On call
func (_e *MockRouter_Expecter) AllHostnames() *MockRouter_AllHostnames_Call {
	return &MockRouter_AllHostnames_Call{Call: _e.mock.On("AllHostnames")}
}

func (_c *MockRouter_AllHostnames_Call) Run(run func()) *MockRouter_AllHostnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRouter_AllHostnames_Call) Return(_a0 []string) *MockRouter_AllHostnames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRouter_AllHostnames_Call) RunAndReturn(run func() []string) *MockRouter_AllHostnames_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadReplicasLocation provides a mock function with given fields: collection, shard
func (_m *MockRouter) GetReadReplicasLocation(collection string, shard string) (ReadReplicaSet, error) {
	ret := _m.Called(collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for GetReadReplicasLocation")
	}

	var r0 ReadReplicaSet
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (ReadReplicaSet, error)); ok {
		return rf(collection, shard)
	}
	if rf, ok := ret.Get(0).(func(string, string) ReadReplicaSet); ok {
		r0 = rf(collection, shard)
	} else {
		r0 = ret.Get(0).(ReadReplicaSet)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(collection, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRouter_GetReadReplicasLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadReplicasLocation'
type MockRouter_GetReadReplicasLocation_Call struct {
	*mock.Call
}

// GetReadReplicasLocation is a helper method to define mock.On call
//   - collection string
//   - shard string
func (_e *MockRouter_Expecter) GetReadReplicasLocation(collection interface{}, shard interface{}) *MockRouter_GetReadReplicasLocation_Call {
	return &MockRouter_GetReadReplicasLocation_Call{Call: _e.mock.On("GetReadReplicasLocation", collection, shard)}
}

func (_c *MockRouter_GetReadReplicasLocation_Call) Run(run func(collection string, shard string)) *MockRouter_GetReadReplicasLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRouter_GetReadReplicasLocation_Call) Return(_a0 ReadReplicaSet, _a1 error) *MockRouter_GetReadReplicasLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRouter_GetReadReplicasLocation_Call) RunAndReturn(run func(string, string) (ReadReplicaSet, error)) *MockRouter_GetReadReplicasLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadWriteReplicasLocation provides a mock function with given fields: collection, shard
func (_m *MockRouter) GetReadWriteReplicasLocation(collection string, shard string) (ReadReplicaSet, WriteReplicaSet, error) {
	ret := _m.Called(collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for GetReadWriteReplicasLocation")
	}

	var r0 ReadReplicaSet
	var r1 WriteReplicaSet
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (ReadReplicaSet, WriteReplicaSet, error)); ok {
		return rf(collection, shard)
	}
	if rf, ok := ret.Get(0).(func(string, string) ReadReplicaSet); ok {
		r0 = rf(collection, shard)
	} else {
		r0 = ret.Get(0).(ReadReplicaSet)
	}

	if rf, ok := ret.Get(1).(func(string, string) WriteReplicaSet); ok {
		r1 = rf(collection, shard)
	} else {
		r1 = ret.Get(1).(WriteReplicaSet)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(collection, shard)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRouter_GetReadWriteReplicasLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadWriteReplicasLocation'
type MockRouter_GetReadWriteReplicasLocation_Call struct {
	*mock.Call
}

// GetReadWriteReplicasLocation is a helper method to define mock.On call
//   - collection string
//   - shard string
func (_e *MockRouter_Expecter) GetReadWriteReplicasLocation(collection interface{}, shard interface{}) *MockRouter_GetReadWriteReplicasLocation_Call {
	return &MockRouter_GetReadWriteReplicasLocation_Call{Call: _e.mock.On("GetReadWriteReplicasLocation", collection, shard)}
}

func (_c *MockRouter_GetReadWriteReplicasLocation_Call) Run(run func(collection string, shard string)) *MockRouter_GetReadWriteReplicasLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRouter_GetReadWriteReplicasLocation_Call) Return(readReplicas ReadReplicaSet, writeReplicas WriteReplicaSet, err error) *MockRouter_GetReadWriteReplicasLocation_Call {
	_c.Call.Return(readReplicas, writeReplicas, err)
	return _c
}

func (_c *MockRouter_GetReadWriteReplicasLocation_Call) RunAndReturn(run func(string, string) (ReadReplicaSet, WriteReplicaSet, error)) *MockRouter_GetReadWriteReplicasLocation_Call {
	_c.Call.Return(run)
	return _c
}

// GetWriteReplicasLocation provides a mock function with given fields: collection, shard
func (_m *MockRouter) GetWriteReplicasLocation(collection string, shard string) (WriteReplicaSet, error) {
	ret := _m.Called(collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for GetWriteReplicasLocation")
	}

	var r0 WriteReplicaSet
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (WriteReplicaSet, error)); ok {
		return rf(collection, shard)
	}
	if rf, ok := ret.Get(0).(func(string, string) WriteReplicaSet); ok {
		r0 = rf(collection, shard)
	} else {
		r0 = ret.Get(0).(WriteReplicaSet)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(collection, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRouter_GetWriteReplicasLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWriteReplicasLocation'
type MockRouter_GetWriteReplicasLocation_Call struct {
	*mock.Call
}

// GetWriteReplicasLocation is a helper method to define mock.On call
//   - collection string
//   - shard string
func (_e *MockRouter_Expecter) GetWriteReplicasLocation(collection interface{}, shard interface{}) *MockRouter_GetWriteReplicasLocation_Call {
	return &MockRouter_GetWriteReplicasLocation_Call{Call: _e.mock.On("GetWriteReplicasLocation", collection, shard)}
}

func (_c *MockRouter_GetWriteReplicasLocation_Call) Run(run func(collection string, shard string)) *MockRouter_GetWriteReplicasLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRouter_GetWriteReplicasLocation_Call) Return(_a0 WriteReplicaSet, _a1 error) *MockRouter_GetWriteReplicasLocation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRouter_GetWriteReplicasLocation_Call) RunAndReturn(run func(string, string) (WriteReplicaSet, error)) *MockRouter_GetWriteReplicasLocation_Call {
	_c.Call.Return(run)
	return _c
}

// NodeHostname provides a mock function with given fields: nodeName
func (_m *MockRouter) NodeHostname(nodeName string) (string, bool) {
	ret := _m.Called(nodeName)

	if len(ret) == 0 {
		panic("no return value specified for NodeHostname")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(nodeName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(nodeName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(nodeName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockRouter_NodeHostname_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeHostname'
type MockRouter_NodeHostname_Call struct {
	*mock.Call
}

// NodeHostname is a helper method to define mock.On call
//   - nodeName string
func (_e *MockRouter_Expecter) NodeHostname(nodeName interface{}) *MockRouter_NodeHostname_Call {
	return &MockRouter_NodeHostname_Call{Call: _e.mock.On("NodeHostname", nodeName)}
}

func (_c *MockRouter_NodeHostname_Call) Run(run func(nodeName string)) *MockRouter_NodeHostname_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRouter_NodeHostname_Call) Return(_a0 string, _a1 bool) *MockRouter_NodeHostname_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRouter_NodeHostname_Call) RunAndReturn(run func(string) (string, bool)) *MockRouter_NodeHostname_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRouter creates a new instance of MockRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRouter {
	mock := &MockRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
