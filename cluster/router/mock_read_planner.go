//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package router

import (
	mock "github.com/stretchr/testify/mock"
	types "github.com/weaviate/weaviate/cluster/router/types"
)

// MockReadPlanner is an autogenerated mock type for the ReadPlanner type
type MockReadPlanner struct {
	mock.Mock
}

type MockReadPlanner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReadPlanner) EXPECT() *MockReadPlanner_Expecter {
	return &MockReadPlanner_Expecter{mock: &_m.Mock}
}

// Plan provides a mock function with given fields: params
func (_m *MockReadPlanner) Plan(params types.RoutingPlanBuildOptions) (types.ReadRoutingPlan, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Plan")
	}

	var r0 types.ReadRoutingPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(types.RoutingPlanBuildOptions) (types.ReadRoutingPlan, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(types.RoutingPlanBuildOptions) types.ReadRoutingPlan); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(types.ReadRoutingPlan)
	}

	if rf, ok := ret.Get(1).(func(types.RoutingPlanBuildOptions) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReadPlanner_Plan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Plan'
type MockReadPlanner_Plan_Call struct {
	*mock.Call
}

// Plan is a helper method to define mock.On call
//   - params types.RoutingPlanBuildOptions
func (_e *MockReadPlanner_Expecter) Plan(params interface{}) *MockReadPlanner_Plan_Call {
	return &MockReadPlanner_Plan_Call{Call: _e.mock.On("Plan", params)}
}

func (_c *MockReadPlanner_Plan_Call) Run(run func(params types.RoutingPlanBuildOptions)) *MockReadPlanner_Plan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.RoutingPlanBuildOptions))
	})
	return _c
}

func (_c *MockReadPlanner_Plan_Call) Return(_a0 types.ReadRoutingPlan, _a1 error) *MockReadPlanner_Plan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReadPlanner_Plan_Call) RunAndReturn(run func(types.RoutingPlanBuildOptions) (types.ReadRoutingPlan, error)) *MockReadPlanner_Plan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReadPlanner creates a new instance of MockReadPlanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReadPlanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReadPlanner {
	mock := &MockReadPlanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
