//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	mock "github.com/stretchr/testify/mock"

	models "github.com/weaviate/weaviate/entities/models"
)

// MockReplicaCopier is an autogenerated mock type for the ReplicaCopier type
type MockReplicaCopier struct {
	mock.Mock
}

type MockReplicaCopier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReplicaCopier) EXPECT() *MockReplicaCopier_Expecter {
	return &MockReplicaCopier_Expecter{mock: &_m.Mock}
}

// AddAsyncReplicationTargetNode provides a mock function with given fields: ctx, targetNodeOverride, schemaVersion
func (_m *MockReplicaCopier) AddAsyncReplicationTargetNode(ctx context.Context, targetNodeOverride additional.AsyncReplicationTargetNodeOverride, schemaVersion uint64) error {
	ret := _m.Called(ctx, targetNodeOverride, schemaVersion)

	if len(ret) == 0 {
		panic("no return value specified for AddAsyncReplicationTargetNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, additional.AsyncReplicationTargetNodeOverride, uint64) error); ok {
		r0 = rf(ctx, targetNodeOverride, schemaVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaCopier_AddAsyncReplicationTargetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAsyncReplicationTargetNode'
type MockReplicaCopier_AddAsyncReplicationTargetNode_Call struct {
	*mock.Call
}

// AddAsyncReplicationTargetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - targetNodeOverride additional.AsyncReplicationTargetNodeOverride
//   - schemaVersion uint64
func (_e *MockReplicaCopier_Expecter) AddAsyncReplicationTargetNode(ctx interface{}, targetNodeOverride interface{}, schemaVersion interface{}) *MockReplicaCopier_AddAsyncReplicationTargetNode_Call {
	return &MockReplicaCopier_AddAsyncReplicationTargetNode_Call{Call: _e.mock.On("AddAsyncReplicationTargetNode", ctx, targetNodeOverride, schemaVersion)}
}

func (_c *MockReplicaCopier_AddAsyncReplicationTargetNode_Call) Run(run func(ctx context.Context, targetNodeOverride additional.AsyncReplicationTargetNodeOverride, schemaVersion uint64)) *MockReplicaCopier_AddAsyncReplicationTargetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(additional.AsyncReplicationTargetNodeOverride), args[2].(uint64))
	})
	return _c
}

func (_c *MockReplicaCopier_AddAsyncReplicationTargetNode_Call) Return(_a0 error) *MockReplicaCopier_AddAsyncReplicationTargetNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaCopier_AddAsyncReplicationTargetNode_Call) RunAndReturn(run func(context.Context, additional.AsyncReplicationTargetNodeOverride, uint64) error) *MockReplicaCopier_AddAsyncReplicationTargetNode_Call {
	_c.Call.Return(run)
	return _c
}

// AsyncReplicationStatus provides a mock function with given fields: ctx, srcNodeId, targetNodeId, collectionName, shardName
func (_m *MockReplicaCopier) AsyncReplicationStatus(ctx context.Context, srcNodeId string, targetNodeId string, collectionName string, shardName string) (models.AsyncReplicationStatus, error) {
	ret := _m.Called(ctx, srcNodeId, targetNodeId, collectionName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for AsyncReplicationStatus")
	}

	var r0 models.AsyncReplicationStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) (models.AsyncReplicationStatus, error)); ok {
		return rf(ctx, srcNodeId, targetNodeId, collectionName, shardName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) models.AsyncReplicationStatus); ok {
		r0 = rf(ctx, srcNodeId, targetNodeId, collectionName, shardName)
	} else {
		r0 = ret.Get(0).(models.AsyncReplicationStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, srcNodeId, targetNodeId, collectionName, shardName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReplicaCopier_AsyncReplicationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncReplicationStatus'
type MockReplicaCopier_AsyncReplicationStatus_Call struct {
	*mock.Call
}

// AsyncReplicationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - srcNodeId string
//   - targetNodeId string
//   - collectionName string
//   - shardName string
func (_e *MockReplicaCopier_Expecter) AsyncReplicationStatus(ctx interface{}, srcNodeId interface{}, targetNodeId interface{}, collectionName interface{}, shardName interface{}) *MockReplicaCopier_AsyncReplicationStatus_Call {
	return &MockReplicaCopier_AsyncReplicationStatus_Call{Call: _e.mock.On("AsyncReplicationStatus", ctx, srcNodeId, targetNodeId, collectionName, shardName)}
}

func (_c *MockReplicaCopier_AsyncReplicationStatus_Call) Run(run func(ctx context.Context, srcNodeId string, targetNodeId string, collectionName string, shardName string)) *MockReplicaCopier_AsyncReplicationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockReplicaCopier_AsyncReplicationStatus_Call) Return(_a0 models.AsyncReplicationStatus, _a1 error) *MockReplicaCopier_AsyncReplicationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReplicaCopier_AsyncReplicationStatus_Call) RunAndReturn(run func(context.Context, string, string, string, string) (models.AsyncReplicationStatus, error)) *MockReplicaCopier_AsyncReplicationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CopyReplicaFiles provides a mock function with given fields: ctx, sourceNode, sourceCollection, sourceShard, schemaVersion
func (_m *MockReplicaCopier) CopyReplicaFiles(ctx context.Context, sourceNode string, sourceCollection string, sourceShard string, schemaVersion uint64) error {
	ret := _m.Called(ctx, sourceNode, sourceCollection, sourceShard, schemaVersion)

	if len(ret) == 0 {
		panic("no return value specified for CopyReplicaFiles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, uint64) error); ok {
		r0 = rf(ctx, sourceNode, sourceCollection, sourceShard, schemaVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaCopier_CopyReplicaFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyReplicaFiles'
type MockReplicaCopier_CopyReplicaFiles_Call struct {
	*mock.Call
}

// CopyReplicaFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceNode string
//   - sourceCollection string
//   - sourceShard string
//   - schemaVersion uint64
func (_e *MockReplicaCopier_Expecter) CopyReplicaFiles(ctx interface{}, sourceNode interface{}, sourceCollection interface{}, sourceShard interface{}, schemaVersion interface{}) *MockReplicaCopier_CopyReplicaFiles_Call {
	return &MockReplicaCopier_CopyReplicaFiles_Call{Call: _e.mock.On("CopyReplicaFiles", ctx, sourceNode, sourceCollection, sourceShard, schemaVersion)}
}

func (_c *MockReplicaCopier_CopyReplicaFiles_Call) Run(run func(ctx context.Context, sourceNode string, sourceCollection string, sourceShard string, schemaVersion uint64)) *MockReplicaCopier_CopyReplicaFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(uint64))
	})
	return _c
}

func (_c *MockReplicaCopier_CopyReplicaFiles_Call) Return(_a0 error) *MockReplicaCopier_CopyReplicaFiles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaCopier_CopyReplicaFiles_Call) RunAndReturn(run func(context.Context, string, string, string, uint64) error) *MockReplicaCopier_CopyReplicaFiles_Call {
	_c.Call.Return(run)
	return _c
}

// InitAsyncReplicationLocally provides a mock function with given fields: ctx, collectionName, shardName
func (_m *MockReplicaCopier) InitAsyncReplicationLocally(ctx context.Context, collectionName string, shardName string) error {
	ret := _m.Called(ctx, collectionName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for InitAsyncReplicationLocally")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, collectionName, shardName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaCopier_InitAsyncReplicationLocally_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitAsyncReplicationLocally'
type MockReplicaCopier_InitAsyncReplicationLocally_Call struct {
	*mock.Call
}

// InitAsyncReplicationLocally is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - shardName string
func (_e *MockReplicaCopier_Expecter) InitAsyncReplicationLocally(ctx interface{}, collectionName interface{}, shardName interface{}) *MockReplicaCopier_InitAsyncReplicationLocally_Call {
	return &MockReplicaCopier_InitAsyncReplicationLocally_Call{Call: _e.mock.On("InitAsyncReplicationLocally", ctx, collectionName, shardName)}
}

func (_c *MockReplicaCopier_InitAsyncReplicationLocally_Call) Run(run func(ctx context.Context, collectionName string, shardName string)) *MockReplicaCopier_InitAsyncReplicationLocally_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockReplicaCopier_InitAsyncReplicationLocally_Call) Return(_a0 error) *MockReplicaCopier_InitAsyncReplicationLocally_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaCopier_InitAsyncReplicationLocally_Call) RunAndReturn(run func(context.Context, string, string) error) *MockReplicaCopier_InitAsyncReplicationLocally_Call {
	_c.Call.Return(run)
	return _c
}

// LoadLocalShard provides a mock function with given fields: ctx, collectionName, shardName
func (_m *MockReplicaCopier) LoadLocalShard(ctx context.Context, collectionName string, shardName string) error {
	ret := _m.Called(ctx, collectionName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for LoadLocalShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, collectionName, shardName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaCopier_LoadLocalShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadLocalShard'
type MockReplicaCopier_LoadLocalShard_Call struct {
	*mock.Call
}

// LoadLocalShard is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - shardName string
func (_e *MockReplicaCopier_Expecter) LoadLocalShard(ctx interface{}, collectionName interface{}, shardName interface{}) *MockReplicaCopier_LoadLocalShard_Call {
	return &MockReplicaCopier_LoadLocalShard_Call{Call: _e.mock.On("LoadLocalShard", ctx, collectionName, shardName)}
}

func (_c *MockReplicaCopier_LoadLocalShard_Call) Run(run func(ctx context.Context, collectionName string, shardName string)) *MockReplicaCopier_LoadLocalShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockReplicaCopier_LoadLocalShard_Call) Return(_a0 error) *MockReplicaCopier_LoadLocalShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaCopier_LoadLocalShard_Call) RunAndReturn(run func(context.Context, string, string) error) *MockReplicaCopier_LoadLocalShard_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAsyncReplicationTargetNode provides a mock function with given fields: ctx, targetNodeOverride
func (_m *MockReplicaCopier) RemoveAsyncReplicationTargetNode(ctx context.Context, targetNodeOverride additional.AsyncReplicationTargetNodeOverride) error {
	ret := _m.Called(ctx, targetNodeOverride)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAsyncReplicationTargetNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, additional.AsyncReplicationTargetNodeOverride) error); ok {
		r0 = rf(ctx, targetNodeOverride)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAsyncReplicationTargetNode'
type MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call struct {
	*mock.Call
}

// RemoveAsyncReplicationTargetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - targetNodeOverride additional.AsyncReplicationTargetNodeOverride
func (_e *MockReplicaCopier_Expecter) RemoveAsyncReplicationTargetNode(ctx interface{}, targetNodeOverride interface{}) *MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call {
	return &MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call{Call: _e.mock.On("RemoveAsyncReplicationTargetNode", ctx, targetNodeOverride)}
}

func (_c *MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call) Run(run func(ctx context.Context, targetNodeOverride additional.AsyncReplicationTargetNodeOverride)) *MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(additional.AsyncReplicationTargetNodeOverride))
	})
	return _c
}

func (_c *MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call) Return(_a0 error) *MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call) RunAndReturn(run func(context.Context, additional.AsyncReplicationTargetNodeOverride) error) *MockReplicaCopier_RemoveAsyncReplicationTargetNode_Call {
	_c.Call.Return(run)
	return _c
}

// RevertAsyncReplicationLocally provides a mock function with given fields: ctx, collectionName, shardName
func (_m *MockReplicaCopier) RevertAsyncReplicationLocally(ctx context.Context, collectionName string, shardName string) error {
	ret := _m.Called(ctx, collectionName, shardName)

	if len(ret) == 0 {
		panic("no return value specified for RevertAsyncReplicationLocally")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, collectionName, shardName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReplicaCopier_RevertAsyncReplicationLocally_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevertAsyncReplicationLocally'
type MockReplicaCopier_RevertAsyncReplicationLocally_Call struct {
	*mock.Call
}

// RevertAsyncReplicationLocally is a helper method to define mock.On call
//   - ctx context.Context
//   - collectionName string
//   - shardName string
func (_e *MockReplicaCopier_Expecter) RevertAsyncReplicationLocally(ctx interface{}, collectionName interface{}, shardName interface{}) *MockReplicaCopier_RevertAsyncReplicationLocally_Call {
	return &MockReplicaCopier_RevertAsyncReplicationLocally_Call{Call: _e.mock.On("RevertAsyncReplicationLocally", ctx, collectionName, shardName)}
}

func (_c *MockReplicaCopier_RevertAsyncReplicationLocally_Call) Run(run func(ctx context.Context, collectionName string, shardName string)) *MockReplicaCopier_RevertAsyncReplicationLocally_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockReplicaCopier_RevertAsyncReplicationLocally_Call) Return(_a0 error) *MockReplicaCopier_RevertAsyncReplicationLocally_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReplicaCopier_RevertAsyncReplicationLocally_Call) RunAndReturn(run func(context.Context, string, string) error) *MockReplicaCopier_RevertAsyncReplicationLocally_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReplicaCopier creates a new instance of MockReplicaCopier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReplicaCopier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReplicaCopier {
	mock := &MockReplicaCopier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
