//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import (
	context "context"

	api "github.com/weaviate/weaviate/cluster/proto/api"

	mock "github.com/stretchr/testify/mock"
)

// MockFSMUpdater is an autogenerated mock type for the FSMUpdater type
type MockFSMUpdater struct {
	mock.Mock
}

type MockFSMUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFSMUpdater) EXPECT() *MockFSMUpdater_Expecter {
	return &MockFSMUpdater_Expecter{mock: &_m.Mock}
}

// AddReplicaToShard provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFSMUpdater) AddReplicaToShard(_a0 context.Context, _a1 string, _a2 string, _a3 string) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for AddReplicaToShard")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (uint64, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) uint64); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFSMUpdater_AddReplicaToShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReplicaToShard'
type MockFSMUpdater_AddReplicaToShard_Call struct {
	*mock.Call
}

// AddReplicaToShard is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 string
func (_e *MockFSMUpdater_Expecter) AddReplicaToShard(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockFSMUpdater_AddReplicaToShard_Call {
	return &MockFSMUpdater_AddReplicaToShard_Call{Call: _e.mock.On("AddReplicaToShard", _a0, _a1, _a2, _a3)}
}

func (_c *MockFSMUpdater_AddReplicaToShard_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 string)) *MockFSMUpdater_AddReplicaToShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockFSMUpdater_AddReplicaToShard_Call) Return(_a0 uint64, _a1 error) *MockFSMUpdater_AddReplicaToShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFSMUpdater_AddReplicaToShard_Call) RunAndReturn(run func(context.Context, string, string, string) (uint64, error)) *MockFSMUpdater_AddReplicaToShard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReplicaFromShard provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockFSMUpdater) DeleteReplicaFromShard(_a0 context.Context, _a1 string, _a2 string, _a3 string) (uint64, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicaFromShard")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (uint64, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) uint64); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFSMUpdater_DeleteReplicaFromShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplicaFromShard'
type MockFSMUpdater_DeleteReplicaFromShard_Call struct {
	*mock.Call
}

// DeleteReplicaFromShard is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 string
func (_e *MockFSMUpdater_Expecter) DeleteReplicaFromShard(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *MockFSMUpdater_DeleteReplicaFromShard_Call {
	return &MockFSMUpdater_DeleteReplicaFromShard_Call{Call: _e.mock.On("DeleteReplicaFromShard", _a0, _a1, _a2, _a3)}
}

func (_c *MockFSMUpdater_DeleteReplicaFromShard_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 string)) *MockFSMUpdater_DeleteReplicaFromShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockFSMUpdater_DeleteReplicaFromShard_Call) Return(_a0 uint64, _a1 error) *MockFSMUpdater_DeleteReplicaFromShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFSMUpdater_DeleteReplicaFromShard_Call) RunAndReturn(run func(context.Context, string, string, string) (uint64, error)) *MockFSMUpdater_DeleteReplicaFromShard_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationRegisterError provides a mock function with given fields: id, errorToRegister
func (_m *MockFSMUpdater) ReplicationRegisterError(id uint64, errorToRegister string) error {
	ret := _m.Called(id, errorToRegister)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationRegisterError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, string) error); ok {
		r0 = rf(id, errorToRegister)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFSMUpdater_ReplicationRegisterError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationRegisterError'
type MockFSMUpdater_ReplicationRegisterError_Call struct {
	*mock.Call
}

// ReplicationRegisterError is a helper method to define mock.On call
//   - id uint64
//   - errorToRegister string
func (_e *MockFSMUpdater_Expecter) ReplicationRegisterError(id interface{}, errorToRegister interface{}) *MockFSMUpdater_ReplicationRegisterError_Call {
	return &MockFSMUpdater_ReplicationRegisterError_Call{Call: _e.mock.On("ReplicationRegisterError", id, errorToRegister)}
}

func (_c *MockFSMUpdater_ReplicationRegisterError_Call) Run(run func(id uint64, errorToRegister string)) *MockFSMUpdater_ReplicationRegisterError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(string))
	})
	return _c
}

func (_c *MockFSMUpdater_ReplicationRegisterError_Call) Return(_a0 error) *MockFSMUpdater_ReplicationRegisterError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFSMUpdater_ReplicationRegisterError_Call) RunAndReturn(run func(uint64, string) error) *MockFSMUpdater_ReplicationRegisterError_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationUpdateReplicaOpStatus provides a mock function with given fields: id, state
func (_m *MockFSMUpdater) ReplicationUpdateReplicaOpStatus(id uint64, state api.ShardReplicationState) error {
	ret := _m.Called(id, state)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationUpdateReplicaOpStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, api.ShardReplicationState) error); ok {
		r0 = rf(id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationUpdateReplicaOpStatus'
type MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call struct {
	*mock.Call
}

// ReplicationUpdateReplicaOpStatus is a helper method to define mock.On call
//   - id uint64
//   - state api.ShardReplicationState
func (_e *MockFSMUpdater_Expecter) ReplicationUpdateReplicaOpStatus(id interface{}, state interface{}) *MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call {
	return &MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call{Call: _e.mock.On("ReplicationUpdateReplicaOpStatus", id, state)}
}

func (_c *MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call) Run(run func(id uint64, state api.ShardReplicationState)) *MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(api.ShardReplicationState))
	})
	return _c
}

func (_c *MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call) Return(_a0 error) *MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call) RunAndReturn(run func(uint64, api.ShardReplicationState) error) *MockFSMUpdater_ReplicationUpdateReplicaOpStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFSMUpdater creates a new instance of MockFSMUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFSMUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFSMUpdater {
	mock := &MockFSMUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
