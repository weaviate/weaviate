//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import (
	mock "github.com/stretchr/testify/mock"
	api "github.com/weaviate/weaviate/cluster/proto/api"

	strfmt "github.com/go-openapi/strfmt"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetReplicationDetailsByReplicationId provides a mock function with given fields: uuid
func (_m *MockManager) GetReplicationDetailsByReplicationId(uuid strfmt.UUID) (api.ReplicationDetailsResponse, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationDetailsByReplicationId")
	}

	var r0 api.ReplicationDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(strfmt.UUID) (api.ReplicationDetailsResponse, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(strfmt.UUID) api.ReplicationDetailsResponse); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(api.ReplicationDetailsResponse)
	}

	if rf, ok := ret.Get(1).(func(strfmt.UUID) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetReplicationDetailsByReplicationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationDetailsByReplicationId'
type MockManager_GetReplicationDetailsByReplicationId_Call struct {
	*mock.Call
}

// GetReplicationDetailsByReplicationId is a helper method to define mock.On call
//   - uuid strfmt.UUID
func (_e *MockManager_Expecter) GetReplicationDetailsByReplicationId(uuid interface{}) *MockManager_GetReplicationDetailsByReplicationId_Call {
	return &MockManager_GetReplicationDetailsByReplicationId_Call{Call: _e.mock.On("GetReplicationDetailsByReplicationId", uuid)}
}

func (_c *MockManager_GetReplicationDetailsByReplicationId_Call) Run(run func(uuid strfmt.UUID)) *MockManager_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(strfmt.UUID))
	})
	return _c
}

func (_c *MockManager_GetReplicationDetailsByReplicationId_Call) Return(_a0 api.ReplicationDetailsResponse, _a1 error) *MockManager_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetReplicationDetailsByReplicationId_Call) RunAndReturn(run func(strfmt.UUID) (api.ReplicationDetailsResponse, error)) *MockManager_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationDeleteReplica provides a mock function with given fields: node, collection, shard
func (_m *MockManager) ReplicationDeleteReplica(node string, collection string, shard string) error {
	ret := _m.Called(node, collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationDeleteReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(node, collection, shard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ReplicationDeleteReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationDeleteReplica'
type MockManager_ReplicationDeleteReplica_Call struct {
	*mock.Call
}

// ReplicationDeleteReplica is a helper method to define mock.On call
//   - node string
//   - collection string
//   - shard string
func (_e *MockManager_Expecter) ReplicationDeleteReplica(node interface{}, collection interface{}, shard interface{}) *MockManager_ReplicationDeleteReplica_Call {
	return &MockManager_ReplicationDeleteReplica_Call{Call: _e.mock.On("ReplicationDeleteReplica", node, collection, shard)}
}

func (_c *MockManager_ReplicationDeleteReplica_Call) Run(run func(node string, collection string, shard string)) *MockManager_ReplicationDeleteReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManager_ReplicationDeleteReplica_Call) Return(_a0 error) *MockManager_ReplicationDeleteReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ReplicationDeleteReplica_Call) RunAndReturn(run func(string, string, string) error) *MockManager_ReplicationDeleteReplica_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationDisableReplica provides a mock function with given fields: node, collection, shard
func (_m *MockManager) ReplicationDisableReplica(node string, collection string, shard string) error {
	ret := _m.Called(node, collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationDisableReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(node, collection, shard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ReplicationDisableReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationDisableReplica'
type MockManager_ReplicationDisableReplica_Call struct {
	*mock.Call
}

// ReplicationDisableReplica is a helper method to define mock.On call
//   - node string
//   - collection string
//   - shard string
func (_e *MockManager_Expecter) ReplicationDisableReplica(node interface{}, collection interface{}, shard interface{}) *MockManager_ReplicationDisableReplica_Call {
	return &MockManager_ReplicationDisableReplica_Call{Call: _e.mock.On("ReplicationDisableReplica", node, collection, shard)}
}

func (_c *MockManager_ReplicationDisableReplica_Call) Run(run func(node string, collection string, shard string)) *MockManager_ReplicationDisableReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManager_ReplicationDisableReplica_Call) Return(_a0 error) *MockManager_ReplicationDisableReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ReplicationDisableReplica_Call) RunAndReturn(run func(string, string, string) error) *MockManager_ReplicationDisableReplica_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationReplicateReplica provides a mock function with given fields: opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType
func (_m *MockManager) ReplicationReplicateReplica(opId strfmt.UUID, sourceNode string, sourceCollection string, sourceShard string, targetNode string, transferType string) error {
	ret := _m.Called(opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationReplicateReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(strfmt.UUID, string, string, string, string, string) error); ok {
		r0 = rf(opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ReplicationReplicateReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationReplicateReplica'
type MockManager_ReplicationReplicateReplica_Call struct {
	*mock.Call
}

// ReplicationReplicateReplica is a helper method to define mock.On call
//   - opId strfmt.UUID
//   - sourceNode string
//   - sourceCollection string
//   - sourceShard string
//   - targetNode string
//   - transferType string
func (_e *MockManager_Expecter) ReplicationReplicateReplica(opId interface{}, sourceNode interface{}, sourceCollection interface{}, sourceShard interface{}, targetNode interface{}, transferType interface{}) *MockManager_ReplicationReplicateReplica_Call {
	return &MockManager_ReplicationReplicateReplica_Call{Call: _e.mock.On("ReplicationReplicateReplica", opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType)}
}

func (_c *MockManager_ReplicationReplicateReplica_Call) Run(run func(opId strfmt.UUID, sourceNode string, sourceCollection string, sourceShard string, targetNode string, transferType string)) *MockManager_ReplicationReplicateReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(strfmt.UUID), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string))
	})
	return _c
}

func (_c *MockManager_ReplicationReplicateReplica_Call) Return(_a0 error) *MockManager_ReplicationReplicateReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ReplicationReplicateReplica_Call) RunAndReturn(run func(strfmt.UUID, string, string, string, string, string) error) *MockManager_ReplicationReplicateReplica_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
