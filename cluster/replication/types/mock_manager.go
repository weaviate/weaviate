//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import (
	context "context"

	api "github.com/weaviate/weaviate/cluster/proto/api"

	mock "github.com/stretchr/testify/mock"

	strfmt "github.com/go-openapi/strfmt"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// CancelReplication provides a mock function with given fields: ctx, uuid
func (_m *MockManager) CancelReplication(ctx context.Context, uuid strfmt.UUID) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CancelReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_CancelReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelReplication'
type MockManager_CancelReplication_Call struct {
	*mock.Call
}

// CancelReplication is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid strfmt.UUID
func (_e *MockManager_Expecter) CancelReplication(ctx interface{}, uuid interface{}) *MockManager_CancelReplication_Call {
	return &MockManager_CancelReplication_Call{Call: _e.mock.On("CancelReplication", ctx, uuid)}
}

func (_c *MockManager_CancelReplication_Call) Run(run func(ctx context.Context, uuid strfmt.UUID)) *MockManager_CancelReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID))
	})
	return _c
}

func (_c *MockManager_CancelReplication_Call) Return(_a0 error) *MockManager_CancelReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_CancelReplication_Call) RunAndReturn(run func(context.Context, strfmt.UUID) error) *MockManager_CancelReplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllReplications provides a mock function with given fields: ctx
func (_m *MockManager) DeleteAllReplications(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllReplications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_DeleteAllReplications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllReplications'
type MockManager_DeleteAllReplications_Call struct {
	*mock.Call
}

// DeleteAllReplications is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) DeleteAllReplications(ctx interface{}) *MockManager_DeleteAllReplications_Call {
	return &MockManager_DeleteAllReplications_Call{Call: _e.mock.On("DeleteAllReplications", ctx)}
}

func (_c *MockManager_DeleteAllReplications_Call) Run(run func(ctx context.Context)) *MockManager_DeleteAllReplications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_DeleteAllReplications_Call) Return(_a0 error) *MockManager_DeleteAllReplications_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DeleteAllReplications_Call) RunAndReturn(run func(context.Context) error) *MockManager_DeleteAllReplications_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReplication provides a mock function with given fields: ctx, uuid
func (_m *MockManager) DeleteReplication(ctx context.Context, uuid strfmt.UUID) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_DeleteReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplication'
type MockManager_DeleteReplication_Call struct {
	*mock.Call
}

// DeleteReplication is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid strfmt.UUID
func (_e *MockManager_Expecter) DeleteReplication(ctx interface{}, uuid interface{}) *MockManager_DeleteReplication_Call {
	return &MockManager_DeleteReplication_Call{Call: _e.mock.On("DeleteReplication", ctx, uuid)}
}

func (_c *MockManager_DeleteReplication_Call) Run(run func(ctx context.Context, uuid strfmt.UUID)) *MockManager_DeleteReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID))
	})
	return _c
}

func (_c *MockManager_DeleteReplication_Call) Return(_a0 error) *MockManager_DeleteReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DeleteReplication_Call) RunAndReturn(run func(context.Context, strfmt.UUID) error) *MockManager_DeleteReplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReplicationsByCollection provides a mock function with given fields: ctx, collection
func (_m *MockManager) DeleteReplicationsByCollection(ctx context.Context, collection string) error {
	ret := _m.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationsByCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, collection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_DeleteReplicationsByCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplicationsByCollection'
type MockManager_DeleteReplicationsByCollection_Call struct {
	*mock.Call
}

// DeleteReplicationsByCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
func (_e *MockManager_Expecter) DeleteReplicationsByCollection(ctx interface{}, collection interface{}) *MockManager_DeleteReplicationsByCollection_Call {
	return &MockManager_DeleteReplicationsByCollection_Call{Call: _e.mock.On("DeleteReplicationsByCollection", ctx, collection)}
}

func (_c *MockManager_DeleteReplicationsByCollection_Call) Run(run func(ctx context.Context, collection string)) *MockManager_DeleteReplicationsByCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_DeleteReplicationsByCollection_Call) Return(_a0 error) *MockManager_DeleteReplicationsByCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DeleteReplicationsByCollection_Call) RunAndReturn(run func(context.Context, string) error) *MockManager_DeleteReplicationsByCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReplicationsByTenants provides a mock function with given fields: ctx, collection, tenants
func (_m *MockManager) DeleteReplicationsByTenants(ctx context.Context, collection string, tenants []string) error {
	ret := _m.Called(ctx, collection, tenants)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationsByTenants")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, collection, tenants)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_DeleteReplicationsByTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplicationsByTenants'
type MockManager_DeleteReplicationsByTenants_Call struct {
	*mock.Call
}

// DeleteReplicationsByTenants is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
//   - tenants []string
func (_e *MockManager_Expecter) DeleteReplicationsByTenants(ctx interface{}, collection interface{}, tenants interface{}) *MockManager_DeleteReplicationsByTenants_Call {
	return &MockManager_DeleteReplicationsByTenants_Call{Call: _e.mock.On("DeleteReplicationsByTenants", ctx, collection, tenants)}
}

func (_c *MockManager_DeleteReplicationsByTenants_Call) Run(run func(ctx context.Context, collection string, tenants []string)) *MockManager_DeleteReplicationsByTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockManager_DeleteReplicationsByTenants_Call) Return(_a0 error) *MockManager_DeleteReplicationsByTenants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_DeleteReplicationsByTenants_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockManager_DeleteReplicationsByTenants_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllReplicationDetails provides a mock function with given fields: ctx
func (_m *MockManager) GetAllReplicationDetails(ctx context.Context) ([]api.ReplicationDetailsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllReplicationDetails")
	}

	var r0 []api.ReplicationDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]api.ReplicationDetailsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []api.ReplicationDetailsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ReplicationDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetAllReplicationDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllReplicationDetails'
type MockManager_GetAllReplicationDetails_Call struct {
	*mock.Call
}

// GetAllReplicationDetails is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) GetAllReplicationDetails(ctx interface{}) *MockManager_GetAllReplicationDetails_Call {
	return &MockManager_GetAllReplicationDetails_Call{Call: _e.mock.On("GetAllReplicationDetails", ctx)}
}

func (_c *MockManager_GetAllReplicationDetails_Call) Run(run func(ctx context.Context)) *MockManager_GetAllReplicationDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_GetAllReplicationDetails_Call) Return(_a0 []api.ReplicationDetailsResponse, _a1 error) *MockManager_GetAllReplicationDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetAllReplicationDetails_Call) RunAndReturn(run func(context.Context) ([]api.ReplicationDetailsResponse, error)) *MockManager_GetAllReplicationDetails_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicationDetailsByCollection provides a mock function with given fields: ctx, collection
func (_m *MockManager) GetReplicationDetailsByCollection(ctx context.Context, collection string) ([]api.ReplicationDetailsResponse, error) {
	ret := _m.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationDetailsByCollection")
	}

	var r0 []api.ReplicationDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]api.ReplicationDetailsResponse, error)); ok {
		return rf(ctx, collection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []api.ReplicationDetailsResponse); ok {
		r0 = rf(ctx, collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ReplicationDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetReplicationDetailsByCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationDetailsByCollection'
type MockManager_GetReplicationDetailsByCollection_Call struct {
	*mock.Call
}

// GetReplicationDetailsByCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
func (_e *MockManager_Expecter) GetReplicationDetailsByCollection(ctx interface{}, collection interface{}) *MockManager_GetReplicationDetailsByCollection_Call {
	return &MockManager_GetReplicationDetailsByCollection_Call{Call: _e.mock.On("GetReplicationDetailsByCollection", ctx, collection)}
}

func (_c *MockManager_GetReplicationDetailsByCollection_Call) Run(run func(ctx context.Context, collection string)) *MockManager_GetReplicationDetailsByCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_GetReplicationDetailsByCollection_Call) Return(_a0 []api.ReplicationDetailsResponse, _a1 error) *MockManager_GetReplicationDetailsByCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetReplicationDetailsByCollection_Call) RunAndReturn(run func(context.Context, string) ([]api.ReplicationDetailsResponse, error)) *MockManager_GetReplicationDetailsByCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicationDetailsByCollectionAndShard provides a mock function with given fields: ctx, collection, shard
func (_m *MockManager) GetReplicationDetailsByCollectionAndShard(ctx context.Context, collection string, shard string) ([]api.ReplicationDetailsResponse, error) {
	ret := _m.Called(ctx, collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationDetailsByCollectionAndShard")
	}

	var r0 []api.ReplicationDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]api.ReplicationDetailsResponse, error)); ok {
		return rf(ctx, collection, shard)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []api.ReplicationDetailsResponse); ok {
		r0 = rf(ctx, collection, shard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ReplicationDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, collection, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetReplicationDetailsByCollectionAndShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationDetailsByCollectionAndShard'
type MockManager_GetReplicationDetailsByCollectionAndShard_Call struct {
	*mock.Call
}

// GetReplicationDetailsByCollectionAndShard is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
//   - shard string
func (_e *MockManager_Expecter) GetReplicationDetailsByCollectionAndShard(ctx interface{}, collection interface{}, shard interface{}) *MockManager_GetReplicationDetailsByCollectionAndShard_Call {
	return &MockManager_GetReplicationDetailsByCollectionAndShard_Call{Call: _e.mock.On("GetReplicationDetailsByCollectionAndShard", ctx, collection, shard)}
}

func (_c *MockManager_GetReplicationDetailsByCollectionAndShard_Call) Run(run func(ctx context.Context, collection string, shard string)) *MockManager_GetReplicationDetailsByCollectionAndShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManager_GetReplicationDetailsByCollectionAndShard_Call) Return(_a0 []api.ReplicationDetailsResponse, _a1 error) *MockManager_GetReplicationDetailsByCollectionAndShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetReplicationDetailsByCollectionAndShard_Call) RunAndReturn(run func(context.Context, string, string) ([]api.ReplicationDetailsResponse, error)) *MockManager_GetReplicationDetailsByCollectionAndShard_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicationDetailsByReplicationId provides a mock function with given fields: ctx, uuid
func (_m *MockManager) GetReplicationDetailsByReplicationId(ctx context.Context, uuid strfmt.UUID) (api.ReplicationDetailsResponse, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationDetailsByReplicationId")
	}

	var r0 api.ReplicationDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID) (api.ReplicationDetailsResponse, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID) api.ReplicationDetailsResponse); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(api.ReplicationDetailsResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, strfmt.UUID) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetReplicationDetailsByReplicationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationDetailsByReplicationId'
type MockManager_GetReplicationDetailsByReplicationId_Call struct {
	*mock.Call
}

// GetReplicationDetailsByReplicationId is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid strfmt.UUID
func (_e *MockManager_Expecter) GetReplicationDetailsByReplicationId(ctx interface{}, uuid interface{}) *MockManager_GetReplicationDetailsByReplicationId_Call {
	return &MockManager_GetReplicationDetailsByReplicationId_Call{Call: _e.mock.On("GetReplicationDetailsByReplicationId", ctx, uuid)}
}

func (_c *MockManager_GetReplicationDetailsByReplicationId_Call) Run(run func(ctx context.Context, uuid strfmt.UUID)) *MockManager_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID))
	})
	return _c
}

func (_c *MockManager_GetReplicationDetailsByReplicationId_Call) Return(_a0 api.ReplicationDetailsResponse, _a1 error) *MockManager_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetReplicationDetailsByReplicationId_Call) RunAndReturn(run func(context.Context, strfmt.UUID) (api.ReplicationDetailsResponse, error)) *MockManager_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicationDetailsByTargetNode provides a mock function with given fields: ctx, node
func (_m *MockManager) GetReplicationDetailsByTargetNode(ctx context.Context, node string) ([]api.ReplicationDetailsResponse, error) {
	ret := _m.Called(ctx, node)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationDetailsByTargetNode")
	}

	var r0 []api.ReplicationDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]api.ReplicationDetailsResponse, error)); ok {
		return rf(ctx, node)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []api.ReplicationDetailsResponse); ok {
		r0 = rf(ctx, node)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.ReplicationDetailsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetReplicationDetailsByTargetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationDetailsByTargetNode'
type MockManager_GetReplicationDetailsByTargetNode_Call struct {
	*mock.Call
}

// GetReplicationDetailsByTargetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - node string
func (_e *MockManager_Expecter) GetReplicationDetailsByTargetNode(ctx interface{}, node interface{}) *MockManager_GetReplicationDetailsByTargetNode_Call {
	return &MockManager_GetReplicationDetailsByTargetNode_Call{Call: _e.mock.On("GetReplicationDetailsByTargetNode", ctx, node)}
}

func (_c *MockManager_GetReplicationDetailsByTargetNode_Call) Run(run func(ctx context.Context, node string)) *MockManager_GetReplicationDetailsByTargetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_GetReplicationDetailsByTargetNode_Call) Return(_a0 []api.ReplicationDetailsResponse, _a1 error) *MockManager_GetReplicationDetailsByTargetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetReplicationDetailsByTargetNode_Call) RunAndReturn(run func(context.Context, string) ([]api.ReplicationDetailsResponse, error)) *MockManager_GetReplicationDetailsByTargetNode_Call {
	_c.Call.Return(run)
	return _c
}

// QueryShardingStateByCollection provides a mock function with given fields: ctx, collection
func (_m *MockManager) QueryShardingStateByCollection(ctx context.Context, collection string) (api.ShardingState, error) {
	ret := _m.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for QueryShardingStateByCollection")
	}

	var r0 api.ShardingState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (api.ShardingState, error)); ok {
		return rf(ctx, collection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) api.ShardingState); ok {
		r0 = rf(ctx, collection)
	} else {
		r0 = ret.Get(0).(api.ShardingState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_QueryShardingStateByCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryShardingStateByCollection'
type MockManager_QueryShardingStateByCollection_Call struct {
	*mock.Call
}

// QueryShardingStateByCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
func (_e *MockManager_Expecter) QueryShardingStateByCollection(ctx interface{}, collection interface{}) *MockManager_QueryShardingStateByCollection_Call {
	return &MockManager_QueryShardingStateByCollection_Call{Call: _e.mock.On("QueryShardingStateByCollection", ctx, collection)}
}

func (_c *MockManager_QueryShardingStateByCollection_Call) Run(run func(ctx context.Context, collection string)) *MockManager_QueryShardingStateByCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManager_QueryShardingStateByCollection_Call) Return(_a0 api.ShardingState, _a1 error) *MockManager_QueryShardingStateByCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_QueryShardingStateByCollection_Call) RunAndReturn(run func(context.Context, string) (api.ShardingState, error)) *MockManager_QueryShardingStateByCollection_Call {
	_c.Call.Return(run)
	return _c
}

// QueryShardingStateByCollectionAndShard provides a mock function with given fields: ctx, collection, shard
func (_m *MockManager) QueryShardingStateByCollectionAndShard(ctx context.Context, collection string, shard string) (api.ShardingState, error) {
	ret := _m.Called(ctx, collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for QueryShardingStateByCollectionAndShard")
	}

	var r0 api.ShardingState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (api.ShardingState, error)); ok {
		return rf(ctx, collection, shard)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) api.ShardingState); ok {
		r0 = rf(ctx, collection, shard)
	} else {
		r0 = ret.Get(0).(api.ShardingState)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, collection, shard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_QueryShardingStateByCollectionAndShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryShardingStateByCollectionAndShard'
type MockManager_QueryShardingStateByCollectionAndShard_Call struct {
	*mock.Call
}

// QueryShardingStateByCollectionAndShard is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
//   - shard string
func (_e *MockManager_Expecter) QueryShardingStateByCollectionAndShard(ctx interface{}, collection interface{}, shard interface{}) *MockManager_QueryShardingStateByCollectionAndShard_Call {
	return &MockManager_QueryShardingStateByCollectionAndShard_Call{Call: _e.mock.On("QueryShardingStateByCollectionAndShard", ctx, collection, shard)}
}

func (_c *MockManager_QueryShardingStateByCollectionAndShard_Call) Run(run func(ctx context.Context, collection string, shard string)) *MockManager_QueryShardingStateByCollectionAndShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManager_QueryShardingStateByCollectionAndShard_Call) Return(_a0 api.ShardingState, _a1 error) *MockManager_QueryShardingStateByCollectionAndShard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_QueryShardingStateByCollectionAndShard_Call) RunAndReturn(run func(context.Context, string, string) (api.ShardingState, error)) *MockManager_QueryShardingStateByCollectionAndShard_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationDeleteReplica provides a mock function with given fields: ctx, node, collection, shard
func (_m *MockManager) ReplicationDeleteReplica(ctx context.Context, node string, collection string, shard string) error {
	ret := _m.Called(ctx, node, collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationDeleteReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, node, collection, shard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ReplicationDeleteReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationDeleteReplica'
type MockManager_ReplicationDeleteReplica_Call struct {
	*mock.Call
}

// ReplicationDeleteReplica is a helper method to define mock.On call
//   - ctx context.Context
//   - node string
//   - collection string
//   - shard string
func (_e *MockManager_Expecter) ReplicationDeleteReplica(ctx interface{}, node interface{}, collection interface{}, shard interface{}) *MockManager_ReplicationDeleteReplica_Call {
	return &MockManager_ReplicationDeleteReplica_Call{Call: _e.mock.On("ReplicationDeleteReplica", ctx, node, collection, shard)}
}

func (_c *MockManager_ReplicationDeleteReplica_Call) Run(run func(ctx context.Context, node string, collection string, shard string)) *MockManager_ReplicationDeleteReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockManager_ReplicationDeleteReplica_Call) Return(_a0 error) *MockManager_ReplicationDeleteReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ReplicationDeleteReplica_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockManager_ReplicationDeleteReplica_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationDisableReplica provides a mock function with given fields: ctx, node, collection, shard
func (_m *MockManager) ReplicationDisableReplica(ctx context.Context, node string, collection string, shard string) error {
	ret := _m.Called(ctx, node, collection, shard)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationDisableReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, node, collection, shard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ReplicationDisableReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationDisableReplica'
type MockManager_ReplicationDisableReplica_Call struct {
	*mock.Call
}

// ReplicationDisableReplica is a helper method to define mock.On call
//   - ctx context.Context
//   - node string
//   - collection string
//   - shard string
func (_e *MockManager_Expecter) ReplicationDisableReplica(ctx interface{}, node interface{}, collection interface{}, shard interface{}) *MockManager_ReplicationDisableReplica_Call {
	return &MockManager_ReplicationDisableReplica_Call{Call: _e.mock.On("ReplicationDisableReplica", ctx, node, collection, shard)}
}

func (_c *MockManager_ReplicationDisableReplica_Call) Run(run func(ctx context.Context, node string, collection string, shard string)) *MockManager_ReplicationDisableReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockManager_ReplicationDisableReplica_Call) Return(_a0 error) *MockManager_ReplicationDisableReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ReplicationDisableReplica_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockManager_ReplicationDisableReplica_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicationReplicateReplica provides a mock function with given fields: ctx, opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType
func (_m *MockManager) ReplicationReplicateReplica(ctx context.Context, opId strfmt.UUID, sourceNode string, sourceCollection string, sourceShard string, targetNode string, transferType string) error {
	ret := _m.Called(ctx, opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationReplicateReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, strfmt.UUID, string, string, string, string, string) error); ok {
		r0 = rf(ctx, opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ReplicationReplicateReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicationReplicateReplica'
type MockManager_ReplicationReplicateReplica_Call struct {
	*mock.Call
}

// ReplicationReplicateReplica is a helper method to define mock.On call
//   - ctx context.Context
//   - opId strfmt.UUID
//   - sourceNode string
//   - sourceCollection string
//   - sourceShard string
//   - targetNode string
//   - transferType string
func (_e *MockManager_Expecter) ReplicationReplicateReplica(ctx interface{}, opId interface{}, sourceNode interface{}, sourceCollection interface{}, sourceShard interface{}, targetNode interface{}, transferType interface{}) *MockManager_ReplicationReplicateReplica_Call {
	return &MockManager_ReplicationReplicateReplica_Call{Call: _e.mock.On("ReplicationReplicateReplica", ctx, opId, sourceNode, sourceCollection, sourceShard, targetNode, transferType)}
}

func (_c *MockManager_ReplicationReplicateReplica_Call) Run(run func(ctx context.Context, opId strfmt.UUID, sourceNode string, sourceCollection string, sourceShard string, targetNode string, transferType string)) *MockManager_ReplicationReplicateReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(strfmt.UUID), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string))
	})
	return _c
}

func (_c *MockManager_ReplicationReplicateReplica_Call) Return(_a0 error) *MockManager_ReplicationReplicateReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ReplicationReplicateReplica_Call) RunAndReturn(run func(context.Context, strfmt.UUID, string, string, string, string, string) error) *MockManager_ReplicationReplicateReplica_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
