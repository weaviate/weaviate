//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import (
	context "context"

	additional "github.com/weaviate/weaviate/entities/additional"

	mock "github.com/stretchr/testify/mock"
)

// MockRemoteIndex is an autogenerated mock type for the RemoteIndex type
type MockRemoteIndex struct {
	mock.Mock
}

type MockRemoteIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRemoteIndex) EXPECT() *MockRemoteIndex_Expecter {
	return &MockRemoteIndex_Expecter{mock: &_m.Mock}
}

// AddAsyncReplicationTargetNode provides a mock function with given fields: ctx, hostName, indexName, shardName, targetNodeOverride, schemaVersion
func (_m *MockRemoteIndex) AddAsyncReplicationTargetNode(ctx context.Context, hostName string, indexName string, shardName string, targetNodeOverride additional.AsyncReplicationTargetNodeOverride, schemaVersion uint64) error {
	ret := _m.Called(ctx, hostName, indexName, shardName, targetNodeOverride, schemaVersion)

	if len(ret) == 0 {
		panic("no return value specified for AddAsyncReplicationTargetNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, additional.AsyncReplicationTargetNodeOverride, uint64) error); ok {
		r0 = rf(ctx, hostName, indexName, shardName, targetNodeOverride, schemaVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndex_AddAsyncReplicationTargetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAsyncReplicationTargetNode'
type MockRemoteIndex_AddAsyncReplicationTargetNode_Call struct {
	*mock.Call
}

// AddAsyncReplicationTargetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - targetNodeOverride additional.AsyncReplicationTargetNodeOverride
//   - schemaVersion uint64
func (_e *MockRemoteIndex_Expecter) AddAsyncReplicationTargetNode(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, targetNodeOverride interface{}, schemaVersion interface{}) *MockRemoteIndex_AddAsyncReplicationTargetNode_Call {
	return &MockRemoteIndex_AddAsyncReplicationTargetNode_Call{Call: _e.mock.On("AddAsyncReplicationTargetNode", ctx, hostName, indexName, shardName, targetNodeOverride, schemaVersion)}
}

func (_c *MockRemoteIndex_AddAsyncReplicationTargetNode_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, targetNodeOverride additional.AsyncReplicationTargetNodeOverride, schemaVersion uint64)) *MockRemoteIndex_AddAsyncReplicationTargetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(additional.AsyncReplicationTargetNodeOverride), args[5].(uint64))
	})
	return _c
}

func (_c *MockRemoteIndex_AddAsyncReplicationTargetNode_Call) Return(_a0 error) *MockRemoteIndex_AddAsyncReplicationTargetNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndex_AddAsyncReplicationTargetNode_Call) RunAndReturn(run func(context.Context, string, string, string, additional.AsyncReplicationTargetNodeOverride, uint64) error) *MockRemoteIndex_AddAsyncReplicationTargetNode_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAsyncReplicationTargetNode provides a mock function with given fields: ctx, hostName, indexName, shardName, targetNodeOverride
func (_m *MockRemoteIndex) RemoveAsyncReplicationTargetNode(ctx context.Context, hostName string, indexName string, shardName string, targetNodeOverride additional.AsyncReplicationTargetNodeOverride) error {
	ret := _m.Called(ctx, hostName, indexName, shardName, targetNodeOverride)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAsyncReplicationTargetNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, additional.AsyncReplicationTargetNodeOverride) error); ok {
		r0 = rf(ctx, hostName, indexName, shardName, targetNodeOverride)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAsyncReplicationTargetNode'
type MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call struct {
	*mock.Call
}

// RemoveAsyncReplicationTargetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - hostName string
//   - indexName string
//   - shardName string
//   - targetNodeOverride additional.AsyncReplicationTargetNodeOverride
func (_e *MockRemoteIndex_Expecter) RemoveAsyncReplicationTargetNode(ctx interface{}, hostName interface{}, indexName interface{}, shardName interface{}, targetNodeOverride interface{}) *MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call {
	return &MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call{Call: _e.mock.On("RemoveAsyncReplicationTargetNode", ctx, hostName, indexName, shardName, targetNodeOverride)}
}

func (_c *MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call) Run(run func(ctx context.Context, hostName string, indexName string, shardName string, targetNodeOverride additional.AsyncReplicationTargetNodeOverride)) *MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(additional.AsyncReplicationTargetNodeOverride))
	})
	return _c
}

func (_c *MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call) Return(_a0 error) *MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call) RunAndReturn(run func(context.Context, string, string, string, additional.AsyncReplicationTargetNodeOverride) error) *MockRemoteIndex_RemoveAsyncReplicationTargetNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRemoteIndex creates a new instance of MockRemoteIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRemoteIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRemoteIndex {
	mock := &MockRemoteIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
