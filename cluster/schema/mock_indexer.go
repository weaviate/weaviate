//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package schema

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	api "github.com/weaviate/weaviate/cluster/proto/api"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockIndexer is an autogenerated mock type for the Indexer type
type MockIndexer struct {
	mock.Mock
}

type MockIndexer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndexer) EXPECT() *MockIndexer_Expecter {
	return &MockIndexer_Expecter{mock: &_m.Mock}
}

// AddClass provides a mock function with given fields: _a0
func (_m *MockIndexer) AddClass(_a0 api.AddClassRequest) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.AddClassRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_AddClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClass'
type MockIndexer_AddClass_Call struct {
	*mock.Call
}

// AddClass is a helper method to define mock.On call
//   - _a0 api.AddClassRequest
func (_e *MockIndexer_Expecter) AddClass(_a0 interface{}) *MockIndexer_AddClass_Call {
	return &MockIndexer_AddClass_Call{Call: _e.mock.On("AddClass", _a0)}
}

func (_c *MockIndexer_AddClass_Call) Run(run func(_a0 api.AddClassRequest)) *MockIndexer_AddClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.AddClassRequest))
	})
	return _c
}

func (_c *MockIndexer_AddClass_Call) Return(_a0 error) *MockIndexer_AddClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_AddClass_Call) RunAndReturn(run func(api.AddClassRequest) error) *MockIndexer_AddClass_Call {
	_c.Call.Return(run)
	return _c
}

// AddProperty provides a mock function with given fields: class, req
func (_m *MockIndexer) AddProperty(class string, req api.AddPropertyRequest) error {
	ret := _m.Called(class, req)

	if len(ret) == 0 {
		panic("no return value specified for AddProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, api.AddPropertyRequest) error); ok {
		r0 = rf(class, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_AddProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProperty'
type MockIndexer_AddProperty_Call struct {
	*mock.Call
}

// AddProperty is a helper method to define mock.On call
//   - class string
//   - req api.AddPropertyRequest
func (_e *MockIndexer_Expecter) AddProperty(class interface{}, req interface{}) *MockIndexer_AddProperty_Call {
	return &MockIndexer_AddProperty_Call{Call: _e.mock.On("AddProperty", class, req)}
}

func (_c *MockIndexer_AddProperty_Call) Run(run func(class string, req api.AddPropertyRequest)) *MockIndexer_AddProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(api.AddPropertyRequest))
	})
	return _c
}

func (_c *MockIndexer_AddProperty_Call) Return(_a0 error) *MockIndexer_AddProperty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_AddProperty_Call) RunAndReturn(run func(string, api.AddPropertyRequest) error) *MockIndexer_AddProperty_Call {
	_c.Call.Return(run)
	return _c
}

// AddTenants provides a mock function with given fields: class, req
func (_m *MockIndexer) AddTenants(class string, req *api.AddTenantsRequest) error {
	ret := _m.Called(class, req)

	if len(ret) == 0 {
		panic("no return value specified for AddTenants")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *api.AddTenantsRequest) error); ok {
		r0 = rf(class, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_AddTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTenants'
type MockIndexer_AddTenants_Call struct {
	*mock.Call
}

// AddTenants is a helper method to define mock.On call
//   - class string
//   - req *api.AddTenantsRequest
func (_e *MockIndexer_Expecter) AddTenants(class interface{}, req interface{}) *MockIndexer_AddTenants_Call {
	return &MockIndexer_AddTenants_Call{Call: _e.mock.On("AddTenants", class, req)}
}

func (_c *MockIndexer_AddTenants_Call) Run(run func(class string, req *api.AddTenantsRequest)) *MockIndexer_AddTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*api.AddTenantsRequest))
	})
	return _c
}

func (_c *MockIndexer_AddTenants_Call) Return(_a0 error) *MockIndexer_AddTenants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_AddTenants_Call) RunAndReturn(run func(string, *api.AddTenantsRequest) error) *MockIndexer_AddTenants_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields: _a0
func (_m *MockIndexer) Close(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockIndexer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockIndexer_Expecter) Close(_a0 interface{}) *MockIndexer_Close_Call {
	return &MockIndexer_Close_Call{Call: _e.mock.On("Close", _a0)}
}

func (_c *MockIndexer_Close_Call) Run(run func(_a0 context.Context)) *MockIndexer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIndexer_Close_Call) Return(_a0 error) *MockIndexer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_Close_Call) RunAndReturn(run func(context.Context) error) *MockIndexer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClass provides a mock function with given fields: className, hasFrozen
func (_m *MockIndexer) DeleteClass(className string, hasFrozen bool) error {
	ret := _m.Called(className, hasFrozen)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(className, hasFrozen)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_DeleteClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClass'
type MockIndexer_DeleteClass_Call struct {
	*mock.Call
}

// DeleteClass is a helper method to define mock.On call
//   - className string
//   - hasFrozen bool
func (_e *MockIndexer_Expecter) DeleteClass(className interface{}, hasFrozen interface{}) *MockIndexer_DeleteClass_Call {
	return &MockIndexer_DeleteClass_Call{Call: _e.mock.On("DeleteClass", className, hasFrozen)}
}

func (_c *MockIndexer_DeleteClass_Call) Run(run func(className string, hasFrozen bool)) *MockIndexer_DeleteClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *MockIndexer_DeleteClass_Call) Return(_a0 error) *MockIndexer_DeleteClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_DeleteClass_Call) RunAndReturn(run func(string, bool) error) *MockIndexer_DeleteClass_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTenants provides a mock function with given fields: class, tenants
func (_m *MockIndexer) DeleteTenants(class string, tenants []*models.Tenant) error {
	ret := _m.Called(class, tenants)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTenants")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*models.Tenant) error); ok {
		r0 = rf(class, tenants)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_DeleteTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTenants'
type MockIndexer_DeleteTenants_Call struct {
	*mock.Call
}

// DeleteTenants is a helper method to define mock.On call
//   - class string
//   - tenants []*models.Tenant
func (_e *MockIndexer_Expecter) DeleteTenants(class interface{}, tenants interface{}) *MockIndexer_DeleteTenants_Call {
	return &MockIndexer_DeleteTenants_Call{Call: _e.mock.On("DeleteTenants", class, tenants)}
}

func (_c *MockIndexer_DeleteTenants_Call) Run(run func(class string, tenants []*models.Tenant)) *MockIndexer_DeleteTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*models.Tenant))
	})
	return _c
}

func (_c *MockIndexer_DeleteTenants_Call) Return(_a0 error) *MockIndexer_DeleteTenants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_DeleteTenants_Call) RunAndReturn(run func(string, []*models.Tenant) error) *MockIndexer_DeleteTenants_Call {
	_c.Call.Return(run)
	return _c
}

// GetShardsStatus provides a mock function with given fields: class, tenant
func (_m *MockIndexer) GetShardsStatus(class string, tenant string) (models.ShardStatusList, error) {
	ret := _m.Called(class, tenant)

	if len(ret) == 0 {
		panic("no return value specified for GetShardsStatus")
	}

	var r0 models.ShardStatusList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (models.ShardStatusList, error)); ok {
		return rf(class, tenant)
	}
	if rf, ok := ret.Get(0).(func(string, string) models.ShardStatusList); ok {
		r0 = rf(class, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.ShardStatusList)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(class, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexer_GetShardsStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShardsStatus'
type MockIndexer_GetShardsStatus_Call struct {
	*mock.Call
}

// GetShardsStatus is a helper method to define mock.On call
//   - class string
//   - tenant string
func (_e *MockIndexer_Expecter) GetShardsStatus(class interface{}, tenant interface{}) *MockIndexer_GetShardsStatus_Call {
	return &MockIndexer_GetShardsStatus_Call{Call: _e.mock.On("GetShardsStatus", class, tenant)}
}

func (_c *MockIndexer_GetShardsStatus_Call) Run(run func(class string, tenant string)) *MockIndexer_GetShardsStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockIndexer_GetShardsStatus_Call) Return(_a0 models.ShardStatusList, _a1 error) *MockIndexer_GetShardsStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIndexer_GetShardsStatus_Call) RunAndReturn(run func(string, string) (models.ShardStatusList, error)) *MockIndexer_GetShardsStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: _a0
func (_m *MockIndexer) Open(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockIndexer_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockIndexer_Expecter) Open(_a0 interface{}) *MockIndexer_Open_Call {
	return &MockIndexer_Open_Call{Call: _e.mock.On("Open", _a0)}
}

func (_c *MockIndexer_Open_Call) Run(run func(_a0 context.Context)) *MockIndexer_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIndexer_Open_Call) Return(_a0 error) *MockIndexer_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_Open_Call) RunAndReturn(run func(context.Context) error) *MockIndexer_Open_Call {
	_c.Call.Return(run)
	return _c
}

// ReloadLocalDB provides a mock function with given fields: ctx, all
func (_m *MockIndexer) ReloadLocalDB(ctx context.Context, all []api.UpdateClassRequest) error {
	ret := _m.Called(ctx, all)

	if len(ret) == 0 {
		panic("no return value specified for ReloadLocalDB")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []api.UpdateClassRequest) error); ok {
		r0 = rf(ctx, all)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_ReloadLocalDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReloadLocalDB'
type MockIndexer_ReloadLocalDB_Call struct {
	*mock.Call
}

// ReloadLocalDB is a helper method to define mock.On call
//   - ctx context.Context
//   - all []api.UpdateClassRequest
func (_e *MockIndexer_Expecter) ReloadLocalDB(ctx interface{}, all interface{}) *MockIndexer_ReloadLocalDB_Call {
	return &MockIndexer_ReloadLocalDB_Call{Call: _e.mock.On("ReloadLocalDB", ctx, all)}
}

func (_c *MockIndexer_ReloadLocalDB_Call) Run(run func(ctx context.Context, all []api.UpdateClassRequest)) *MockIndexer_ReloadLocalDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]api.UpdateClassRequest))
	})
	return _c
}

func (_c *MockIndexer_ReloadLocalDB_Call) Return(_a0 error) *MockIndexer_ReloadLocalDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_ReloadLocalDB_Call) RunAndReturn(run func(context.Context, []api.UpdateClassRequest) error) *MockIndexer_ReloadLocalDB_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreClassDir provides a mock function with given fields: class
func (_m *MockIndexer) RestoreClassDir(class string) error {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for RestoreClassDir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_RestoreClassDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreClassDir'
type MockIndexer_RestoreClassDir_Call struct {
	*mock.Call
}

// RestoreClassDir is a helper method to define mock.On call
//   - class string
func (_e *MockIndexer_Expecter) RestoreClassDir(class interface{}) *MockIndexer_RestoreClassDir_Call {
	return &MockIndexer_RestoreClassDir_Call{Call: _e.mock.On("RestoreClassDir", class)}
}

func (_c *MockIndexer_RestoreClassDir_Call) Run(run func(class string)) *MockIndexer_RestoreClassDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIndexer_RestoreClassDir_Call) Return(_a0 error) *MockIndexer_RestoreClassDir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_RestoreClassDir_Call) RunAndReturn(run func(string) error) *MockIndexer_RestoreClassDir_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerSchemaUpdateCallbacks provides a mock function with no fields
func (_m *MockIndexer) TriggerSchemaUpdateCallbacks() {
	_m.Called()
}

// MockIndexer_TriggerSchemaUpdateCallbacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerSchemaUpdateCallbacks'
type MockIndexer_TriggerSchemaUpdateCallbacks_Call struct {
	*mock.Call
}

// TriggerSchemaUpdateCallbacks is a helper method to define mock.On call
func (_e *MockIndexer_Expecter) TriggerSchemaUpdateCallbacks() *MockIndexer_TriggerSchemaUpdateCallbacks_Call {
	return &MockIndexer_TriggerSchemaUpdateCallbacks_Call{Call: _e.mock.On("TriggerSchemaUpdateCallbacks")}
}

func (_c *MockIndexer_TriggerSchemaUpdateCallbacks_Call) Run(run func()) *MockIndexer_TriggerSchemaUpdateCallbacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIndexer_TriggerSchemaUpdateCallbacks_Call) Return() *MockIndexer_TriggerSchemaUpdateCallbacks_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIndexer_TriggerSchemaUpdateCallbacks_Call) RunAndReturn(run func()) *MockIndexer_TriggerSchemaUpdateCallbacks_Call {
	_c.Run(run)
	return _c
}

// UpdateClass provides a mock function with given fields: _a0
func (_m *MockIndexer) UpdateClass(_a0 api.UpdateClassRequest) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.UpdateClassRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_UpdateClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClass'
type MockIndexer_UpdateClass_Call struct {
	*mock.Call
}

// UpdateClass is a helper method to define mock.On call
//   - _a0 api.UpdateClassRequest
func (_e *MockIndexer_Expecter) UpdateClass(_a0 interface{}) *MockIndexer_UpdateClass_Call {
	return &MockIndexer_UpdateClass_Call{Call: _e.mock.On("UpdateClass", _a0)}
}

func (_c *MockIndexer_UpdateClass_Call) Run(run func(_a0 api.UpdateClassRequest)) *MockIndexer_UpdateClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateClassRequest))
	})
	return _c
}

func (_c *MockIndexer_UpdateClass_Call) Return(_a0 error) *MockIndexer_UpdateClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_UpdateClass_Call) RunAndReturn(run func(api.UpdateClassRequest) error) *MockIndexer_UpdateClass_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIndex provides a mock function with given fields: _a0
func (_m *MockIndexer) UpdateIndex(_a0 api.UpdateClassRequest) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(api.UpdateClassRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_UpdateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIndex'
type MockIndexer_UpdateIndex_Call struct {
	*mock.Call
}

// UpdateIndex is a helper method to define mock.On call
//   - _a0 api.UpdateClassRequest
func (_e *MockIndexer_Expecter) UpdateIndex(_a0 interface{}) *MockIndexer_UpdateIndex_Call {
	return &MockIndexer_UpdateIndex_Call{Call: _e.mock.On("UpdateIndex", _a0)}
}

func (_c *MockIndexer_UpdateIndex_Call) Run(run func(_a0 api.UpdateClassRequest)) *MockIndexer_UpdateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(api.UpdateClassRequest))
	})
	return _c
}

func (_c *MockIndexer_UpdateIndex_Call) Return(_a0 error) *MockIndexer_UpdateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_UpdateIndex_Call) RunAndReturn(run func(api.UpdateClassRequest) error) *MockIndexer_UpdateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateShardStatus provides a mock function with given fields: _a0
func (_m *MockIndexer) UpdateShardStatus(_a0 *api.UpdateShardStatusRequest) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateShardStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.UpdateShardStatusRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_UpdateShardStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateShardStatus'
type MockIndexer_UpdateShardStatus_Call struct {
	*mock.Call
}

// UpdateShardStatus is a helper method to define mock.On call
//   - _a0 *api.UpdateShardStatusRequest
func (_e *MockIndexer_Expecter) UpdateShardStatus(_a0 interface{}) *MockIndexer_UpdateShardStatus_Call {
	return &MockIndexer_UpdateShardStatus_Call{Call: _e.mock.On("UpdateShardStatus", _a0)}
}

func (_c *MockIndexer_UpdateShardStatus_Call) Run(run func(_a0 *api.UpdateShardStatusRequest)) *MockIndexer_UpdateShardStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.UpdateShardStatusRequest))
	})
	return _c
}

func (_c *MockIndexer_UpdateShardStatus_Call) Return(_a0 error) *MockIndexer_UpdateShardStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_UpdateShardStatus_Call) RunAndReturn(run func(*api.UpdateShardStatusRequest) error) *MockIndexer_UpdateShardStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTenants provides a mock function with given fields: class, req
func (_m *MockIndexer) UpdateTenants(class string, req *api.UpdateTenantsRequest) error {
	ret := _m.Called(class, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenants")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *api.UpdateTenantsRequest) error); ok {
		r0 = rf(class, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_UpdateTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenants'
type MockIndexer_UpdateTenants_Call struct {
	*mock.Call
}

// UpdateTenants is a helper method to define mock.On call
//   - class string
//   - req *api.UpdateTenantsRequest
func (_e *MockIndexer_Expecter) UpdateTenants(class interface{}, req interface{}) *MockIndexer_UpdateTenants_Call {
	return &MockIndexer_UpdateTenants_Call{Call: _e.mock.On("UpdateTenants", class, req)}
}

func (_c *MockIndexer_UpdateTenants_Call) Run(run func(class string, req *api.UpdateTenantsRequest)) *MockIndexer_UpdateTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*api.UpdateTenantsRequest))
	})
	return _c
}

func (_c *MockIndexer_UpdateTenants_Call) Return(_a0 error) *MockIndexer_UpdateTenants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_UpdateTenants_Call) RunAndReturn(run func(string, *api.UpdateTenantsRequest) error) *MockIndexer_UpdateTenants_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTenantsProcess provides a mock function with given fields: class, req
func (_m *MockIndexer) UpdateTenantsProcess(class string, req *api.TenantProcessRequest) error {
	ret := _m.Called(class, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTenantsProcess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *api.TenantProcessRequest) error); ok {
		r0 = rf(class, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_UpdateTenantsProcess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTenantsProcess'
type MockIndexer_UpdateTenantsProcess_Call struct {
	*mock.Call
}

// UpdateTenantsProcess is a helper method to define mock.On call
//   - class string
//   - req *api.TenantProcessRequest
func (_e *MockIndexer_Expecter) UpdateTenantsProcess(class interface{}, req interface{}) *MockIndexer_UpdateTenantsProcess_Call {
	return &MockIndexer_UpdateTenantsProcess_Call{Call: _e.mock.On("UpdateTenantsProcess", class, req)}
}

func (_c *MockIndexer_UpdateTenantsProcess_Call) Run(run func(class string, req *api.TenantProcessRequest)) *MockIndexer_UpdateTenantsProcess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*api.TenantProcessRequest))
	})
	return _c
}

func (_c *MockIndexer_UpdateTenantsProcess_Call) Return(_a0 error) *MockIndexer_UpdateTenantsProcess_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_UpdateTenantsProcess_Call) RunAndReturn(run func(string, *api.TenantProcessRequest) error) *MockIndexer_UpdateTenantsProcess_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndexer creates a new instance of MockIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndexer {
	mock := &MockIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
