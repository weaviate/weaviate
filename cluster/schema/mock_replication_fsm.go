//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package schema

import mock "github.com/stretchr/testify/mock"

// MockreplicationFSM is an autogenerated mock type for the replicationFSM type
type MockreplicationFSM struct {
	mock.Mock
}

type MockreplicationFSM_Expecter struct {
	mock *mock.Mock
}

func (_m *MockreplicationFSM) EXPECT() *MockreplicationFSM_Expecter {
	return &MockreplicationFSM_Expecter{mock: &_m.Mock}
}

// DeleteReplicationsByCollection provides a mock function with given fields: collection
func (_m *MockreplicationFSM) DeleteReplicationsByCollection(collection string) error {
	ret := _m.Called(collection)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationsByCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(collection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockreplicationFSM_DeleteReplicationsByCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplicationsByCollection'
type MockreplicationFSM_DeleteReplicationsByCollection_Call struct {
	*mock.Call
}

// DeleteReplicationsByCollection is a helper method to define mock.On call
//   - collection string
func (_e *MockreplicationFSM_Expecter) DeleteReplicationsByCollection(collection interface{}) *MockreplicationFSM_DeleteReplicationsByCollection_Call {
	return &MockreplicationFSM_DeleteReplicationsByCollection_Call{Call: _e.mock.On("DeleteReplicationsByCollection", collection)}
}

func (_c *MockreplicationFSM_DeleteReplicationsByCollection_Call) Run(run func(collection string)) *MockreplicationFSM_DeleteReplicationsByCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockreplicationFSM_DeleteReplicationsByCollection_Call) Return(_a0 error) *MockreplicationFSM_DeleteReplicationsByCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockreplicationFSM_DeleteReplicationsByCollection_Call) RunAndReturn(run func(string) error) *MockreplicationFSM_DeleteReplicationsByCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReplicationsByTenants provides a mock function with given fields: collection, tenants
func (_m *MockreplicationFSM) DeleteReplicationsByTenants(collection string, tenants []string) error {
	ret := _m.Called(collection, tenants)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationsByTenants")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(collection, tenants)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockreplicationFSM_DeleteReplicationsByTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReplicationsByTenants'
type MockreplicationFSM_DeleteReplicationsByTenants_Call struct {
	*mock.Call
}

// DeleteReplicationsByTenants is a helper method to define mock.On call
//   - collection string
//   - tenants []string
func (_e *MockreplicationFSM_Expecter) DeleteReplicationsByTenants(collection interface{}, tenants interface{}) *MockreplicationFSM_DeleteReplicationsByTenants_Call {
	return &MockreplicationFSM_DeleteReplicationsByTenants_Call{Call: _e.mock.On("DeleteReplicationsByTenants", collection, tenants)}
}

func (_c *MockreplicationFSM_DeleteReplicationsByTenants_Call) Run(run func(collection string, tenants []string)) *MockreplicationFSM_DeleteReplicationsByTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockreplicationFSM_DeleteReplicationsByTenants_Call) Return(_a0 error) *MockreplicationFSM_DeleteReplicationsByTenants_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockreplicationFSM_DeleteReplicationsByTenants_Call) RunAndReturn(run func(string, []string) error) *MockreplicationFSM_DeleteReplicationsByTenants_Call {
	_c.Call.Return(run)
	return _c
}

// HasOngoingReplication provides a mock function with given fields: collection, shard, replica
func (_m *MockreplicationFSM) HasOngoingReplication(collection string, shard string, replica string) bool {
	ret := _m.Called(collection, shard, replica)

	if len(ret) == 0 {
		panic("no return value specified for HasOngoingReplication")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(collection, shard, replica)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockreplicationFSM_HasOngoingReplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasOngoingReplication'
type MockreplicationFSM_HasOngoingReplication_Call struct {
	*mock.Call
}

// HasOngoingReplication is a helper method to define mock.On call
//   - collection string
//   - shard string
//   - replica string
func (_e *MockreplicationFSM_Expecter) HasOngoingReplication(collection interface{}, shard interface{}, replica interface{}) *MockreplicationFSM_HasOngoingReplication_Call {
	return &MockreplicationFSM_HasOngoingReplication_Call{Call: _e.mock.On("HasOngoingReplication", collection, shard, replica)}
}

func (_c *MockreplicationFSM_HasOngoingReplication_Call) Run(run func(collection string, shard string, replica string)) *MockreplicationFSM_HasOngoingReplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockreplicationFSM_HasOngoingReplication_Call) Return(_a0 bool) *MockreplicationFSM_HasOngoingReplication_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockreplicationFSM_HasOngoingReplication_Call) RunAndReturn(run func(string, string, string) bool) *MockreplicationFSM_HasOngoingReplication_Call {
	_c.Call.Return(run)
	return _c
}

// SetUnCancellable provides a mock function with given fields: id
func (_m *MockreplicationFSM) SetUnCancellable(id uint64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SetUnCancellable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockreplicationFSM_SetUnCancellable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUnCancellable'
type MockreplicationFSM_SetUnCancellable_Call struct {
	*mock.Call
}

// SetUnCancellable is a helper method to define mock.On call
//   - id uint64
func (_e *MockreplicationFSM_Expecter) SetUnCancellable(id interface{}) *MockreplicationFSM_SetUnCancellable_Call {
	return &MockreplicationFSM_SetUnCancellable_Call{Call: _e.mock.On("SetUnCancellable", id)}
}

func (_c *MockreplicationFSM_SetUnCancellable_Call) Run(run func(id uint64)) *MockreplicationFSM_SetUnCancellable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockreplicationFSM_SetUnCancellable_Call) Return(_a0 error) *MockreplicationFSM_SetUnCancellable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockreplicationFSM_SetUnCancellable_Call) RunAndReturn(run func(uint64) error) *MockreplicationFSM_SetUnCancellable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockreplicationFSM creates a new instance of MockreplicationFSM. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockreplicationFSM(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockreplicationFSM {
	mock := &MockreplicationFSM{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
