//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package schema

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/weaviate/weaviate/entities/models"
)

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

type MockParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockParser) EXPECT() *MockParser_Expecter {
	return &MockParser_Expecter{mock: &_m.Mock}
}

// ParseClass provides a mock function with given fields: class
func (_m *MockParser) ParseClass(class *models.Class) error {
	ret := _m.Called(class)

	if len(ret) == 0 {
		panic("no return value specified for ParseClass")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Class) error); ok {
		r0 = rf(class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockParser_ParseClass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseClass'
type MockParser_ParseClass_Call struct {
	*mock.Call
}

// ParseClass is a helper method to define mock.On call
//   - class *models.Class
func (_e *MockParser_Expecter) ParseClass(class interface{}) *MockParser_ParseClass_Call {
	return &MockParser_ParseClass_Call{Call: _e.mock.On("ParseClass", class)}
}

func (_c *MockParser_ParseClass_Call) Run(run func(class *models.Class)) *MockParser_ParseClass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class))
	})
	return _c
}

func (_c *MockParser_ParseClass_Call) Return(_a0 error) *MockParser_ParseClass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockParser_ParseClass_Call) RunAndReturn(run func(*models.Class) error) *MockParser_ParseClass_Call {
	_c.Call.Return(run)
	return _c
}

// ParseClassUpdate provides a mock function with given fields: class, update
func (_m *MockParser) ParseClassUpdate(class *models.Class, update *models.Class) (*models.Class, error) {
	ret := _m.Called(class, update)

	if len(ret) == 0 {
		panic("no return value specified for ParseClassUpdate")
	}

	var r0 *models.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Class, *models.Class) (*models.Class, error)); ok {
		return rf(class, update)
	}
	if rf, ok := ret.Get(0).(func(*models.Class, *models.Class) *models.Class); ok {
		r0 = rf(class, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Class, *models.Class) error); ok {
		r1 = rf(class, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockParser_ParseClassUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseClassUpdate'
type MockParser_ParseClassUpdate_Call struct {
	*mock.Call
}

// ParseClassUpdate is a helper method to define mock.On call
//   - class *models.Class
//   - update *models.Class
func (_e *MockParser_Expecter) ParseClassUpdate(class interface{}, update interface{}) *MockParser_ParseClassUpdate_Call {
	return &MockParser_ParseClassUpdate_Call{Call: _e.mock.On("ParseClassUpdate", class, update)}
}

func (_c *MockParser_ParseClassUpdate_Call) Run(run func(class *models.Class, update *models.Class)) *MockParser_ParseClassUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Class), args[1].(*models.Class))
	})
	return _c
}

func (_c *MockParser_ParseClassUpdate_Call) Return(_a0 *models.Class, _a1 error) *MockParser_ParseClassUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockParser_ParseClassUpdate_Call) RunAndReturn(run func(*models.Class, *models.Class) (*models.Class, error)) *MockParser_ParseClassUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
