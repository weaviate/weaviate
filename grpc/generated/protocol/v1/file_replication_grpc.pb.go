// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileReplicationService_PauseFileActivity_FullMethodName  = "/weaviate.v1.FileReplicationService/PauseFileActivity"
	FileReplicationService_ResumeFileActivity_FullMethodName = "/weaviate.v1.FileReplicationService/ResumeFileActivity"
	FileReplicationService_ListFiles_FullMethodName          = "/weaviate.v1.FileReplicationService/ListFiles"
	FileReplicationService_GetFileMetadata_FullMethodName    = "/weaviate.v1.FileReplicationService/GetFileMetadata"
	FileReplicationService_GetFile_FullMethodName            = "/weaviate.v1.FileReplicationService/GetFile"
)

// FileReplicationServiceClient is the client API for FileReplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileReplicationServiceClient interface {
	PauseFileActivity(ctx context.Context, in *PauseFileActivityRequest, opts ...grpc.CallOption) (*PauseFileActivityResponse, error)
	ResumeFileActivity(ctx context.Context, in *ResumeFileActivityRequest, opts ...grpc.CallOption) (*ResumeFileActivityResponse, error)
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	GetFileMetadata(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetFileMetadataRequest, FileMetadata], error)
	GetFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetFileRequest, FileChunk], error)
}

type fileReplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileReplicationServiceClient(cc grpc.ClientConnInterface) FileReplicationServiceClient {
	return &fileReplicationServiceClient{cc}
}

func (c *fileReplicationServiceClient) PauseFileActivity(ctx context.Context, in *PauseFileActivityRequest, opts ...grpc.CallOption) (*PauseFileActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseFileActivityResponse)
	err := c.cc.Invoke(ctx, FileReplicationService_PauseFileActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicationServiceClient) ResumeFileActivity(ctx context.Context, in *ResumeFileActivityRequest, opts ...grpc.CallOption) (*ResumeFileActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeFileActivityResponse)
	err := c.cc.Invoke(ctx, FileReplicationService_ResumeFileActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicationServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, FileReplicationService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileReplicationServiceClient) GetFileMetadata(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetFileMetadataRequest, FileMetadata], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileReplicationService_ServiceDesc.Streams[0], FileReplicationService_GetFileMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileMetadataRequest, FileMetadata]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileReplicationService_GetFileMetadataClient = grpc.BidiStreamingClient[GetFileMetadataRequest, FileMetadata]

func (c *fileReplicationServiceClient) GetFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetFileRequest, FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileReplicationService_ServiceDesc.Streams[1], FileReplicationService_GetFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFileRequest, FileChunk]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileReplicationService_GetFileClient = grpc.BidiStreamingClient[GetFileRequest, FileChunk]

// FileReplicationServiceServer is the server API for FileReplicationService service.
// All implementations must embed UnimplementedFileReplicationServiceServer
// for forward compatibility.
type FileReplicationServiceServer interface {
	PauseFileActivity(context.Context, *PauseFileActivityRequest) (*PauseFileActivityResponse, error)
	ResumeFileActivity(context.Context, *ResumeFileActivityRequest) (*ResumeFileActivityResponse, error)
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	GetFileMetadata(grpc.BidiStreamingServer[GetFileMetadataRequest, FileMetadata]) error
	GetFile(grpc.BidiStreamingServer[GetFileRequest, FileChunk]) error
	mustEmbedUnimplementedFileReplicationServiceServer()
}

// UnimplementedFileReplicationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileReplicationServiceServer struct{}

func (UnimplementedFileReplicationServiceServer) PauseFileActivity(context.Context, *PauseFileActivityRequest) (*PauseFileActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseFileActivity not implemented")
}
func (UnimplementedFileReplicationServiceServer) ResumeFileActivity(context.Context, *ResumeFileActivityRequest) (*ResumeFileActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeFileActivity not implemented")
}
func (UnimplementedFileReplicationServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFileReplicationServiceServer) GetFileMetadata(grpc.BidiStreamingServer[GetFileMetadataRequest, FileMetadata]) error {
	return status.Errorf(codes.Unimplemented, "method GetFileMetadata not implemented")
}
func (UnimplementedFileReplicationServiceServer) GetFile(grpc.BidiStreamingServer[GetFileRequest, FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileReplicationServiceServer) mustEmbedUnimplementedFileReplicationServiceServer() {
}
func (UnimplementedFileReplicationServiceServer) testEmbeddedByValue() {}

// UnsafeFileReplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileReplicationServiceServer will
// result in compilation errors.
type UnsafeFileReplicationServiceServer interface {
	mustEmbedUnimplementedFileReplicationServiceServer()
}

func RegisterFileReplicationServiceServer(s grpc.ServiceRegistrar, srv FileReplicationServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileReplicationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileReplicationService_ServiceDesc, srv)
}

func _FileReplicationService_PauseFileActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseFileActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicationServiceServer).PauseFileActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicationService_PauseFileActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicationServiceServer).PauseFileActivity(ctx, req.(*PauseFileActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicationService_ResumeFileActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeFileActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicationServiceServer).ResumeFileActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicationService_ResumeFileActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicationServiceServer).ResumeFileActivity(ctx, req.(*ResumeFileActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicationService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileReplicationServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileReplicationService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileReplicationServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileReplicationService_GetFileMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileReplicationServiceServer).GetFileMetadata(&grpc.GenericServerStream[GetFileMetadataRequest, FileMetadata]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileReplicationService_GetFileMetadataServer = grpc.BidiStreamingServer[GetFileMetadataRequest, FileMetadata]

func _FileReplicationService_GetFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileReplicationServiceServer).GetFile(&grpc.GenericServerStream[GetFileRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileReplicationService_GetFileServer = grpc.BidiStreamingServer[GetFileRequest, FileChunk]

// FileReplicationService_ServiceDesc is the grpc.ServiceDesc for FileReplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileReplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weaviate.v1.FileReplicationService",
	HandlerType: (*FileReplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PauseFileActivity",
			Handler:    _FileReplicationService_PauseFileActivity_Handler,
		},
		{
			MethodName: "ResumeFileActivity",
			Handler:    _FileReplicationService_ResumeFileActivity_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _FileReplicationService_ListFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileMetadata",
			Handler:       _FileReplicationService_GetFileMetadata_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetFile",
			Handler:       _FileReplicationService_GetFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/file_replication.proto",
}
