// Code generated by protoc-gen-go. DO NOT EDIT.

package protocol

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CombinationMethod int32

const (
	CombinationMethod_COMBINATION_METHOD_UNSPECIFIED         CombinationMethod = 0
	CombinationMethod_COMBINATION_METHOD_TYPE_SUM            CombinationMethod = 1
	CombinationMethod_COMBINATION_METHOD_TYPE_MIN            CombinationMethod = 2
	CombinationMethod_COMBINATION_METHOD_TYPE_AVERAGE        CombinationMethod = 3
	CombinationMethod_COMBINATION_METHOD_TYPE_RELATIVE_SCORE CombinationMethod = 4
	CombinationMethod_COMBINATION_METHOD_TYPE_MANUAL         CombinationMethod = 5
)

// Enum value maps for CombinationMethod.
var (
	CombinationMethod_name = map[int32]string{
		0: "COMBINATION_METHOD_UNSPECIFIED",
		1: "COMBINATION_METHOD_TYPE_SUM",
		2: "COMBINATION_METHOD_TYPE_MIN",
		3: "COMBINATION_METHOD_TYPE_AVERAGE",
		4: "COMBINATION_METHOD_TYPE_RELATIVE_SCORE",
		5: "COMBINATION_METHOD_TYPE_MANUAL",
	}
	CombinationMethod_value = map[string]int32{
		"COMBINATION_METHOD_UNSPECIFIED":         0,
		"COMBINATION_METHOD_TYPE_SUM":            1,
		"COMBINATION_METHOD_TYPE_MIN":            2,
		"COMBINATION_METHOD_TYPE_AVERAGE":        3,
		"COMBINATION_METHOD_TYPE_RELATIVE_SCORE": 4,
		"COMBINATION_METHOD_TYPE_MANUAL":         5,
	}
)

func (x CombinationMethod) Enum() *CombinationMethod {
	p := new(CombinationMethod)
	*p = x
	return p
}

func (x CombinationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CombinationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_base_search_proto_enumTypes[0].Descriptor()
}

func (CombinationMethod) Type() protoreflect.EnumType {
	return &file_v1_base_search_proto_enumTypes[0]
}

func (x CombinationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CombinationMethod.Descriptor instead.
func (CombinationMethod) EnumDescriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{0}
}

type Hybrid_FusionType int32

const (
	Hybrid_FUSION_TYPE_UNSPECIFIED    Hybrid_FusionType = 0
	Hybrid_FUSION_TYPE_RANKED         Hybrid_FusionType = 1
	Hybrid_FUSION_TYPE_RELATIVE_SCORE Hybrid_FusionType = 2
)

// Enum value maps for Hybrid_FusionType.
var (
	Hybrid_FusionType_name = map[int32]string{
		0: "FUSION_TYPE_UNSPECIFIED",
		1: "FUSION_TYPE_RANKED",
		2: "FUSION_TYPE_RELATIVE_SCORE",
	}
	Hybrid_FusionType_value = map[string]int32{
		"FUSION_TYPE_UNSPECIFIED":    0,
		"FUSION_TYPE_RANKED":         1,
		"FUSION_TYPE_RELATIVE_SCORE": 2,
	}
)

func (x Hybrid_FusionType) Enum() *Hybrid_FusionType {
	p := new(Hybrid_FusionType)
	*p = x
	return p
}

func (x Hybrid_FusionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hybrid_FusionType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_base_search_proto_enumTypes[1].Descriptor()
}

func (Hybrid_FusionType) Type() protoreflect.EnumType {
	return &file_v1_base_search_proto_enumTypes[1]
}

func (x Hybrid_FusionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hybrid_FusionType.Descriptor instead.
func (Hybrid_FusionType) EnumDescriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{3, 0}
}

type Hybrid_SearchOperator int32

const (
	Hybrid_SEARCH_OPERATOR_UNSPECIFIED Hybrid_SearchOperator = 0
	Hybrid_SEARCH_OPERATOR_OR          Hybrid_SearchOperator = 1
	Hybrid_SEARCH_OPERATOR_AND         Hybrid_SearchOperator = 2
)

// Enum value maps for Hybrid_SearchOperator.
var (
	Hybrid_SearchOperator_name = map[int32]string{
		0: "SEARCH_OPERATOR_UNSPECIFIED",
		1: "SEARCH_OPERATOR_OR",
		2: "SEARCH_OPERATOR_AND",
	}
	Hybrid_SearchOperator_value = map[string]int32{
		"SEARCH_OPERATOR_UNSPECIFIED": 0,
		"SEARCH_OPERATOR_OR":          1,
		"SEARCH_OPERATOR_AND":         2,
	}
)

func (x Hybrid_SearchOperator) Enum() *Hybrid_SearchOperator {
	p := new(Hybrid_SearchOperator)
	*p = x
	return p
}

func (x Hybrid_SearchOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hybrid_SearchOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_base_search_proto_enumTypes[2].Descriptor()
}

func (Hybrid_SearchOperator) Type() protoreflect.EnumType {
	return &file_v1_base_search_proto_enumTypes[2]
}

func (x Hybrid_SearchOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hybrid_SearchOperator.Descriptor instead.
func (Hybrid_SearchOperator) EnumDescriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{3, 1}
}

type BM25_SearchOperator int32

const (
	BM25_SEARCH_OPERATOR_UNSPECIFIED BM25_SearchOperator = 0
	BM25_SEARCH_OPERATOR_OR          BM25_SearchOperator = 1
	BM25_SEARCH_OPERATOR_AND         BM25_SearchOperator = 2
)

// Enum value maps for BM25_SearchOperator.
var (
	BM25_SearchOperator_name = map[int32]string{
		0: "SEARCH_OPERATOR_UNSPECIFIED",
		1: "SEARCH_OPERATOR_OR",
		2: "SEARCH_OPERATOR_AND",
	}
	BM25_SearchOperator_value = map[string]int32{
		"SEARCH_OPERATOR_UNSPECIFIED": 0,
		"SEARCH_OPERATOR_OR":          1,
		"SEARCH_OPERATOR_AND":         2,
	}
)

func (x BM25_SearchOperator) Enum() *BM25_SearchOperator {
	p := new(BM25_SearchOperator)
	*p = x
	return p
}

func (x BM25_SearchOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BM25_SearchOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_base_search_proto_enumTypes[3].Descriptor()
}

func (BM25_SearchOperator) Type() protoreflect.EnumType {
	return &file_v1_base_search_proto_enumTypes[3]
}

func (x BM25_SearchOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BM25_SearchOperator.Descriptor instead.
func (BM25_SearchOperator) EnumDescriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{13, 0}
}

type WeightsForTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target string  `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Weight float32 `protobuf:"fixed32,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *WeightsForTarget) Reset() {
	*x = WeightsForTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightsForTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightsForTarget) ProtoMessage() {}

func (x *WeightsForTarget) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightsForTarget.ProtoReflect.Descriptor instead.
func (*WeightsForTarget) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{0}
}

func (x *WeightsForTarget) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *WeightsForTarget) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type Targets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetVectors []string          `protobuf:"bytes,1,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"`
	Combination   CombinationMethod `protobuf:"varint,2,opt,name=combination,proto3,enum=weaviate.v1.CombinationMethod" json:"combination,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	Weights           map[string]float32  `protobuf:"bytes,3,rep,name=weights,proto3" json:"weights,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` // deprecated in 1.26.2 - use weights_for_targets
	WeightsForTargets []*WeightsForTarget `protobuf:"bytes,4,rep,name=weights_for_targets,json=weightsForTargets,proto3" json:"weights_for_targets,omitempty"`
}

func (x *Targets) Reset() {
	*x = Targets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Targets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Targets) ProtoMessage() {}

func (x *Targets) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Targets.ProtoReflect.Descriptor instead.
func (*Targets) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{1}
}

func (x *Targets) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *Targets) GetCombination() CombinationMethod {
	if x != nil {
		return x.Combination
	}
	return CombinationMethod_COMBINATION_METHOD_UNSPECIFIED
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *Targets) GetWeights() map[string]float32 {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *Targets) GetWeightsForTargets() []*WeightsForTarget {
	if x != nil {
		return x.WeightsForTargets
	}
	return nil
}

type VectorForTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	VectorBytes []byte     `protobuf:"bytes,2,opt,name=vector_bytes,json=vectorBytes,proto3" json:"vector_bytes,omitempty"` // deprecated in 1.29.0 - use vectors
	Vectors     []*Vectors `protobuf:"bytes,3,rep,name=vectors,proto3" json:"vectors,omitempty"`
}

func (x *VectorForTarget) Reset() {
	*x = VectorForTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorForTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorForTarget) ProtoMessage() {}

func (x *VectorForTarget) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorForTarget.ProtoReflect.Descriptor instead.
func (*VectorForTarget) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{2}
}

func (x *VectorForTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *VectorForTarget) GetVectorBytes() []byte {
	if x != nil {
		return x.VectorBytes
	}
	return nil
}

func (x *VectorForTarget) GetVectors() []*Vectors {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type Hybrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Properties []string `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	//
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	Vector     []float32         `protobuf:"fixed32,3,rep,packed,name=vector,proto3" json:"vector,omitempty"` // will be removed in the future, use vectors
	Alpha      float32           `protobuf:"fixed32,4,opt,name=alpha,proto3" json:"alpha,omitempty"`
	FusionType Hybrid_FusionType `protobuf:"varint,5,opt,name=fusion_type,json=fusionType,proto3,enum=weaviate.v1.Hybrid_FusionType" json:"fusion_type,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	VectorBytes []byte `protobuf:"bytes,6,opt,name=vector_bytes,json=vectorBytes,proto3" json:"vector_bytes,omitempty"` // deprecated in 1.29.0 - use vectors
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors      []string               `protobuf:"bytes,7,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	NearText           *NearTextSearch        `protobuf:"bytes,8,opt,name=near_text,json=nearText,proto3" json:"near_text,omitempty"`                // targets in msg is ignored and should not be set for hybrid
	NearVector         *NearVector            `protobuf:"bytes,9,opt,name=near_vector,json=nearVector,proto3" json:"near_vector,omitempty"`          // same as above. Use the target vector in the hybrid message
	Targets            *Targets               `protobuf:"bytes,10,opt,name=targets,proto3" json:"targets,omitempty"`
	SearchOperator     *Hybrid_SearchOperator `protobuf:"varint,11,opt,name=search_operator,json=searchOperator,proto3,enum=weaviate.v1.Hybrid_SearchOperator,oneof" json:"search_operator,omitempty"`
	MinimumShouldMatch *int32                 `protobuf:"varint,12,opt,name=minimum_should_match,json=minimumShouldMatch,proto3,oneof" json:"minimum_should_match,omitempty"`
	// only vector distance, but keep it extendable
	//
	// Types that are assignable to Threshold:
	//
	//	*Hybrid_VectorDistance
	Threshold isHybrid_Threshold `protobuf_oneof:"threshold"`
	Vectors   []*Vectors         `protobuf:"bytes,21,rep,name=vectors,proto3" json:"vectors,omitempty"`
}

func (x *Hybrid) Reset() {
	*x = Hybrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hybrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hybrid) ProtoMessage() {}

func (x *Hybrid) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hybrid.ProtoReflect.Descriptor instead.
func (*Hybrid) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{3}
}

func (x *Hybrid) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Hybrid) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *Hybrid) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *Hybrid) GetAlpha() float32 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *Hybrid) GetFusionType() Hybrid_FusionType {
	if x != nil {
		return x.FusionType
	}
	return Hybrid_FUSION_TYPE_UNSPECIFIED
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *Hybrid) GetVectorBytes() []byte {
	if x != nil {
		return x.VectorBytes
	}
	return nil
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *Hybrid) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *Hybrid) GetNearText() *NearTextSearch {
	if x != nil {
		return x.NearText
	}
	return nil
}

func (x *Hybrid) GetNearVector() *NearVector {
	if x != nil {
		return x.NearVector
	}
	return nil
}

func (x *Hybrid) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Hybrid) GetSearchOperator() Hybrid_SearchOperator {
	if x != nil && x.SearchOperator != nil {
		return *x.SearchOperator
	}
	return Hybrid_SEARCH_OPERATOR_UNSPECIFIED
}

func (x *Hybrid) GetMinimumShouldMatch() int32 {
	if x != nil && x.MinimumShouldMatch != nil {
		return *x.MinimumShouldMatch
	}
	return 0
}

func (m *Hybrid) GetThreshold() isHybrid_Threshold {
	if m != nil {
		return m.Threshold
	}
	return nil
}

func (x *Hybrid) GetVectorDistance() float32 {
	if x, ok := x.GetThreshold().(*Hybrid_VectorDistance); ok {
		return x.VectorDistance
	}
	return 0
}

func (x *Hybrid) GetVectors() []*Vectors {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type isHybrid_Threshold interface {
	isHybrid_Threshold()
}

type Hybrid_VectorDistance struct {
	VectorDistance float32 `protobuf:"fixed32,20,opt,name=vector_distance,json=vectorDistance,proto3,oneof"`
}

func (*Hybrid_VectorDistance) isHybrid_Threshold() {}

type NearVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	//
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	Vector    []float32 `protobuf:"fixed32,1,rep,packed,name=vector,proto3" json:"vector,omitempty"` // will be removed in the future, use vectors
	Certainty *float64  `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64  `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	VectorBytes []byte `protobuf:"bytes,4,opt,name=vector_bytes,json=vectorBytes,proto3" json:"vector_bytes,omitempty"` // deprecated in 1.29.0 - use vectors
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,5,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,6,opt,name=targets,proto3" json:"targets,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	VectorPerTarget  map[string][]byte  `protobuf:"bytes,7,rep,name=vector_per_target,json=vectorPerTarget,proto3" json:"vector_per_target,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // deprecated in 1.26.2 - use vector_for_targets
	VectorForTargets []*VectorForTarget `protobuf:"bytes,8,rep,name=vector_for_targets,json=vectorForTargets,proto3" json:"vector_for_targets,omitempty"`
	Vectors          []*Vectors         `protobuf:"bytes,9,rep,name=vectors,proto3" json:"vectors,omitempty"`
}

func (x *NearVector) Reset() {
	*x = NearVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearVector) ProtoMessage() {}

func (x *NearVector) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearVector.ProtoReflect.Descriptor instead.
func (*NearVector) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearVector) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *NearVector) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearVector) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearVector) GetVectorBytes() []byte {
	if x != nil {
		return x.VectorBytes
	}
	return nil
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearVector) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearVector) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearVector) GetVectorPerTarget() map[string][]byte {
	if x != nil {
		return x.VectorPerTarget
	}
	return nil
}

func (x *NearVector) GetVectorForTargets() []*VectorForTarget {
	if x != nil {
		return x.VectorForTargets
	}
	return nil
}

func (x *NearVector) GetVectors() []*Vectors {
	if x != nil {
		return x.Vectors
	}
	return nil
}

type NearObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Certainty *float64 `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,4,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,5,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearObject) Reset() {
	*x = NearObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearObject) ProtoMessage() {}

func (x *NearObject) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearObject.ProtoReflect.Descriptor instead.
func (*NearObject) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{5}
}

func (x *NearObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NearObject) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearObject) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearObject) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearObject) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type NearTextSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	Query     []string             `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	Certainty *float64             `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64             `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	MoveTo    *NearTextSearch_Move `protobuf:"bytes,4,opt,name=move_to,json=moveTo,proto3,oneof" json:"move_to,omitempty"`
	MoveAway  *NearTextSearch_Move `protobuf:"bytes,5,opt,name=move_away,json=moveAway,proto3,oneof" json:"move_away,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,6,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,7,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearTextSearch) Reset() {
	*x = NearTextSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearTextSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearTextSearch) ProtoMessage() {}

func (x *NearTextSearch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearTextSearch.ProtoReflect.Descriptor instead.
func (*NearTextSearch) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{6}
}

func (x *NearTextSearch) GetQuery() []string {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *NearTextSearch) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearTextSearch) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

func (x *NearTextSearch) GetMoveTo() *NearTextSearch_Move {
	if x != nil {
		return x.MoveTo
	}
	return nil
}

func (x *NearTextSearch) GetMoveAway() *NearTextSearch_Move {
	if x != nil {
		return x.MoveAway
	}
	return nil
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearTextSearch) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearTextSearch) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type NearImageSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image     string   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Certainty *float64 `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,4,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,5,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearImageSearch) Reset() {
	*x = NearImageSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearImageSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearImageSearch) ProtoMessage() {}

func (x *NearImageSearch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearImageSearch.ProtoReflect.Descriptor instead.
func (*NearImageSearch) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{7}
}

func (x *NearImageSearch) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *NearImageSearch) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearImageSearch) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearImageSearch) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearImageSearch) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type NearAudioSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Audio     string   `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	Certainty *float64 `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,4,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,5,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearAudioSearch) Reset() {
	*x = NearAudioSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearAudioSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearAudioSearch) ProtoMessage() {}

func (x *NearAudioSearch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearAudioSearch.ProtoReflect.Descriptor instead.
func (*NearAudioSearch) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{8}
}

func (x *NearAudioSearch) GetAudio() string {
	if x != nil {
		return x.Audio
	}
	return ""
}

func (x *NearAudioSearch) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearAudioSearch) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearAudioSearch) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearAudioSearch) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type NearVideoSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Video     string   `protobuf:"bytes,1,opt,name=video,proto3" json:"video,omitempty"`
	Certainty *float64 `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,4,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,5,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearVideoSearch) Reset() {
	*x = NearVideoSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearVideoSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearVideoSearch) ProtoMessage() {}

func (x *NearVideoSearch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearVideoSearch.ProtoReflect.Descriptor instead.
func (*NearVideoSearch) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{9}
}

func (x *NearVideoSearch) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *NearVideoSearch) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearVideoSearch) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearVideoSearch) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearVideoSearch) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type NearDepthSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth     string   `protobuf:"bytes,1,opt,name=depth,proto3" json:"depth,omitempty"`
	Certainty *float64 `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,4,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,5,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearDepthSearch) Reset() {
	*x = NearDepthSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearDepthSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearDepthSearch) ProtoMessage() {}

func (x *NearDepthSearch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearDepthSearch.ProtoReflect.Descriptor instead.
func (*NearDepthSearch) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{10}
}

func (x *NearDepthSearch) GetDepth() string {
	if x != nil {
		return x.Depth
	}
	return ""
}

func (x *NearDepthSearch) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearDepthSearch) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearDepthSearch) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearDepthSearch) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type NearThermalSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thermal   string   `protobuf:"bytes,1,opt,name=thermal,proto3" json:"thermal,omitempty"`
	Certainty *float64 `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,4,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,5,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearThermalSearch) Reset() {
	*x = NearThermalSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearThermalSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearThermalSearch) ProtoMessage() {}

func (x *NearThermalSearch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearThermalSearch.ProtoReflect.Descriptor instead.
func (*NearThermalSearch) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{11}
}

func (x *NearThermalSearch) GetThermal() string {
	if x != nil {
		return x.Thermal
	}
	return ""
}

func (x *NearThermalSearch) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearThermalSearch) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearThermalSearch) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearThermalSearch) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type NearIMUSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imu       string   `protobuf:"bytes,1,opt,name=imu,proto3" json:"imu,omitempty"`
	Certainty *float64 `protobuf:"fixed64,2,opt,name=certainty,proto3,oneof" json:"certainty,omitempty"`
	Distance  *float64 `protobuf:"fixed64,3,opt,name=distance,proto3,oneof" json:"distance,omitempty"`
	// Deprecated: Marked as deprecated in v1/base_search.proto.
	TargetVectors []string `protobuf:"bytes,4,rep,name=target_vectors,json=targetVectors,proto3" json:"target_vectors,omitempty"` // deprecated in 1.26 - use targets
	Targets       *Targets `protobuf:"bytes,5,opt,name=targets,proto3" json:"targets,omitempty"`
}

func (x *NearIMUSearch) Reset() {
	*x = NearIMUSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearIMUSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearIMUSearch) ProtoMessage() {}

func (x *NearIMUSearch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearIMUSearch.ProtoReflect.Descriptor instead.
func (*NearIMUSearch) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{12}
}

func (x *NearIMUSearch) GetImu() string {
	if x != nil {
		return x.Imu
	}
	return ""
}

func (x *NearIMUSearch) GetCertainty() float64 {
	if x != nil && x.Certainty != nil {
		return *x.Certainty
	}
	return 0
}

func (x *NearIMUSearch) GetDistance() float64 {
	if x != nil && x.Distance != nil {
		return *x.Distance
	}
	return 0
}

// Deprecated: Marked as deprecated in v1/base_search.proto.
func (x *NearIMUSearch) GetTargetVectors() []string {
	if x != nil {
		return x.TargetVectors
	}
	return nil
}

func (x *NearIMUSearch) GetTargets() *Targets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type BM25 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query              string               `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Properties         []string             `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	SearchOperator     *BM25_SearchOperator `protobuf:"varint,3,opt,name=search_operator,json=searchOperator,proto3,enum=weaviate.v1.BM25_SearchOperator,oneof" json:"search_operator,omitempty"`
	MinimumShouldMatch *int32               `protobuf:"varint,4,opt,name=minimum_should_match,json=minimumShouldMatch,proto3,oneof" json:"minimum_should_match,omitempty"`
}

func (x *BM25) Reset() {
	*x = BM25{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BM25) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BM25) ProtoMessage() {}

func (x *BM25) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BM25.ProtoReflect.Descriptor instead.
func (*BM25) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{13}
}

func (x *BM25) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *BM25) GetProperties() []string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *BM25) GetSearchOperator() BM25_SearchOperator {
	if x != nil && x.SearchOperator != nil {
		return *x.SearchOperator
	}
	return BM25_SEARCH_OPERATOR_UNSPECIFIED
}

func (x *BM25) GetMinimumShouldMatch() int32 {
	if x != nil && x.MinimumShouldMatch != nil {
		return *x.MinimumShouldMatch
	}
	return 0
}

type NearTextSearch_Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force    float32  `protobuf:"fixed32,1,opt,name=force,proto3" json:"force,omitempty"`
	Concepts []string `protobuf:"bytes,2,rep,name=concepts,proto3" json:"concepts,omitempty"`
	Uuids    []string `protobuf:"bytes,3,rep,name=uuids,proto3" json:"uuids,omitempty"`
}

func (x *NearTextSearch_Move) Reset() {
	*x = NearTextSearch_Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_base_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearTextSearch_Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearTextSearch_Move) ProtoMessage() {}

func (x *NearTextSearch_Move) ProtoReflect() protoreflect.Message {
	mi := &file_v1_base_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearTextSearch_Move.ProtoReflect.Descriptor instead.
func (*NearTextSearch_Move) Descriptor() ([]byte, []int) {
	return file_v1_base_search_proto_rawDescGZIP(), []int{6, 0}
}

func (x *NearTextSearch_Move) GetForce() float32 {
	if x != nil {
		return x.Force
	}
	return 0
}

func (x *NearTextSearch_Move) GetConcepts() []string {
	if x != nil {
		return x.Concepts
	}
	return nil
}

func (x *NearTextSearch_Move) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

var File_v1_base_search_proto protoreflect.FileDescriptor

var file_v1_base_search_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x0d, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x42, 0x0a, 0x10, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46, 0x6f, 0x72,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xbe, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77,
	0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x13,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65, 0x61, 0x76,
	0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x46,
	0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x8c, 0x07, 0x0a, 0x06, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x3f, 0x0a, 0x0b, 0x66, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x2e, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6e,
	0x65, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x61,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x08, 0x6e, 0x65, 0x61,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x65, 0x61,
	0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x50, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x0e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x02, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x0a, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53,
	0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x22, 0x62, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x22, 0xa7, 0x04, 0x0a, 0x0a, 0x4e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x21, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x11, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x61, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x10, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a,
	0x42, 0x0a, 0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x0a, 0x4e, 0x65, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xce, 0x03, 0x0a, 0x0e, 0x4e, 0x65, 0x61, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x02, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x09, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x77, 0x61,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x77, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x1a, 0x4e, 0x0a, 0x04, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x75,
	0x69, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x61,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe1, 0x01, 0x0a,
	0x0f, 0x4e, 0x65, 0x61, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x61, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61,
	0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x61, 0x72, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x61,
	0x72, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x61, 0x72, 0x49, 0x4d, 0x55, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6d, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x6d, 0x75, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x72,
	0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69,
	0x6e, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0xd4, 0x02, 0x0a, 0x04, 0x42, 0x4d, 0x32, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x4d, 0x32, 0x35, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x22, 0x62, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2a, 0xee, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x4d, 0x42,
	0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x42, 0x74, 0x0a, 0x23, 0x69, 0x6f, 0x2e, 0x77,
	0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x42,
	0x17, 0x57, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x65,
	0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_base_search_proto_rawDescOnce sync.Once
	file_v1_base_search_proto_rawDescData = file_v1_base_search_proto_rawDesc
)

func file_v1_base_search_proto_rawDescGZIP() []byte {
	file_v1_base_search_proto_rawDescOnce.Do(func() {
		file_v1_base_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_base_search_proto_rawDescData)
	})
	return file_v1_base_search_proto_rawDescData
}

var (
	file_v1_base_search_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
	file_v1_base_search_proto_msgTypes  = make([]protoimpl.MessageInfo, 17)
	file_v1_base_search_proto_goTypes   = []interface{}{
		(CombinationMethod)(0),      // 0: weaviate.v1.CombinationMethod
		(Hybrid_FusionType)(0),      // 1: weaviate.v1.Hybrid.FusionType
		(Hybrid_SearchOperator)(0),  // 2: weaviate.v1.Hybrid.SearchOperator
		(BM25_SearchOperator)(0),    // 3: weaviate.v1.BM25.SearchOperator
		(*WeightsForTarget)(nil),    // 4: weaviate.v1.WeightsForTarget
		(*Targets)(nil),             // 5: weaviate.v1.Targets
		(*VectorForTarget)(nil),     // 6: weaviate.v1.VectorForTarget
		(*Hybrid)(nil),              // 7: weaviate.v1.Hybrid
		(*NearVector)(nil),          // 8: weaviate.v1.NearVector
		(*NearObject)(nil),          // 9: weaviate.v1.NearObject
		(*NearTextSearch)(nil),      // 10: weaviate.v1.NearTextSearch
		(*NearImageSearch)(nil),     // 11: weaviate.v1.NearImageSearch
		(*NearAudioSearch)(nil),     // 12: weaviate.v1.NearAudioSearch
		(*NearVideoSearch)(nil),     // 13: weaviate.v1.NearVideoSearch
		(*NearDepthSearch)(nil),     // 14: weaviate.v1.NearDepthSearch
		(*NearThermalSearch)(nil),   // 15: weaviate.v1.NearThermalSearch
		(*NearIMUSearch)(nil),       // 16: weaviate.v1.NearIMUSearch
		(*BM25)(nil),                // 17: weaviate.v1.BM25
		nil,                         // 18: weaviate.v1.Targets.WeightsEntry
		nil,                         // 19: weaviate.v1.NearVector.VectorPerTargetEntry
		(*NearTextSearch_Move)(nil), // 20: weaviate.v1.NearTextSearch.Move
		(*Vectors)(nil),             // 21: weaviate.v1.Vectors
	}
)

var file_v1_base_search_proto_depIdxs = []int32{
	0,  // 0: weaviate.v1.Targets.combination:type_name -> weaviate.v1.CombinationMethod
	18, // 1: weaviate.v1.Targets.weights:type_name -> weaviate.v1.Targets.WeightsEntry
	4,  // 2: weaviate.v1.Targets.weights_for_targets:type_name -> weaviate.v1.WeightsForTarget
	21, // 3: weaviate.v1.VectorForTarget.vectors:type_name -> weaviate.v1.Vectors
	1,  // 4: weaviate.v1.Hybrid.fusion_type:type_name -> weaviate.v1.Hybrid.FusionType
	10, // 5: weaviate.v1.Hybrid.near_text:type_name -> weaviate.v1.NearTextSearch
	8,  // 6: weaviate.v1.Hybrid.near_vector:type_name -> weaviate.v1.NearVector
	5,  // 7: weaviate.v1.Hybrid.targets:type_name -> weaviate.v1.Targets
	2,  // 8: weaviate.v1.Hybrid.search_operator:type_name -> weaviate.v1.Hybrid.SearchOperator
	21, // 9: weaviate.v1.Hybrid.vectors:type_name -> weaviate.v1.Vectors
	5,  // 10: weaviate.v1.NearVector.targets:type_name -> weaviate.v1.Targets
	19, // 11: weaviate.v1.NearVector.vector_per_target:type_name -> weaviate.v1.NearVector.VectorPerTargetEntry
	6,  // 12: weaviate.v1.NearVector.vector_for_targets:type_name -> weaviate.v1.VectorForTarget
	21, // 13: weaviate.v1.NearVector.vectors:type_name -> weaviate.v1.Vectors
	5,  // 14: weaviate.v1.NearObject.targets:type_name -> weaviate.v1.Targets
	20, // 15: weaviate.v1.NearTextSearch.move_to:type_name -> weaviate.v1.NearTextSearch.Move
	20, // 16: weaviate.v1.NearTextSearch.move_away:type_name -> weaviate.v1.NearTextSearch.Move
	5,  // 17: weaviate.v1.NearTextSearch.targets:type_name -> weaviate.v1.Targets
	5,  // 18: weaviate.v1.NearImageSearch.targets:type_name -> weaviate.v1.Targets
	5,  // 19: weaviate.v1.NearAudioSearch.targets:type_name -> weaviate.v1.Targets
	5,  // 20: weaviate.v1.NearVideoSearch.targets:type_name -> weaviate.v1.Targets
	5,  // 21: weaviate.v1.NearDepthSearch.targets:type_name -> weaviate.v1.Targets
	5,  // 22: weaviate.v1.NearThermalSearch.targets:type_name -> weaviate.v1.Targets
	5,  // 23: weaviate.v1.NearIMUSearch.targets:type_name -> weaviate.v1.Targets
	3,  // 24: weaviate.v1.BM25.search_operator:type_name -> weaviate.v1.BM25.SearchOperator
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_v1_base_search_proto_init() }
func file_v1_base_search_proto_init() {
	if File_v1_base_search_proto != nil {
		return
	}
	file_v1_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_base_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightsForTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Targets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorForTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hybrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearTextSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearImageSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearAudioSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearVideoSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearDepthSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearThermalSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearIMUSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BM25); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_base_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearTextSearch_Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_base_search_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Hybrid_VectorDistance)(nil),
	}
	file_v1_base_search_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_v1_base_search_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_base_search_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_base_search_proto_goTypes,
		DependencyIndexes: file_v1_base_search_proto_depIdxs,
		EnumInfos:         file_v1_base_search_proto_enumTypes,
		MessageInfos:      file_v1_base_search_proto_msgTypes,
	}.Build()
	File_v1_base_search_proto = out.File
	file_v1_base_search_proto_rawDesc = nil
	file_v1_base_search_proto_goTypes = nil
	file_v1_base_search_proto_depIdxs = nil
}
