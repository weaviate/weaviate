//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ReplicaCopier is an autogenerated mock type for the ReplicaCopier type
type ReplicaCopier struct {
	mock.Mock
}

type ReplicaCopier_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicaCopier) EXPECT() *ReplicaCopier_Expecter {
	return &ReplicaCopier_Expecter{mock: &_m.Mock}
}

// CopyReplica provides a mock function with given fields: ctx, sourceNode, sourceCollection, sourceShard
func (_m *ReplicaCopier) CopyReplica(ctx context.Context, sourceNode string, sourceCollection string, sourceShard string) error {
	ret := _m.Called(ctx, sourceNode, sourceCollection, sourceShard)

	if len(ret) == 0 {
		panic("no return value specified for CopyReplica")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, sourceNode, sourceCollection, sourceShard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicaCopier_CopyReplica_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyReplica'
type ReplicaCopier_CopyReplica_Call struct {
	*mock.Call
}

// CopyReplica is a helper method to define mock.On call
//   - ctx context.Context
//   - sourceNode string
//   - sourceCollection string
//   - sourceShard string
func (_e *ReplicaCopier_Expecter) CopyReplica(ctx interface{}, sourceNode interface{}, sourceCollection interface{}, sourceShard interface{}) *ReplicaCopier_CopyReplica_Call {
	return &ReplicaCopier_CopyReplica_Call{Call: _e.mock.On("CopyReplica", ctx, sourceNode, sourceCollection, sourceShard)}
}

func (_c *ReplicaCopier_CopyReplica_Call) Run(run func(ctx context.Context, sourceNode string, sourceCollection string, sourceShard string)) *ReplicaCopier_CopyReplica_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ReplicaCopier_CopyReplica_Call) Return(_a0 error) *ReplicaCopier_CopyReplica_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReplicaCopier_CopyReplica_Call) RunAndReturn(run func(context.Context, string, string, string) error) *ReplicaCopier_CopyReplica_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicaCopier creates a new instance of ReplicaCopier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicaCopier(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicaCopier {
	mock := &ReplicaCopier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
