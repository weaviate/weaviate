//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package types

import (
	mock "github.com/stretchr/testify/mock"
	api "github.com/weaviate/weaviate/cluster/proto/api"
)

// ReplicationDetailsProvider is an autogenerated mock type for the ReplicationDetailsProvider type
type ReplicationDetailsProvider struct {
	mock.Mock
}

type ReplicationDetailsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *ReplicationDetailsProvider) EXPECT() *ReplicationDetailsProvider_Expecter {
	return &ReplicationDetailsProvider_Expecter{mock: &_m.Mock}
}

// GetReplicationDetailsByReplicationId provides a mock function with given fields: id
func (_m *ReplicationDetailsProvider) GetReplicationDetailsByReplicationId(id uint64) (api.ReplicationDetailsResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationDetailsByReplicationId")
	}

	var r0 api.ReplicationDetailsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (api.ReplicationDetailsResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) api.ReplicationDetailsResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(api.ReplicationDetailsResponse)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicationDetailsByReplicationId'
type ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call struct {
	*mock.Call
}

// GetReplicationDetailsByReplicationId is a helper method to define mock.On call
//   - id uint64
func (_e *ReplicationDetailsProvider_Expecter) GetReplicationDetailsByReplicationId(id interface{}) *ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call {
	return &ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call{Call: _e.mock.On("GetReplicationDetailsByReplicationId", id)}
}

func (_c *ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call) Run(run func(id uint64)) *ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call) Return(_a0 api.ReplicationDetailsResponse, _a1 error) *ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call) RunAndReturn(run func(uint64) (api.ReplicationDetailsResponse, error)) *ReplicationDetailsProvider_GetReplicationDetailsByReplicationId_Call {
	_c.Call.Return(run)
	return _c
}

// NewReplicationDetailsProvider creates a new instance of ReplicationDetailsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReplicationDetailsProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReplicationDetailsProvider {
	mock := &ReplicationDetailsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
