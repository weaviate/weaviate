//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package replication

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	replication "github.com/weaviate/weaviate/cluster/replication"
)

// OpProducer is an autogenerated mock type for the OpProducer type
type OpProducer struct {
	mock.Mock
}

type OpProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *OpProducer) EXPECT() *OpProducer_Expecter {
	return &OpProducer_Expecter{mock: &_m.Mock}
}

// Produce provides a mock function with given fields: ctx, out
func (_m *OpProducer) Produce(ctx context.Context, out chan<- replication.ShardReplicationOp) error {
	ret := _m.Called(ctx, out)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- replication.ShardReplicationOp) error); ok {
		r0 = rf(ctx, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpProducer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type OpProducer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - ctx context.Context
//   - out chan<- replication.ShardReplicationOp
func (_e *OpProducer_Expecter) Produce(ctx interface{}, out interface{}) *OpProducer_Produce_Call {
	return &OpProducer_Produce_Call{Call: _e.mock.On("Produce", ctx, out)}
}

func (_c *OpProducer_Produce_Call) Run(run func(ctx context.Context, out chan<- replication.ShardReplicationOp)) *OpProducer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(chan<- replication.ShardReplicationOp))
	})
	return _c
}

func (_c *OpProducer_Produce_Call) Return(_a0 error) *OpProducer_Produce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpProducer_Produce_Call) RunAndReturn(run func(context.Context, chan<- replication.ShardReplicationOp) error) *OpProducer_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpProducer creates a new instance of OpProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpProducer {
	mock := &OpProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
