//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package replication

import (
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Timer is an autogenerated mock type for the Timer type
type Timer struct {
	mock.Mock
}

type Timer_Expecter struct {
	mock *mock.Mock
}

func (_m *Timer) EXPECT() *Timer_Expecter {
	return &Timer_Expecter{mock: &_m.Mock}
}

// AfterFunc provides a mock function with given fields: duration, fn
func (_m *Timer) AfterFunc(duration time.Duration, fn func()) *time.Timer {
	ret := _m.Called(duration, fn)

	if len(ret) == 0 {
		panic("no return value specified for AfterFunc")
	}

	var r0 *time.Timer
	if rf, ok := ret.Get(0).(func(time.Duration, func()) *time.Timer); ok {
		r0 = rf(duration, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Timer)
		}
	}

	return r0
}

// Timer_AfterFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AfterFunc'
type Timer_AfterFunc_Call struct {
	*mock.Call
}

// AfterFunc is a helper method to define mock.On call
//   - duration time.Duration
//   - fn func()
func (_e *Timer_Expecter) AfterFunc(duration interface{}, fn interface{}) *Timer_AfterFunc_Call {
	return &Timer_AfterFunc_Call{Call: _e.mock.On("AfterFunc", duration, fn)}
}

func (_c *Timer_AfterFunc_Call) Run(run func(duration time.Duration, fn func())) *Timer_AfterFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration), args[1].(func()))
	})
	return _c
}

func (_c *Timer_AfterFunc_Call) Return(_a0 *time.Timer) *Timer_AfterFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Timer_AfterFunc_Call) RunAndReturn(run func(time.Duration, func()) *time.Timer) *Timer_AfterFunc_Call {
	_c.Call.Return(run)
	return _c
}

// NewTimer creates a new instance of Timer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Timer {
	mock := &Timer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
