name: weaviate
services:
  weaviate-voter-0:
    build:
      context: .
      dockerfile: Dockerfile
      target: weaviate
    restart: on-failure:0
    ports:
      - "8080:8080"
      - "6060:6060"
      - "50051:50051"
    environment:
      LOG_LEVEL: "info"
      CONTEXTIONARY_URL: contextionary:9999
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: "./data"
      DEFAULT_VECTORIZER_MODULE: text2vec-contextionary
      ENABLE_MODULES: "text2vec-contextionary"
      PROMETHEUS_MONITORING_ENABLED: 'true'
      PROMETHEUS_MONITORING_GROUP_CLASSES: 'true'
      CLUSTER_HOSTNAME: "weaviate-voter-0"
      CLUSTER_JOIN: weaviate-voter-0:7100
      CLUSTER_GOSSIP_BIND_PORT: "7100"
      CLUSTER_DATA_BIND_PORT: "7101"
      ASYNC_INDEXING: ${ASYNC_INDEXING:-false}
      RAFT_BOOTSTRAP_EXPECT: 3
      RAFT_JOIN: "weaviate-voter-0:8300,weaviate-voter-1:8301,weaviate-voter-2:8302"
      # necessary for the metrics tests, some metrics only exist once segments
      # are flushed. If we wait to long the before run is completely in
      # memtables, the after run has some flushed which leads to some metrics
      # diffs in the before and after
      PERSISTENCE_MEMTABLES_FLUSH_IDLE_AFTER_SECONDS: 2
      REPLICATION_ENGINE_MAX_WORKERS: 100
      REPLICA_MOVEMENT_MINIMUM_ASYNC_WAIT: "5s"
      # OpenTelemetry tracing configuration
      OTEL_ENABLED: 'true'
      OTEL_SERVICE_NAME: 'weaviate'
      OTEL_ENVIRONMENT: 'development'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://tempo:4317'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_TRACES_SAMPLER_ARG: '1.0'
      DISABLE_LAZY_LOAD_SHARDS: 'true'

  weaviate-voter-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: weaviate
    restart: on-failure:0
    ports:
      - "8081:8080"
      - "6061:6060"
      - "50052:50051"
    environment:
      LOG_LEVEL: "info"
      CONTEXTIONARY_URL: contextionary:9999
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: "./data"
      DEFAULT_VECTORIZER_MODULE: text2vec-contextionary
      ENABLE_MODULES: "text2vec-contextionary"
      PROMETHEUS_MONITORING_ENABLED: 'true'
      PROMETHEUS_MONITORING_GROUP_CLASSES: 'true'
      CLUSTER_HOSTNAME: "weaviate-voter-1"
      CLUSTER_JOIN: weaviate-voter-0:7100
      CLUSTER_GOSSIP_BIND_PORT: "7100"
      CLUSTER_DATA_BIND_PORT: "7101"
      ASYNC_INDEXING: ${ASYNC_INDEXING:-false}
      RAFT_BOOTSTRAP_EXPECT: 3
      RAFT_JOIN: "weaviate-voter-0:8300,weaviate-voter-1:8301,weaviate-voter-2:8302"
      # necessary for the metrics tests, some metrics only exist once segments
      # are flushed. If we wait to long the before run is completely in
      # memtables, the after run has some flushed which leads to some metrics
      # diffs in the before and after
      PERSISTENCE_MEMTABLES_FLUSH_IDLE_AFTER_SECONDS: 2
      REPLICATION_ENGINE_MAX_WORKERS: 100
      REPLICA_MOVEMENT_MINIMUM_ASYNC_WAIT: "5s"
      # OpenTelemetry tracing configuration
      OTEL_ENABLED: 'true'
      OTEL_SERVICE_NAME: 'weaviate'
      OTEL_ENVIRONMENT: 'development'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://tempo:4317'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_TRACES_SAMPLER_ARG: '1.0'
      DISABLE_LAZY_LOAD_SHARDS: 'true'

  weaviate-voter-2:
    build:
      context: .
      dockerfile: Dockerfile
      target: weaviate
    restart: on-failure:0
    ports:
      - "8082:8080"
      - "6062:6060"
      - "50053:50051"
    environment:
      LOG_LEVEL: "info"
      CONTEXTIONARY_URL: contextionary:9999
      QUERY_DEFAULTS_LIMIT: 20
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: "./data"
      DEFAULT_VECTORIZER_MODULE: text2vec-contextionary
      ENABLE_MODULES: "text2vec-contextionary"
      PROMETHEUS_MONITORING_ENABLED: 'true'
      PROMETHEUS_MONITORING_GROUP_CLASSES: 'true'
      CLUSTER_HOSTNAME: "weaviate-voter-2"
      CLUSTER_JOIN: weaviate-voter-0:7100
      CLUSTER_GOSSIP_BIND_PORT: "7100"
      CLUSTER_DATA_BIND_PORT: "7101"
      ASYNC_INDEXING: ${ASYNC_INDEXING:-false}
      RAFT_BOOTSTRAP_EXPECT: 3
      RAFT_JOIN: "weaviate-voter-0:8300,weaviate-voter-1:8301,weaviate-voter-2:8302"
      # necessary for the metrics tests, some metrics only exist once segments
      # are flushed. If we wait to long the before run is completely in
      # memtables, the after run has some flushed which leads to some metrics
      # diffs in the before and after
      PERSISTENCE_MEMTABLES_FLUSH_IDLE_AFTER_SECONDS: 2
      REPLICATION_ENGINE_MAX_WORKERS: 100
      REPLICA_MOVEMENT_MINIMUM_ASYNC_WAIT: "5s"
      # OpenTelemetry tracing configuration
      OTEL_ENABLED: 'true'
      OTEL_SERVICE_NAME: 'weaviate'
      OTEL_ENVIRONMENT: 'development'
      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://tempo:4317'
      OTEL_EXPORTER_OTLP_PROTOCOL: 'grpc'
      OTEL_TRACES_SAMPLER_ARG: '1.0'
      DISABLE_LAZY_LOAD_SHARDS: 'true'
      
  contextionary:
    image: semitechnologies/contextionary:en0.16.0-v1.2.1
    ports:
      - "9999:9999"
    environment:
      OCCURRENCE_WEIGHT_LINEAR_FACTOR: 0.75
      EXTENSIONS_STORAGE_MODE: weaviate
      EXTENSIONS_STORAGE_ORIGIN: http://weaviate-voter-0:8080

  prometheus:
    image: prom/prometheus:v2.46.0
    volumes:
      - ./tools/dev/prometheus_config/:/etc/prometheus/
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      # TODO do we want remote write or not?
      # - '--web.enable-remote-write-receiver'
    ports:
      - "9090:9090"
  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    volumes:
      - ./tools/dev/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./tools/dev/grafana/datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml
      - ./tools/dev/grafana/datasources/tempo.yml:/etc/grafana/provisioning/datasources/tempo.yml
      - ./tools/dev/grafana/dashboard_provider.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./tools/dev/grafana/dashboards:/var/lib/grafana/dashboards
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./examples/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    restart: on-failure