name: Notify Slack on PR (Non-Member) or Any Issue

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened]

jobs:
  notify-slack:
    runs-on: ubuntu-latest

    steps:
      - name: Check if actor is a non-member (for PRs only)
        if: github.event_name == 'pull_request'
        id: check_user
        uses: actions/github-script@v7
        with:
          script: |
            const { actor, owner } = context;
            try {
              await github.rest.orgs.checkMembershipForUser({
                org: owner,
                username: actor
              });
              core.setOutput('is_non_member', 'false');
            } catch (error) {
              if (error.status === 404) {
                core.setOutput('is_non_member', 'true');
              } else {
                core.setOutput('is_non_member', 'unknown');
              }
            }

      - name: Send Slack Notification for PR (Non-Member)
        if: github.event_name == 'pull_request' && steps.check_user.outputs.is_non_member == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸ“¢ A Pull Request has been opened by a *non-member*:\n*User:* ${{ github.actor }}\n*Title:* ${{ github.event.pull_request.title }}\n*Link:* ${{ github.event.pull_request.html_url }}"
          }' $SLACK_WEBHOOK_URL

      - name: Send Slack Notification for All Issues
        if: github.event_name == 'issues'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸš¨ A new Issue has been opened:\n*User:* ${{ github.actor }}\n*Title:* ${{ github.event.issue.title }}\n*Link:* ${{ github.event.issue.html_url }}"
          }' $SLACK_WEBHOOK_URL
