name: Tests

on:
  push:
    branches:
      - main
      - 'stable/v*'
    tags:
      - '**'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  Build-Scan-and-Push:
    name: build, scan, and push docker (${{ matrix.name }})
    runs-on: ${{ matrix.runner }}
    needs: [ Unit-Tests, Run-Swagger, Integration-Tests ]
    if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          # Production builds (tags, main, stable branches)
          - name: "production"
            condition: ${{ startsWith(github.ref, 'refs/tags') || startsWith(github.head_ref, 'build') || github.head_ref == '' }}
            arch: "multi"
            runner: ubuntu-latest
            push-args: ""
            image-tag: "weaviate:${{ github.sha }}"
            platforms: "linux/amd64,linux/arm64"
          # PR builds (per architecture)
          - name: "pr-amd64"
            condition: ${{ !startsWith(github.ref, 'refs/tags') && !startsWith(github.head_ref, 'build') && github.head_ref != '' }}
            arch: "amd64"
            runner: ubuntu-latest
            push-args: "--amd64-only"
            image-tag: "weaviate:${{ github.sha }}"
            platforms: "linux/amd64"
          - name: "pr-arm64"
            condition: ${{ !startsWith(github.ref, 'refs/tags') && !startsWith(github.head_ref, 'build') && github.head_ref != '' }}
            arch: "arm64"
            runner: ubuntu-24.04-arm
            push-args: "--arm64-only"
            image-tag: "weaviate:${{ github.sha }}"
            platforms: "linux/arm64"
    env:
      PROJECT_KEY: ${{ secrets.ORCA_PROJECT_KEY }}
    outputs:
      build-status: ${{ steps.build.outcome }}
      vuln-scan-status: ${{ steps.vuln-scan.outcome }}
      sast-scan-status: ${{ steps.sast-scan.outcome }}
      push-status: ${{ steps.push.outcome }}
      preview-tag: ${{ steps.push.outputs.PREVIEW_TAG }}
      preview-semver-tag: ${{ steps.push.outputs.PREVIEW_SEMVER_TAG }}
    steps:
      - name: Check matrix condition
        id: should-run
        run: |
          if ${{ matrix.condition }}; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - uses: actions/checkout@v5
        if: steps.should-run.outputs.should_run == 'true'

      - name: Set up Docker Buildx
        if: steps.should-run.outputs.should_run == 'true'
        uses: docker/setup-buildx-action@v3

      # Step 1: Build Docker image
      - name: Build and cache Docker image
        id: build
        if: steps.should-run.outputs.should_run == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ matrix.image-tag }}
          platforms: ${{ matrix.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max # Cache Docker build to GHA
          build-args: |
            CGO_ENABLED=0

      # Step 2: Vulnerability scanning
      - name: Run Orca Container Image Scan
        id: vuln-scan
        if: steps.should-run.outputs.should_run == 'true' && (matrix.name == 'production' || matrix.arch == 'amd64')
        uses: orcasecurity/shiftleft-container-image-action@v1
        continue-on-error: true
        with:
          api_token: ${{ secrets.ORCA_SECURITY_API_TOKEN }}
          project_key: ${{ env.PROJECT_KEY }}
          image: ${{ matrix.image-tag }}
          console_output: "table"
          format: "sarif"
          output: "results/"

      - name: Upload SARIF file
        if: steps.should-run.outputs.should_run == 'true' && (matrix.name == 'production' || matrix.arch == 'amd64') && always() && steps.vuln-scan.outputs.exit_code != 1
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results/image.sarif

      # Step 3: SAST scanning
      - name: Run Orca SAST Scan
        id: sast-scan
        if: steps.should-run.outputs.should_run == 'true' && (matrix.name == 'production' || matrix.arch == 'amd64')
        uses: orcasecurity/shiftleft-sast-action@v1
        continue-on-error: true
        with:
          api_token: ${{ secrets.ORCA_SECURITY_API_TOKEN }}
          project_key: ${{ env.PROJECT_KEY }}
          fetch-depth: 0
          path: "."

      # Step 4: Security gate - fail if either scan failed (production only)
      - name: Check security scan results
        if: steps.should-run.outputs.should_run == 'true' && matrix.name == 'production'
        run: |
          if [[ "${{ steps.vuln-scan.outcome }}" == "failure" ]]; then
            echo "::error::Vulnerability scan failed - blocking push"
            exit 1
          fi
          if [[ "${{ steps.sast-scan.outcome }}" == "failure" ]]; then
            echo "::error::SAST scan failed - blocking push"
            exit 1
          fi
          echo "All security scans passed - proceeding with push"

      # Step 5: Docker Hub login and push
      - name: Login to Docker Hub
        if: success() && steps.should-run.outputs.should_run == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push container
        id: push
        if: steps.build.outcome == 'success' && steps.should-run.outputs.should_run == 'true'
        run: ./ci/push_docker.sh ${{ matrix.push-args }}
        env:
          PR_TITLE: "${{ github.event.pull_request.title }}"

      - name: Generate Report
        if: success() && steps.should-run.outputs.should_run == 'true' && matrix.name == 'production'
        env:
          PREVIEW_TAG: "${{ steps.push.outputs.PREVIEW_TAG }}"
          PREVIEW_SEMVER_TAG: "${{ steps.push.outputs.PREVIEW_SEMVER_TAG }}"
        run: ./ci/generate_docker_report.sh

      # Step 6: Generate step-by-step report
      - name: Build and security report
        if: always() && steps.should-run.outputs.should_run == 'true'
        run: |
          echo "## Docker Build and Security Pipeline Report (${{ matrix.name }})" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status | Details |" >> $GITHUB_STEP_SUMMARY  
          echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # Build step report
          if [[ "${{ steps.build.outcome }}" == "success" ]]; then
            echo "| Docker Build (${{ matrix.arch }}) | ✅ Success | Image: ${{ matrix.image-tag }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Build (${{ matrix.arch }}) | ❌ Failed | Build failed |" >> $GITHUB_STEP_SUMMARY
          fi

          # Only show security scan results if they ran
          if [[ "${{ matrix.name }}" == "production" || "${{ matrix.arch }}" == "amd64" ]]; then
            # Vulnerability scan report
            if [[ "${{ steps.vuln-scan.outcome }}" == "success" ]]; then
              echo "| Vulnerability Scan | ✅ Success | No critical vulnerabilities |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ steps.vuln-scan.outcome }}" == "failure" ]]; then
              echo "| Vulnerability Scan | ❌ Failed | Critical vulnerabilities found |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Vulnerability Scan | ⚠️ Skipped | Scan was skipped |" >> $GITHUB_STEP_SUMMARY
            fi

            # SAST scan report
            if [[ "${{ steps.sast-scan.outcome }}" == "success" ]]; then
              echo "| SAST Scan | ✅ Success | No critical code issues |" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ steps.sast-scan.outcome }}" == "failure" ]]; then
              echo "| SAST Scan | ❌ Failed | Critical code issues found |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| SAST Scan | ⚠️ Skipped | Scan was skipped |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Security Scans | ✅ Complete | Scans completed on amd64 build |" >> $GITHUB_STEP_SUMMARY
          fi

      # Step 7: Final pipeline report
      - name: Final pipeline report
        if: always() && steps.should-run.outputs.should_run == 'true'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "### Push Results (${{ matrix.name }})" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.push.outcome }}" == "success" ]]; then
            echo "| Docker Push | ✅ Success | Tags: ${{ steps.push.outputs.PREVIEW_TAG }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**✅ Pipeline completed successfully (${{ matrix.name }})!**" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.push.outcome }}" == "skipped" ]]; then
            echo "| Docker Push | ⚠️ Skipped | Security scans failed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**❌ Pipeline failed at security gate**" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Docker Push | ❌ Failed | Push operation failed |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**❌ Pipeline failed at push stage**" >> $GITHUB_STEP_SUMMARY
          fi
  Buf-Checks:
    name: buf-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}
      - uses: bufbuild/buf-lint-action@v1
        with:
          input: "cluster/proto"
      - uses: bufbuild/buf-breaking-action@v1
        if: github.event_name == 'pull_request'
        with:
          input: "cluster/proto"
          against: "https://github.com/${GITHUB_REPOSITORY}.git#branch=${{ github.event.pull_request.base.ref }},subdir=cluster/proto"
  Run-Swagger:
    name: run-swagger
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Run Swagger
        run: ./tools/gen-code-from-swagger.sh
      - name: Error on change
        run: |
          # check if anything is different
          CHANGED=$(git status -s | wc -l)
          if [ "$CHANGED" -gt 0 ]; then
            echo "Please run ./tools/gen-code-from-swagger.sh script and commit changes:"
            git status -s
            exit 1
          else
            exit 0
          fi
  Unit-Tests:
    name: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Unit test
        run: ./test/run.sh --unit-only
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-unit
          path: coverage-unit.txt
  Integration-Tests:
    name: integration-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [
          "--integration-vector-package-only",
          "--integration-without-vector-package"
        ]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Integration test
        run: ./test/run.sh ${{ matrix.test }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-integration${{ matrix.test }}
          path: coverage-integration.txt
  Modules-Acceptance-Tests:
    name: modules-acceptance-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [
          "--only-module-backup-azure",
          "--only-module-backup-filesystem",
          "--only-module-backup-gcs",
          "--only-module-backup-s3",
          "--only-module-offload-s3",
          "--only-module-text2vec-transformers",
          "--only-module-text2vec-ollama",
          "--only-module-generative-ollama",
          "--only-module-text2vec-model2vec"
        ]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests (modules)
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: 2
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Modules-On-Demand-Tests-Check:
    name: modules-on-demand-tests-check
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}  # no PRs from fork
    outputs:
      run_pipeline: ${{ steps.check.outputs.run_pipeline }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - id: check
        name: check
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          commit_message=$(git log -1 --format=%B $COMMIT_SHA)
          if [[ "$commit_message" == *"[api]"* || "$commit_message" == "prepare release"* || "$commit_message" == *"[test]"* ]]; then
            echo "Run pipeline"
            echo "run_pipeline=true" >> $GITHUB_OUTPUT
          else
            echo "Skip pipeline. In order to run the pipeline commit title must contain: [api]"
            echo "run_pipeline=false" >> $GITHUB_OUTPUT
          fi
  Modules-Acceptance-Tests-large:
    name: modules-acceptance-tests-large
    runs-on: DB-ubuntu-24.04-4-cores
    needs: [Modules-On-Demand-Tests-Check]
    if: ${{ needs.Modules-On-Demand-Tests-Check.outputs.run_pipeline == 'true' }}  # no PRs from fork
    strategy:
      fail-fast: false
      matrix:
        test: [
          "--only-module-qna-transformers",
          "--only-module-sum-transformers",
          "--only-module-multi2vec-clip",
          "--only-module-reranker-transformers"
        ]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests Large (modules)
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: 2
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Modules-Acceptance-Tests-light:
    name: modules-acceptance-tests-light
    runs-on: ubuntu-latest
    needs: [Modules-On-Demand-Tests-Check]
    if: ${{ needs.Modules-On-Demand-Tests-Check.outputs.run_pipeline == 'true' }}  # no PRs from fork
    strategy:
      fail-fast: false
      matrix:
        test: [
          "--only-module-text2vec-contextionary",
          "--only-module-img2vec-neural",
          "--only-module-ref2vec-centroid",
          "--only-module-many-modules",
          "--only-module-many-generative"
        ]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests Large (modules)
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: 2
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Modules-Acceptance-Tests-api:
    name: modules-acceptance-tests-api
    runs-on: ubuntu-latest
    needs: [Modules-On-Demand-Tests-Check]
    if: ${{ needs.Modules-On-Demand-Tests-Check.outputs.run_pipeline == 'true' && !github.event.pull_request.head.repo.fork && !startsWith(github.ref, 'refs/tags') }}  # no PRs from fork
    strategy:
      fail-fast: false
      matrix:
        test: [
          "--only-module-multi2vec-cohere",
          "--only-module-multi2vec-google",
          "--only-module-generative-aws",
          "--only-module-generative-cohere",
          "--only-module-generative-google",
          "--only-module-generative-openai",
          "--only-module-text2vec-google",
          "--only-module-text2vec-aws",
          "--only-module-text2vec-jinaai",
          "--only-module-multi2vec-jinaai",
          "--only-module-text2multivec-jinaai",
          "--only-module-multi2multivec-jinaai",
          "--only-module-multi2vec-aws",
          "--only-module-text2vec-openai",
        ]
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: check
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          commit_message=$(git log -1 --format=%B $COMMIT_SHA)
          if [[ "$commit_message" == *"[api]"* || "$commit_message" == "prepare release"* ]]; then
            echo "Run pipeline"
            echo "run_pipeline=true" >> $GITHUB_ENV
          else
            echo "Skip pipeline. In order to run the pipeline commit title must contain: [api]"
            echo "run_pipeline=false" >> $GITHUB_ENV
          fi
      - name: configure gcp
        if: ${{ env.run_pipeline == 'true' }}
        id: creds-gcp
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          ./tools/ci/gcloud.sh
          google_apikey=$(gcloud auth print-access-token)
          echo "::add-mask::$google_apikey"
          echo "google_apikey=$google_apikey" >> "$GITHUB_OUTPUT"
      - name: configure aws
        if: ${{ env.run_pipeline == 'true' }}
        id: creds-aws
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-skip-session-tagging: true
          output-credentials: true
      - name: Acceptance tests (modules)
        if: ${{ env.run_pipeline == 'true' }}
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GOOGLE_APIKEY: ${{ steps.creds-gcp.outputs.google_apikey }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ steps.creds-aws.outputs.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.creds-aws.outputs.aws-secret-access-key }}
          AWS_SESSION_TOKEN: ${{ steps.creds-aws.outputs.aws-session-token }}
          OPENAI_APIKEY: ${{ secrets.OPENAI_APIKEY }}
          OPENAI_ORGANIZATION: ${{ secrets.OPENAI_ORGANIZATION }}
          COHERE_APIKEY: ${{ secrets.COHERE_APIKEY }}
          ANTHROPIC_APIKEY: ${{ secrets.ANTHROPIC_APIKEY }}
          JINAAI_APIKEY: ${{ secrets.JINAAI_APIKEY }}
        run: ./test/run.sh ${{ matrix.test }}
  Acceptance-Tests:
    name: acceptance-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: [
          "--acceptance-only-fast-group-1",
          "--acceptance-only-fast-group-2",
          "--acceptance-only-fast-group-3",
          "--acceptance-only-fast-group-4",
          "--acceptance-only-graphql",
          "--acceptance-only-authz",
          "--acceptance-only-replication",
          "--acceptance-only-async-replication",
          "--acceptance-only-replica-replication-fast",
          "--acceptance-only-replica-replication-slow",
          "--acceptance-go-client-only-fast-group-1",
          "--acceptance-go-client-only-fast-group-2",
          "--acceptance-only-python",
        ]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests
        env:
          WCS_DUMMY_CI_PW: ${{ secrets.WCS_DUMMY_CI_PW }}
          WCS_DUMMY_CI_PW_2: ${{ secrets.WCS_DUMMY_CI_PW_2 }}
        run: ./test/run.sh ${{ matrix.test }}
  Acceptance-Tests-large:
    name: acceptance-tests-large
    runs-on: DB-ubuntu-24.04-4-cores
    strategy:
      fail-fast: false
      matrix:
        test: ["--acceptance-go-client-named-vectors-single-node", "--acceptance-go-client-named-vectors-cluster", "--acceptance-lsmkv"]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Determine retry max_attempts value
        env:
          MATRIX_TEST: ${{ matrix.test }}
        run: |
          if [[ "$MATRIX_TEST" == *"lsmkv"* ]]; then
            echo "retry_max_attempts=2" >> $GITHUB_ENV
          else
            echo "retry_max_attempts=1" >> $GITHUB_ENV
          fi
      - name: Acceptance tests Large
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: ${{ env.retry_max_attempts }}
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Codecov:
    needs: [Unit-Tests, Integration-Tests]
    name: codecov
    runs-on: ubuntu-latest
    if: ${{ (github.ref_type == 'branch') && (github.ref_name != 'main') }}
    steps:
      - uses: actions/checkout@v5
      - name: Download coverage artifacts integration
        uses: actions/download-artifact@v5
        with:
          name: coverage-report-unit
      - name: Download coverage integration without vector package
        uses: actions/download-artifact@v5
        with:
          name: coverage-report-integration--integration-without-vector-package
          path: coverage-integration-without-vector-package.txt
      - name: Download coverage integration vector package only
        uses: actions/download-artifact@v5
        with:
          name: coverage-report-integration--integration-vector-package-only
          path: coverage-integration-vector-package-only.txt
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          files: ./coverage-integration-without-vector-package.txt, ./coverage-integration-vector-package-only.txt, ./coverage-unit.txt
          verbose: true
  Compile-and-upload-binaries:
    name: compile-and-upload-binaries
    runs-on: DB-ubuntu-24.04-4-cores
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
      - name: goreleaser
        run: |
          GIT_REVISION=$(git rev-parse --short HEAD) GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) BUILD_USER=ci BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") goreleaser build  --clean --snapshot
      - name: Upload macos
        uses: actions/upload-artifact@v4
        with:
          name: binaries-macos-unsigned
          path: dist/weaviate_darwin_all
      - name: Upload windows
        uses: actions/upload-artifact@v4
        with:
          name: binaries-windows-amd64
          path: dist/weaviate_windows_amd64_v1
      - name: Upload windows
        uses: actions/upload-artifact@v4
        with:
          name: binaries-windows-arm64
          path: dist/weaviate_windows_arm64
      - name: Upload linux amd64
        uses: actions/upload-artifact@v4
        with:
          name: binaries-linux-amd64
          path: dist/weaviate_linux_amd64_v1
      - name: Upload linux arm64
        uses: actions/upload-artifact@v4
        with:
          name: binaries-linux-arm64
          path: dist/weaviate_linux_arm64


  Acceptance-Tests-windows:
    name: acceptance-tests-windows
    needs: Compile-and-upload-binaries
    runs-on: windows-latest
    env:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: true
      PERSISTENCE_DATA_PATH: /tmp
      QUERY_DEFAULTS_LIMIT: 20
      CLUSTER_HOSTNAME: node1
      RAFT_BOOTSTRAP_EXPECT: 1
      RAFT_JOIN: node1
      GRPC_PORT: 50052
    steps:
      - uses: actions/checkout@v5
      - name: Download binaries
        uses: actions/download-artifact@v5
        with:
          name: binaries-windows-amd64
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: start weaviate
        shell: bash
        # Weaviate is started without a Vectorizer as running text2vec-contextionary on GH actions is difficult:
        # - docker on GHA only supports windows container - which we currently are not build
        # - building those containers without a windows machine is difficult to figure out
        run: ./weaviate.exe --scheme http --port 8080 &
      - name: run acceptance tests
        shell: bash
        run: go test -count 1 -race test/acceptance/actions/*.go  # tests that don't need a Vectorizer