name: Tests

on:
  push:
    branches:
      - main
      - 'stable/v*'
    tags:
      - '**'
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  Buf-Checks:
    name: buf checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ github.token }}
      - uses: bufbuild/buf-lint-action@v1
        with:
          input: "cluster/proto"
      - uses: bufbuild/buf-breaking-action@v1
        if: github.event_name == 'pull_request'
        with:
          input: "cluster/proto"
          against: "https://github.com/${GITHUB_REPOSITORY}.git#branch=${{ github.event.pull_request.base.ref }},subdir=cluster/proto"
  Run-Swagger:
    name: swagger
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Run Swagger
        run: ./tools/gen-code-from-swagger.sh
      - name: Error on change
        run: |
          # check if anything is different
          CHANGED=$(git status -s | wc -l)
          if [ "$CHANGED" -gt 0 ]; then
            echo "Please run ./tools/gen-code-from-swagger.sh script and commit changes:"
            git status -s
            exit 1
          else
            exit 0
          fi
  Vulnerability-Scanning:
    name: orca vulnerability scan
    runs-on: ubuntu-latest
    env:
      PROJECT_KEY: ${{secrets.ORCA_PROJECT_KEY}}
    if: ${{ !github.event.pull_request.head.repo.fork }}  # no PRs from fork
    steps:
      - uses: actions/checkout@v5
      - name: Run locally Docker build
        run: docker build -t weaviate:${{ github.sha }} .
      - name: Run Orca Container Image Scan
        id: orcasecurity_container_image_scan
        uses: orcasecurity/shiftleft-container-image-action@v1
        with:
          api_token: ${{ secrets.ORCA_SECURITY_API_TOKEN }}
          project_key: ${{ env.PROJECT_KEY }}
          image: 'weaviate:${{ github.sha }}'
          console_output: "table"
          format: "sarif"
          output: "results/"
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: ${{ always() && steps.orcasecurity_container_image_scan.outputs.exit_code != 1 }}
        with:
          sarif_file: results/image.sarif
  SAST-Scanning:
    name: orca sast scan
    runs-on: ubuntu-latest
    env:
      PROJECT_KEY: ${{secrets.ORCA_PROJECT_KEY}}
    if: ${{ !github.event.pull_request.head.repo.fork }}  # no PRs from fork
    steps:
      - uses: actions/checkout@v5
      - name: Run Orca SAST Scan
        id: orcasecurity_container_sast_action
        uses: orcasecurity/shiftleft-sast-action@v1
        with:
          api_token: ${{ secrets.ORCA_SECURITY_API_TOKEN }}
          project_key: ${{ env.PROJECT_KEY }}
          # diff scans against the entire git history, so should only scan changes in this PR
          fetch-depth: 0
          path:
            # scanning the entire repository
            "."
  Unit-Tests:
    name: unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Unit test
        run: ./test/run.sh --unit-only
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-unit
          path: coverage-unit.txt
  Integration-Tests:
    name: integration tests (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "with vectors"
            test: "--integration-vector-package-only"
          - name: "without vector"
            test: "--integration-without-vector-package"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Integration test
        run: ./test/run.sh ${{ matrix.test }}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-integration${{ matrix.test }}
          path: coverage-integration.txt
  Modules-Acceptance-Tests:
    name: modules (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "backup-azure"
            test: "--only-module-backup-azure"
          - name: "backup-filesystem"
            test: "--only-module-backup-filesystem"
          - name: "backup-gcs"
            test: "--only-module-backup-gcs"
          - name: "backup-s3"
            test: "--only-module-backup-s3"
          - name: "offload-s3"
            test: "--only-module-offload-s3"
          - name: "text2vec-transformers"
            test: "--only-module-text2vec-transformers"
          - name: "text2vec-ollama"
            test: "--only-module-text2vec-ollama"
          - name: "generative-ollama"
            test: "--only-module-generative-ollama"
          - name: "text2vec-model2vec"
            test: "--only-module-text2vec-model2vec"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests (modules)
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: 2
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Modules-On-Demand-Tests-Check:
    name: modules on demand
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.head.repo.fork }}  # no PRs from fork
    outputs:
      run_pipeline: ${{ steps.check.outputs.run_pipeline }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - id: check
        name: check
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          commit_message=$(git log -1 --format=%B $COMMIT_SHA)
          if [[ "$commit_message" == *"[api]"* || "$commit_message" == "prepare release"* || "$commit_message" == *"[test]"* ]]; then
            echo "Run pipeline"
            echo "run_pipeline=true" >> $GITHUB_OUTPUT
          else
            echo "Skip pipeline. In order to run the pipeline commit title must contain: [api]"
            echo "run_pipeline=false" >> $GITHUB_OUTPUT
          fi
  Modules-Acceptance-Tests-large:
    name: modules large (${{ matrix.name }})
    runs-on: DB-ubuntu-24.04-4-cores
    needs: [Modules-On-Demand-Tests-Check]
    if: ${{ needs.Modules-On-Demand-Tests-Check.outputs.run_pipeline == 'true' }}  # no PRs from fork
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "qna-trans"
            test: "--only-module-qna-transformers"
          - name: "sum-trans"
            test: "--only-module-sum-transformers"
          - name: "multi2vec-clip"
            test: "--only-module-multi2vec-clip"
          - name: "reranker-trans"
            test: "--only-module-reranker-transformers"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests Large (modules)
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: 2
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Modules-Acceptance-Tests-light:
    name: modules light (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: [Modules-On-Demand-Tests-Check]
    if: ${{ needs.Modules-On-Demand-Tests-Check.outputs.run_pipeline == 'true' }}  # no PRs from fork
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "text2vec-contextionary"
            test: "--only-module-text2vec-contextionary"
          - name: "img2vec-neural"
            test: "--only-module-img2vec-neural"
          - name: "ref2vec-centroid"
            test: "--only-module-ref2vec-centroid"
          - name: "many-modules"
            test: "--only-module-many-modules"
          - name: "many-generative"
            test: "--only-module-many-generative"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests Large (modules)
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: 2
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Modules-Acceptance-Tests-api:
    name: modules api (${{ matrix.name }})
    runs-on: ubuntu-latest
    needs: [Modules-On-Demand-Tests-Check]
    if: ${{ needs.Modules-On-Demand-Tests-Check.outputs.run_pipeline == 'true' && !github.event.pull_request.head.repo.fork && !startsWith(github.ref, 'refs/tags') }}  # no PRs from fork
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "multi2vec-cohere"
            test: "--only-module-multi2vec-cohere"
          - name: "multi2vec-google"
            test: "--only-module-multi2vec-google"
          - name: "generative-aws"
            test: "--only-module-generative-aws"
          - name: "generative-cohere"
            test: "--only-module-generative-cohere"
          - name: "generative-google"
            test: "--only-module-generative-google"
          - name: "generative-openai"
            test: "--only-module-generative-openai"
          - name: "text2vec-google"
            test: "--only-module-text2vec-google"
          - name: "text2vec-aws"
            test: "--only-module-text2vec-aws"
          - name: "text2vec-jinaai"
            test: "--only-module-text2vec-jinaai"
          - name: "multi2vec-jinaai"
            test: "--only-module-multi2vec-jinaai"
          - name: "text2multivec-jinaai"
            test: "--only-module-text2multivec-jinaai"
          - name: "multi2multivec-jinaai"
            test: "--only-module-multi2multivec-jinaai"
          - name: "multi2vec-aws"
            test: "--only-module-multi2vec-aws"
          - name: "text2vec-openai"
            test: "--only-module-text2vec-openai"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: check
        env:
          COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          commit_message=$(git log -1 --format=%B $COMMIT_SHA)
          if [[ "$commit_message" == *"[api]"* || "$commit_message" == "prepare release"* ]]; then
            echo "Run pipeline"
            echo "run_pipeline=true" >> $GITHUB_ENV
          else
            echo "Skip pipeline. In order to run the pipeline commit title must contain: [api]"
            echo "run_pipeline=false" >> $GITHUB_ENV
          fi
      - name: configure gcp
        if: ${{ env.run_pipeline == 'true' }}
        id: creds-gcp
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        run: |
          ./tools/ci/gcloud.sh
          google_apikey=$(gcloud auth print-access-token)
          echo "::add-mask::$google_apikey"
          echo "google_apikey=$google_apikey" >> "$GITHUB_OUTPUT"
      - name: configure aws
        if: ${{ env.run_pipeline == 'true' }}
        id: creds-aws
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
          role-skip-session-tagging: true
          output-credentials: true
      - name: Acceptance tests (modules)
        if: ${{ env.run_pipeline == 'true' }}
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          GOOGLE_APIKEY: ${{ steps.creds-gcp.outputs.google_apikey }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ steps.creds-aws.outputs.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.creds-aws.outputs.aws-secret-access-key }}
          AWS_SESSION_TOKEN: ${{ steps.creds-aws.outputs.aws-session-token }}
          OPENAI_APIKEY: ${{ secrets.OPENAI_APIKEY }}
          OPENAI_ORGANIZATION: ${{ secrets.OPENAI_ORGANIZATION }}
          COHERE_APIKEY: ${{ secrets.COHERE_APIKEY }}
          ANTHROPIC_APIKEY: ${{ secrets.ANTHROPIC_APIKEY }}
          JINAAI_APIKEY: ${{ secrets.JINAAI_APIKEY }}
        run: ./test/run.sh ${{ matrix.test }}
  Acceptance-Tests:
    name: acceptance (${{ matrix.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "fast-group-1"
            test: "--acceptance-only-fast-group-1"
          - name: "fast-group-2"
            test: "--acceptance-only-fast-group-2"
          - name: "fast-group-3"
            test: "--acceptance-only-fast-group-3"
          - name: "fast-group-4"
            test: "--acceptance-only-fast-group-4"
          - name: "graphql"
            test: "--acceptance-only-graphql"
          - name: "authz"
            test: "--acceptance-only-authz"
          - name: "replication"
            test: "--acceptance-only-replication"
          - name: "async-replication"
            test: "--acceptance-only-async-replication"
          - name: "replica-fast"
            test: "--acceptance-only-replica-replication-fast"
          - name: "replica-slow"
            test: "--acceptance-only-replica-replication-slow"
          - name: "go-client-group-1"
            test: "--acceptance-go-client-only-fast-group-1"
          - name: "go-client-group-2"
            test: "--acceptance-go-client-only-fast-group-2"
          - name: "python"
            test: "--acceptance-only-python"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Acceptance tests
        env:
          WCS_DUMMY_CI_PW: ${{ secrets.WCS_DUMMY_CI_PW }}
          WCS_DUMMY_CI_PW_2: ${{ secrets.WCS_DUMMY_CI_PW_2 }}
        run: ./test/run.sh ${{ matrix.test }}
  Acceptance-Tests-large:
    name: acceptance large (${{ matrix.name }})
    runs-on: DB-ubuntu-24.04-4-cores
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "vector-single"
            test: "--acceptance-go-client-named-vectors-single-node"
          - name: "vector-cluster"
            test: "--acceptance-go-client-named-vectors-cluster"
          - name: "lsmkv"
            test: "--acceptance-lsmkv"
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' }}
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Determine retry max_attempts value
        env:
          MATRIX_TEST: ${{ matrix.name }}
        run: |
          if [[ "$MATRIX_TEST" == *"lsmkv"* ]]; then
            echo "retry_max_attempts=2" >> $GITHUB_ENV
          else
            echo "retry_max_attempts=1" >> $GITHUB_ENV
          fi
      - name: Acceptance tests Large
        uses: nick-fields/retry@v3
        with:
          # 15 Minute is a large enough timeout for most of our tests
          timeout_minutes: 15
          max_attempts: ${{ env.retry_max_attempts }}
          command: ./test/run.sh ${{ matrix.test }}
          on_retry_command: ./test/run.sh --cleanup
  Codecov:
    needs: [Unit-Tests, Integration-Tests]
    name: codecov
    runs-on: ubuntu-latest
    if: ${{ (github.ref_type == 'branch') && (github.ref_name != 'main') }}
    steps:
      - uses: actions/checkout@v5
      - name: Download coverage artifacts integration
        uses: actions/download-artifact@v5
        with:
          name: coverage-report-unit
      - name: Download coverage integration without vector package
        uses: actions/download-artifact@v5
        with:
          name: coverage-report-integration--integration-without-vector-package
          path: coverage-integration-without-vector-package.txt
      - name: Download coverage integration vector package only
        uses: actions/download-artifact@v5
        with:
          name: coverage-report-integration--integration-vector-package-only
          path: coverage-integration-vector-package-only.txt
      - name: Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          files: ./coverage-integration-without-vector-package.txt, ./coverage-integration-vector-package-only.txt, ./coverage-unit.txt
          verbose: true
  Compile-and-upload-binaries:
    name: compile and upload binaries
    runs-on: DB-ubuntu-24.04-4-cores
    steps:
      - uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
      - name: goreleaser
        run: |
          GIT_REVISION=$(git rev-parse --short HEAD) GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) BUILD_USER=ci BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") goreleaser build  --clean --snapshot
      - name: Upload macos
        uses: actions/upload-artifact@v4
        with:
          name: binaries-macos-unsigned
          path: dist/weaviate_darwin_all
      - name: Upload windows
        uses: actions/upload-artifact@v4
        with:
          name: binaries-windows-amd64
          path: dist/weaviate_windows_amd64_v1
      - name: Upload windows
        uses: actions/upload-artifact@v4
        with:
          name: binaries-windows-arm64
          path: dist/weaviate_windows_arm64
      - name: Upload linux amd64
        uses: actions/upload-artifact@v4
        with:
          name: binaries-linux-amd64
          path: dist/weaviate_linux_amd64_v1
      - name: Upload linux arm64
        uses: actions/upload-artifact@v4
        with:
          name: binaries-linux-arm64
          path: dist/weaviate_linux_arm64


  Acceptance-Tests-windows:
    name: acceptance (windows)
    needs: Compile-and-upload-binaries
    runs-on: windows-latest
    env:
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: true
      PERSISTENCE_DATA_PATH: /tmp
      QUERY_DEFAULTS_LIMIT: 20
      CLUSTER_HOSTNAME: node1
      RAFT_BOOTSTRAP_EXPECT: 1
      RAFT_JOIN: node1
      GRPC_PORT: 50052
    steps:
      - uses: actions/checkout@v5
      - name: Download binaries
        uses: actions/download-artifact@v5
        with:
          name: binaries-windows-amd64
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache: true
      - name: start weaviate
        shell: bash
        # Weaviate is started without a Vectorizer as running text2vec-contextionary on GH actions is difficult:
        # - docker on GHA only supports windows container - which we currently are not build
        # - building those containers without a windows machine is difficult to figure out
        run: ./weaviate.exe --scheme http --port 8080 &
      - name: run acceptance tests
        shell: bash
        run: go test -count 1 -race test/acceptance/actions/*.go  # tests that don't need a Vectorizer

  Push-Docker:
    if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' && (startsWith(github.ref, 'refs/tags') || startsWith(github.head_ref, 'build') || github.head_ref == '') }} # no PRs from fork
    needs: [Unit-Tests, Run-Swagger, Vulnerability-Scanning, SAST-Scanning, Integration-Tests]
    name: push-docker
    timeout-minutes: 30
    runs-on: DB-ubuntu-24.04-8-cores
    steps:
      - uses: actions/checkout@v5
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Push container
        id: push-container
        run: ./ci/push_docker.sh
        env:
          PR_TITLE: "${{ github.event.pull_request.title }}"
      - name: Generate Report
        env:
          PREVIEW_TAG: "${{ steps.push-container.outputs.PREVIEW_TAG }}"
          PREVIEW_SEMVER_TAG: "${{ steps.push-container.outputs.PREVIEW_SEMVER_TAG }}"
        run: ./ci/generate_docker_report.sh
  Push-Docker-Fast:
    if: ${{ !github.event.pull_request.head.repo.fork && github.triggering_actor != 'dependabot[bot]' && !startsWith(github.ref, 'refs/tags') && !startsWith(github.head_ref, 'build') && !(github.head_ref == '') }} # no PRs from fork
    name: push docker fast (${{ matrix.arch }})
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
          - arch: arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    outputs:
      preview-tags-amd64: ${{ steps.set-outputs.outputs.preview-tags-amd64 }}
      semver-tags-amd64: ${{ steps.set-outputs.outputs.semver-tags-amd64 }}
      preview-tags-arm64: ${{ steps.set-outputs.outputs.preview-tags-arm64 }}
      semver-tags-arm64: ${{ steps.set-outputs.outputs.semver-tags-arm64 }}
    steps:
      - uses: actions/checkout@v5
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}
      - name: Push container
        id: push-container
        run: ./ci/push_docker.sh --${{ matrix.arch }}-only
        env:
          PR_TITLE: "${{ github.event.pull_request.title }}"
      - name: Set architecture-specific outputs
        id: set-outputs
        run: |
          # Unique output names per architecture
          echo "preview-tags-${{ matrix.arch }}=${{ steps.push-container.outputs.PREVIEW_TAG }}" >> $GITHUB_OUTPUT
          echo "semver-tags-${{ matrix.arch }}=${{ steps.push-container.outputs.PREVIEW_SEMVER_TAG }}" >> $GITHUB_OUTPUT
  Generate-Docker-Report:
    needs: [Push-Docker-Fast]
    name: docker report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Combine tags
        run: |
          # Collect all architecture-specific outputs
          ALL_PREVIEW_TAGS="${{ needs.Push-Docker-Fast.outputs.preview-tags-amd64 }}"
          ALL_PREVIEW_TAGS+="\n${{ needs.Push-Docker-Fast.outputs.preview-tags-arm64 }}"
          
          ALL_SEMVER_TAGS="${{ needs.Push-Docker-Fast.outputs.semver-tags-amd64 }}"
          ALL_SEMVER_TAGS+="\n${{ needs.Push-Docker-Fast.outputs.semver-tags-arm64 }}"

          # Write to environment variables
          echo "PREVIEW_TAG<<EOF" >> $GITHUB_ENV
          echo -e "$ALL_PREVIEW_TAGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "PREVIEW_SEMVER_TAG<<EOF" >> $GITHUB_ENV
          echo -e "$ALL_SEMVER_TAGS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - run: ./ci/generate_docker_report.sh
