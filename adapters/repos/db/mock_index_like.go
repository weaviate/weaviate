//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIndexLike is an autogenerated mock type for the IndexLike type
type MockIndexLike struct {
	mock.Mock
}

type MockIndexLike_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndexLike) EXPECT() *MockIndexLike_Expecter {
	return &MockIndexLike_Expecter{mock: &_m.Mock}
}

// CalculateColdTenantMetrics provides a mock function with given fields: ctx, tenantName
func (_m *MockIndexLike) CalculateColdTenantMetrics(ctx context.Context, tenantName string) (int64, int64) {
	ret := _m.Called(ctx, tenantName)

	if len(ret) == 0 {
		panic("no return value specified for CalculateColdTenantMetrics")
	}

	var r0 int64
	var r1 int64
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, int64)); ok {
		return rf(ctx, tenantName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, tenantName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int64); ok {
		r1 = rf(ctx, tenantName)
	} else {
		r1 = ret.Get(1).(int64)
	}

	return r0, r1
}

// MockIndexLike_CalculateColdTenantMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateColdTenantMetrics'
type MockIndexLike_CalculateColdTenantMetrics_Call struct {
	*mock.Call
}

// CalculateColdTenantMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantName string
func (_e *MockIndexLike_Expecter) CalculateColdTenantMetrics(ctx interface{}, tenantName interface{}) *MockIndexLike_CalculateColdTenantMetrics_Call {
	return &MockIndexLike_CalculateColdTenantMetrics_Call{Call: _e.mock.On("CalculateColdTenantMetrics", ctx, tenantName)}
}

func (_c *MockIndexLike_CalculateColdTenantMetrics_Call) Run(run func(ctx context.Context, tenantName string)) *MockIndexLike_CalculateColdTenantMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIndexLike_CalculateColdTenantMetrics_Call) Return(objectCount int64, storageSize int64) *MockIndexLike_CalculateColdTenantMetrics_Call {
	_c.Call.Return(objectCount, storageSize)
	return _c
}

func (_c *MockIndexLike_CalculateColdTenantMetrics_Call) RunAndReturn(run func(context.Context, string) (int64, int64)) *MockIndexLike_CalculateColdTenantMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// ForEachShard provides a mock function with given fields: f
func (_m *MockIndexLike) ForEachShard(f func(string, ShardLike) error) error {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for ForEachShard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(string, ShardLike) error) error); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexLike_ForEachShard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForEachShard'
type MockIndexLike_ForEachShard_Call struct {
	*mock.Call
}

// ForEachShard is a helper method to define mock.On call
//   - f func(string , ShardLike) error
func (_e *MockIndexLike_Expecter) ForEachShard(f interface{}) *MockIndexLike_ForEachShard_Call {
	return &MockIndexLike_ForEachShard_Call{Call: _e.mock.On("ForEachShard", f)}
}

func (_c *MockIndexLike_ForEachShard_Call) Run(run func(f func(string, ShardLike) error)) *MockIndexLike_ForEachShard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, ShardLike) error))
	})
	return _c
}

func (_c *MockIndexLike_ForEachShard_Call) Return(_a0 error) *MockIndexLike_ForEachShard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexLike_ForEachShard_Call) RunAndReturn(run func(func(string, ShardLike) error) error) *MockIndexLike_ForEachShard_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndexLike creates a new instance of MockIndexLike. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndexLike(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndexLike {
	mock := &MockIndexLike{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
