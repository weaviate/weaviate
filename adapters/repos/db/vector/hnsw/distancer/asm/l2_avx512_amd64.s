//go:build !noasm && amd64
// AUTO-GENERATED BY GOAT -- DO NOT EDIT

TEXT Â·l2_512(SB), $0-32
	MOVQ a+0(FP), DI
	MOVQ b+8(FP), SI
	MOVQ res+16(FP), DX
	MOVQ len+24(FP), CX
	BYTE $0x55               // pushq	%rbp
	WORD $0x8948; BYTE $0xe5 // movq	%rsp, %rbp
	LONG $0xf8e48348         // andq	$-8, %rsp
	WORD $0x8b48; BYTE $0x01 // movq	(%rcx), %rax
	WORD $0xf883; BYTE $0x07 // cmpl	$7, %eax
	JG   LBB0_9
	LONG $0xff408d44         // leal	-1(%rax), %r8d
	WORD $0x03a8             // testb	$3, %al
	JE   LBB0_2
	WORD $0x8941; BYTE $0xc1 // movl	%eax, %r9d
	LONG $0x03e18341         // andl	$3, %r9d
	LONG $0xc057f8c5         // vxorps	%xmm0, %xmm0, %xmm0
	WORD $0xc931             // xorl	%ecx, %ecx

LBB0_4:
	LONG $0x0f10fac5         // vmovss	(%rdi), %xmm1
	LONG $0x0e5cf2c5         // vsubss	(%rsi), %xmm1, %xmm1
	LONG $0xc959f2c5         // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc158fac5         // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x04c78348         // addq	$4, %rdi
	LONG $0x04c68348         // addq	$4, %rsi
	LONG $0x01c18348         // addq	$1, %rcx
	WORD $0x3941; BYTE $0xc9 // cmpl	%ecx, %r9d
	JNE  LBB0_4
	WORD $0xc829             // subl	%ecx, %eax
	LONG $0x03f88341         // cmpl	$3, %r8d
	JAE  LBB0_7

LBB0_36:
	LONG $0x0211fac5         // vmovss	%xmm0, (%rdx)
	WORD $0x8948; BYTE $0xec // movq	%rbp, %rsp
	BYTE $0x5d               // popq	%rbp
	BYTE $0xc3               // retq

LBB0_9:
	LONG $0xc057f8c5             // vxorps	%xmm0, %xmm0, %xmm0
	LONG $0x0000803d; BYTE $0x00 // cmpl	$128, %eax
	JB   LBB0_10
	LONG $0xc957f0c5             // vxorps	%xmm1, %xmm1, %xmm1
	LONG $0xd257e8c5             // vxorps	%xmm2, %xmm2, %xmm2
	LONG $0xdb57e0c5             // vxorps	%xmm3, %xmm3, %xmm3
	LONG $0xed57d0c5             // vxorps	%xmm5, %xmm5, %xmm5
	LONG $0xe457d8c5             // vxorps	%xmm4, %xmm4, %xmm4
	LONG $0xf657c8c5             // vxorps	%xmm6, %xmm6, %xmm6
	LONG $0xff57c0c5             // vxorps	%xmm7, %xmm7, %xmm7
	LONG $0x573841c4; BYTE $0xc0 // vxorps	%xmm8, %xmm8, %xmm8

LBB0_22:
	LONG $0x487c7162; WORD $0x0f10             // vmovups	(%rdi), %zmm9
	LONG $0x487c7162; WORD $0x5710; BYTE $0x01 // vmovups	64(%rdi), %zmm10
	LONG $0x487c7162; WORD $0x5f10; BYTE $0x02 // vmovups	128(%rdi), %zmm11
	LONG $0x487c7162; WORD $0x6710; BYTE $0x03 // vmovups	192(%rdi), %zmm12
	LONG $0x487c7162; WORD $0x6f10; BYTE $0x04 // vmovups	256(%rdi), %zmm13
	LONG $0x487c7162; WORD $0x7710; BYTE $0x05 // vmovups	320(%rdi), %zmm14
	LONG $0x487c7162; WORD $0x7f10; BYTE $0x06 // vmovups	384(%rdi), %zmm15
	LONG $0x48347162; WORD $0x0e5c             // vsubps	(%rsi), %zmm9, %zmm9
	LONG $0x482c7162; WORD $0x565c; BYTE $0x01 // vsubps	64(%rsi), %zmm10, %zmm10
	LONG $0x48247162; WORD $0x5e5c; BYTE $0x02 // vsubps	128(%rsi), %zmm11, %zmm11
	LONG $0x481c7162; WORD $0x665c; BYTE $0x03 // vsubps	192(%rsi), %zmm12, %zmm12
	LONG $0x48147162; WORD $0x6e5c; BYTE $0x04 // vsubps	256(%rsi), %zmm13, %zmm13
	LONG $0x480c7162; WORD $0x765c; BYTE $0x05 // vsubps	320(%rsi), %zmm14, %zmm14
	LONG $0x48047162; WORD $0x7e5c; BYTE $0x06 // vsubps	384(%rsi), %zmm15, %zmm15
	LONG $0x487ce162; WORD $0x4710; BYTE $0x07 // vmovups	448(%rdi), %zmm16
	LONG $0x407ce162; WORD $0x465c; BYTE $0x07 // vsubps	448(%rsi), %zmm16, %zmm16
	LONG $0x4835d262; WORD $0xc9b8             // vfmadd231ps	%zmm9, %zmm9, %zmm1
	LONG $0x482dd262; WORD $0xd2b8             // vfmadd231ps	%zmm10, %zmm10, %zmm2
	LONG $0x4825d262; WORD $0xdbb8             // vfmadd231ps	%zmm11, %zmm11, %zmm3
	LONG $0x481dd262; WORD $0xecb8             // vfmadd231ps	%zmm12, %zmm12, %zmm5
	LONG $0x4815d262; WORD $0xe5b8             // vfmadd231ps	%zmm13, %zmm13, %zmm4
	LONG $0x480dd262; WORD $0xf6b8             // vfmadd231ps	%zmm14, %zmm14, %zmm6
	LONG $0x4805d262; WORD $0xffb8             // vfmadd231ps	%zmm15, %zmm15, %zmm7
	LONG $0x407d3262; WORD $0xc0b8             // vfmadd231ps	%zmm16, %zmm16, %zmm8
	WORD $0xc083; BYTE $0x80                   // addl	$-128, %eax
	LONG $0x00c78148; WORD $0x0002; BYTE $0x00 // addq	$512, %rdi
	LONG $0x00c68148; WORD $0x0002; BYTE $0x00 // addq	$512, %rsi
	WORD $0xbe0f; BYTE $0xc8                   // movsbl	%al, %ecx
	WORD $0xc139                               // cmpl	%eax, %ecx
	JNE  LBB0_22
	LONG $0x4874f162; WORD $0xca58             // vaddps	%zmm2, %zmm1, %zmm1
	LONG $0x4864f162; WORD $0xd558             // vaddps	%zmm5, %zmm3, %zmm2
	LONG $0x4874f162; WORD $0xca58             // vaddps	%zmm2, %zmm1, %zmm1
	LONG $0x485cf162; WORD $0xd658             // vaddps	%zmm6, %zmm4, %zmm2
	LONG $0x4844d162; WORD $0xd858             // vaddps	%zmm8, %zmm7, %zmm3
	LONG $0x486cf162; WORD $0xd358             // vaddps	%zmm3, %zmm2, %zmm2
	LONG $0x4874f162; WORD $0xca58             // vaddps	%zmm2, %zmm1, %zmm1
	LONG $0x48fdf362; WORD $0xcb1b; BYTE $0x01 // vextractf64x4	$1, %zmm1, %ymm3
	LONG $0xd257e8c5                           // vxorps	%xmm2, %xmm2, %xmm2
	LONG $0xca58f4c5                           // vaddps	%ymm2, %ymm1, %ymm1
	LONG $0xcb58f4c5                           // vaddps	%ymm3, %ymm1, %ymm1
	WORD $0xc085                               // testl	%eax, %eax
	JE   LBB0_24
	WORD $0xf883; BYTE $0x20                   // cmpl	$32, %eax
	JB   LBB0_12

LBB0_25:
	LONG $0xd257e8c5 // vxorps	%xmm2, %xmm2, %xmm2
	LONG $0xdb57e0c5 // vxorps	%xmm3, %xmm3, %xmm3
	LONG $0xc057f8c5 // vxorps	%xmm0, %xmm0, %xmm0

LBB0_26:
	LONG $0x2710fcc5             // vmovups	(%rdi), %ymm4
	LONG $0x6f10fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm5
	LONG $0x7710fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm6
	LONG $0x7f10fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm7
	LONG $0x265cdcc5             // vsubps	(%rsi), %ymm4, %ymm4
	LONG $0x6e5cd4c5; BYTE $0x20 // vsubps	32(%rsi), %ymm5, %ymm5
	LONG $0x765cccc5; BYTE $0x40 // vsubps	64(%rsi), %ymm6, %ymm6
	LONG $0x7e5cc4c5; BYTE $0x60 // vsubps	96(%rsi), %ymm7, %ymm7
	LONG $0xb85de2c4; BYTE $0xcc // vfmadd231ps	%ymm4, %ymm4, %ymm1
	LONG $0xb855e2c4; BYTE $0xc5 // vfmadd231ps	%ymm5, %ymm5, %ymm0
	LONG $0xb84de2c4; BYTE $0xde // vfmadd231ps	%ymm6, %ymm6, %ymm3
	LONG $0xb845e2c4; BYTE $0xd7 // vfmadd231ps	%ymm7, %ymm7, %ymm2
	WORD $0xc083; BYTE $0xe0     // addl	$-32, %eax
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	WORD $0xf883; BYTE $0x1f     // cmpl	$31, %eax
	JA   LBB0_26
	WORD $0xf883; BYTE $0x08     // cmpl	$8, %eax
	JAE  LBB0_14
	JMP  LBB0_19

LBB0_10:
	LONG $0xc957f0c5         // vxorps	%xmm1, %xmm1, %xmm1
	WORD $0xf883; BYTE $0x20 // cmpl	$32, %eax
	JAE  LBB0_25

LBB0_12:
	LONG $0xdb57e0c5         // vxorps	%xmm3, %xmm3, %xmm3
	LONG $0xd257e8c5         // vxorps	%xmm2, %xmm2, %xmm2
	WORD $0xf883; BYTE $0x08 // cmpl	$8, %eax
	JB   LBB0_19

LBB0_14:
	LONG $0xf8408d44         // leal	-8(%rax), %r8d
	WORD $0x8945; BYTE $0xc1 // movl	%r8d, %r9d
	LONG $0x03e9c141         // shrl	$3, %r9d
	LONG $0x01498d41         // leal	1(%r9), %ecx
	WORD $0xc1f6; BYTE $0x03 // testb	$3, %cl
	JE   LBB0_18
	LONG $0x01c18041         // addb	$1, %r9b
	LONG $0xc9b60f45         // movzbl	%r9b, %r9d
	LONG $0x03e18341         // andl	$3, %r9d
	LONG $0x03e1c149         // shlq	$3, %r9
	WORD $0xc931             // xorl	%ecx, %ecx

LBB0_16:
	LONG $0x2710fcc5             // vmovups	(%rdi), %ymm4
	LONG $0x265cdcc5             // vsubps	(%rsi), %ymm4, %ymm4
	LONG $0xb85de2c4; BYTE $0xcc // vfmadd231ps	%ymm4, %ymm4, %ymm1
	LONG $0x20c78348             // addq	$32, %rdi
	LONG $0x20c68348             // addq	$32, %rsi
	LONG $0x08c18348             // addq	$8, %rcx
	WORD $0x3941; BYTE $0xc9     // cmpl	%ecx, %r9d
	JNE  LBB0_16
	WORD $0xc829                 // subl	%ecx, %eax

LBB0_18:
	LONG $0x18f88341 // cmpl	$24, %r8d
	JB   LBB0_19

LBB0_37:
	LONG $0x2710fcc5             // vmovups	(%rdi), %ymm4
	LONG $0x6f10fcc5; BYTE $0x20 // vmovups	32(%rdi), %ymm5
	LONG $0x7710fcc5; BYTE $0x40 // vmovups	64(%rdi), %ymm6
	LONG $0x7f10fcc5; BYTE $0x60 // vmovups	96(%rdi), %ymm7
	LONG $0x265cdcc5             // vsubps	(%rsi), %ymm4, %ymm4
	LONG $0x6e5cd4c5; BYTE $0x20 // vsubps	32(%rsi), %ymm5, %ymm5
	LONG $0xa85de2c4; BYTE $0xe1 // vfmadd213ps	%ymm1, %ymm4, %ymm4
	LONG $0xa855e2c4; BYTE $0xec // vfmadd213ps	%ymm4, %ymm5, %ymm5
	LONG $0x665cccc5; BYTE $0x40 // vsubps	64(%rsi), %ymm6, %ymm4
	LONG $0xa85de2c4; BYTE $0xe5 // vfmadd213ps	%ymm5, %ymm4, %ymm4
	LONG $0x4e5cc4c5; BYTE $0x60 // vsubps	96(%rsi), %ymm7, %ymm1
	LONG $0xa875e2c4; BYTE $0xcc // vfmadd213ps	%ymm4, %ymm1, %ymm1
	WORD $0xc083; BYTE $0xe0     // addl	$-32, %eax
	LONG $0x80ef8348             // subq	$-128, %rdi
	LONG $0x80ee8348             // subq	$-128, %rsi
	WORD $0xf883; BYTE $0x07     // cmpl	$7, %eax
	JA   LBB0_37

LBB0_19:
	WORD $0xc085             // testl	%eax, %eax
	JE   LBB0_20
	LONG $0xff408d44         // leal	-1(%rax), %r8d
	WORD $0x03a8             // testb	$3, %al
	JE   LBB0_28
	WORD $0x8941; BYTE $0xc1 // movl	%eax, %r9d
	LONG $0x03e18341         // andl	$3, %r9d
	LONG $0xe457d8c5         // vxorps	%xmm4, %xmm4, %xmm4
	WORD $0xc931             // xorl	%ecx, %ecx

LBB0_30:
	LONG $0x2f10fac5         // vmovss	(%rdi), %xmm5
	LONG $0x2e5cd2c5         // vsubss	(%rsi), %xmm5, %xmm5
	LONG $0xed59d2c5         // vmulss	%xmm5, %xmm5, %xmm5
	LONG $0xe558dac5         // vaddss	%xmm5, %xmm4, %xmm4
	LONG $0x04c78348         // addq	$4, %rdi
	LONG $0x04c68348         // addq	$4, %rsi
	LONG $0x01c18348         // addq	$1, %rcx
	WORD $0x3941; BYTE $0xc9 // cmpl	%ecx, %r9d
	JNE  LBB0_30
	WORD $0xc829             // subl	%ecx, %eax
	LONG $0x03f88341         // cmpl	$3, %r8d
	JAE  LBB0_33
	JMP  LBB0_35

LBB0_2:
	LONG $0xc057f8c5 // vxorps	%xmm0, %xmm0, %xmm0
	LONG $0x03f88341 // cmpl	$3, %r8d
	JB   LBB0_36

LBB0_7:
	WORD $0xc089 // movl	%eax, %eax
	WORD $0xc931 // xorl	%ecx, %ecx

LBB0_8:
	LONG $0x0c10fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm1
	LONG $0x5410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm2
	LONG $0x0c5cf2c5; BYTE $0x8e   // vsubss	(%rsi,%rcx,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x4c5ceac5; WORD $0x048e // vsubss	4(%rsi,%rcx,4), %xmm2, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x4c10fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm1
	LONG $0x4c5cf2c5; WORD $0x088e // vsubss	8(%rsi,%rcx,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x4c10fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm1
	LONG $0x4c5cf2c5; WORD $0x0c8e // vsubss	12(%rsi,%rcx,4), %xmm1, %xmm1
	LONG $0xc959f2c5               // vmulss	%xmm1, %xmm1, %xmm1
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0xc839                   // cmpl	%ecx, %eax
	JNE  LBB0_8
	JMP  LBB0_36

LBB0_20:
	LONG $0xe457d8c5 // vxorps	%xmm4, %xmm4, %xmm4
	JMP  LBB0_35

LBB0_24:
	LONG $0xc258f4c5               // vaddps	%ymm2, %ymm1, %ymm0
	LONG $0xc07cffc5               // vhaddps	%ymm0, %ymm0, %ymm0
	LONG $0xc07cffc5               // vhaddps	%ymm0, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0xc957f0c5               // vxorps	%xmm1, %xmm1, %xmm1
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0x0211fac5               // vmovss	%xmm0, (%rdx)
	WORD $0x8948; BYTE $0xec       // movq	%rbp, %rsp
	BYTE $0x5d                     // popq	%rbp
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	BYTE $0xc3                     // retq

LBB0_28:
	LONG $0xe457d8c5 // vxorps	%xmm4, %xmm4, %xmm4
	LONG $0x03f88341 // cmpl	$3, %r8d
	JB   LBB0_35

LBB0_33:
	WORD $0xc089 // movl	%eax, %eax
	WORD $0xc931 // xorl	%ecx, %ecx

LBB0_34:
	LONG $0x2c10fac5; BYTE $0x8f   // vmovss	(%rdi,%rcx,4), %xmm5
	LONG $0x7410fac5; WORD $0x048f // vmovss	4(%rdi,%rcx,4), %xmm6
	LONG $0x2c5cd2c5; BYTE $0x8e   // vsubss	(%rsi,%rcx,4), %xmm5, %xmm5
	LONG $0xed59d2c5               // vmulss	%xmm5, %xmm5, %xmm5
	LONG $0xe558dac5               // vaddss	%xmm5, %xmm4, %xmm4
	LONG $0x6c5ccac5; WORD $0x048e // vsubss	4(%rsi,%rcx,4), %xmm6, %xmm5
	LONG $0xed59d2c5               // vmulss	%xmm5, %xmm5, %xmm5
	LONG $0xe558dac5               // vaddss	%xmm5, %xmm4, %xmm4
	LONG $0x6c10fac5; WORD $0x088f // vmovss	8(%rdi,%rcx,4), %xmm5
	LONG $0x6c5cd2c5; WORD $0x088e // vsubss	8(%rsi,%rcx,4), %xmm5, %xmm5
	LONG $0xed59d2c5               // vmulss	%xmm5, %xmm5, %xmm5
	LONG $0xe558dac5               // vaddss	%xmm5, %xmm4, %xmm4
	LONG $0x6c10fac5; WORD $0x0c8f // vmovss	12(%rdi,%rcx,4), %xmm5
	LONG $0x6c5cd2c5; WORD $0x0c8e // vsubss	12(%rsi,%rcx,4), %xmm5, %xmm5
	LONG $0xed59d2c5               // vmulss	%xmm5, %xmm5, %xmm5
	LONG $0xe558dac5               // vaddss	%xmm5, %xmm4, %xmm4
	LONG $0x04c18348               // addq	$4, %rcx
	WORD $0xc839                   // cmpl	%ecx, %eax
	JNE  LBB0_34

LBB0_35:
	LONG $0xc158fcc5               // vaddps	%ymm1, %ymm0, %ymm0
	LONG $0xca58e4c5               // vaddps	%ymm2, %ymm3, %ymm1
	LONG $0xc058f4c5               // vaddps	%ymm0, %ymm1, %ymm0
	LONG $0xc07cffc5               // vhaddps	%ymm0, %ymm0, %ymm0
	LONG $0xc07cffc5               // vhaddps	%ymm0, %ymm0, %ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128	$1, %ymm0, %xmm1
	LONG $0xc158fac5               // vaddss	%xmm1, %xmm0, %xmm0
	LONG $0xc058dac5               // vaddss	%xmm0, %xmm4, %xmm0
	LONG $0x0211fac5               // vmovss	%xmm0, (%rdx)
	WORD $0x8948; BYTE $0xec       // movq	%rbp, %rsp
	BYTE $0x5d                     // popq	%rbp
	WORD $0xf8c5; BYTE $0x77       // vzeroupper
	BYTE $0xc3                     // retq
