//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package dynamic

import (
	mock "github.com/stretchr/testify/mock"
	common "github.com/weaviate/weaviate/adapters/repos/db/vector/common"
)

// MockIndex is an autogenerated mock type for the Index type
type MockIndex struct {
	mock.Mock
}

type MockIndex_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndex) EXPECT() *MockIndex_Expecter {
	return &MockIndex_Expecter{mock: &_m.Mock}
}

// UnderlyingIndex provides a mock function with no fields
func (_m *MockIndex) UnderlyingIndex() common.IndexType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnderlyingIndex")
	}

	var r0 common.IndexType
	if rf, ok := ret.Get(0).(func() common.IndexType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(common.IndexType)
	}

	return r0
}

// MockIndex_UnderlyingIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnderlyingIndex'
type MockIndex_UnderlyingIndex_Call struct {
	*mock.Call
}

// UnderlyingIndex is a helper method to define mock.On call
func (_e *MockIndex_Expecter) UnderlyingIndex() *MockIndex_UnderlyingIndex_Call {
	return &MockIndex_UnderlyingIndex_Call{Call: _e.mock.On("UnderlyingIndex")}
}

func (_c *MockIndex_UnderlyingIndex_Call) Run(run func()) *MockIndex_UnderlyingIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIndex_UnderlyingIndex_Call) Return(_a0 common.IndexType) *MockIndex_UnderlyingIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndex_UnderlyingIndex_Call) RunAndReturn(run func() common.IndexType) *MockIndex_UnderlyingIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndex creates a new instance of MockIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndex {
	mock := &MockIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
