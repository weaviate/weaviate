//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package vectorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// VectorizationGetStatusOKCode is the HTTP code returned for type VectorizationGetStatusOK
const VectorizationGetStatusOKCode int = 200

/*
VectorizationGetStatusOK The status of the vectorization task

swagger:response vectorizationGetStatusOK
*/
type VectorizationGetStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.VectorizationStatusResponse `json:"body,omitempty"`
}

// NewVectorizationGetStatusOK creates VectorizationGetStatusOK with default headers values
func NewVectorizationGetStatusOK() *VectorizationGetStatusOK {

	return &VectorizationGetStatusOK{}
}

// WithPayload adds the payload to the vectorization get status o k response
func (o *VectorizationGetStatusOK) WithPayload(payload *models.VectorizationStatusResponse) *VectorizationGetStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization get status o k response
func (o *VectorizationGetStatusOK) SetPayload(payload *models.VectorizationStatusResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationGetStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationGetStatusBadRequestCode is the HTTP code returned for type VectorizationGetStatusBadRequest
const VectorizationGetStatusBadRequestCode int = 400

/*
VectorizationGetStatusBadRequest Malformed request.

swagger:response vectorizationGetStatusBadRequest
*/
type VectorizationGetStatusBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationGetStatusBadRequest creates VectorizationGetStatusBadRequest with default headers values
func NewVectorizationGetStatusBadRequest() *VectorizationGetStatusBadRequest {

	return &VectorizationGetStatusBadRequest{}
}

// WithPayload adds the payload to the vectorization get status bad request response
func (o *VectorizationGetStatusBadRequest) WithPayload(payload *models.ErrorResponse) *VectorizationGetStatusBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization get status bad request response
func (o *VectorizationGetStatusBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationGetStatusBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationGetStatusUnauthorizedCode is the HTTP code returned for type VectorizationGetStatusUnauthorized
const VectorizationGetStatusUnauthorizedCode int = 401

/*
VectorizationGetStatusUnauthorized Unauthorized or invalid credentials.

swagger:response vectorizationGetStatusUnauthorized
*/
type VectorizationGetStatusUnauthorized struct {
}

// NewVectorizationGetStatusUnauthorized creates VectorizationGetStatusUnauthorized with default headers values
func NewVectorizationGetStatusUnauthorized() *VectorizationGetStatusUnauthorized {

	return &VectorizationGetStatusUnauthorized{}
}

// WriteResponse to the client
func (o *VectorizationGetStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// VectorizationGetStatusForbiddenCode is the HTTP code returned for type VectorizationGetStatusForbidden
const VectorizationGetStatusForbiddenCode int = 403

/*
VectorizationGetStatusForbidden Forbidden

swagger:response vectorizationGetStatusForbidden
*/
type VectorizationGetStatusForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationGetStatusForbidden creates VectorizationGetStatusForbidden with default headers values
func NewVectorizationGetStatusForbidden() *VectorizationGetStatusForbidden {

	return &VectorizationGetStatusForbidden{}
}

// WithPayload adds the payload to the vectorization get status forbidden response
func (o *VectorizationGetStatusForbidden) WithPayload(payload *models.ErrorResponse) *VectorizationGetStatusForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization get status forbidden response
func (o *VectorizationGetStatusForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationGetStatusForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationGetStatusNotFoundCode is the HTTP code returned for type VectorizationGetStatusNotFound
const VectorizationGetStatusNotFoundCode int = 404

/*
VectorizationGetStatusNotFound Vectorization task not found

swagger:response vectorizationGetStatusNotFound
*/
type VectorizationGetStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationGetStatusNotFound creates VectorizationGetStatusNotFound with default headers values
func NewVectorizationGetStatusNotFound() *VectorizationGetStatusNotFound {

	return &VectorizationGetStatusNotFound{}
}

// WithPayload adds the payload to the vectorization get status not found response
func (o *VectorizationGetStatusNotFound) WithPayload(payload *models.ErrorResponse) *VectorizationGetStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization get status not found response
func (o *VectorizationGetStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationGetStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationGetStatusUnprocessableEntityCode is the HTTP code returned for type VectorizationGetStatusUnprocessableEntity
const VectorizationGetStatusUnprocessableEntityCode int = 422

/*
VectorizationGetStatusUnprocessableEntity Request body is well-formed (i.e., syntactically correct), but semantically erroneous.

swagger:response vectorizationGetStatusUnprocessableEntity
*/
type VectorizationGetStatusUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationGetStatusUnprocessableEntity creates VectorizationGetStatusUnprocessableEntity with default headers values
func NewVectorizationGetStatusUnprocessableEntity() *VectorizationGetStatusUnprocessableEntity {

	return &VectorizationGetStatusUnprocessableEntity{}
}

// WithPayload adds the payload to the vectorization get status unprocessable entity response
func (o *VectorizationGetStatusUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *VectorizationGetStatusUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization get status unprocessable entity response
func (o *VectorizationGetStatusUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationGetStatusUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationGetStatusInternalServerErrorCode is the HTTP code returned for type VectorizationGetStatusInternalServerError
const VectorizationGetStatusInternalServerErrorCode int = 500

/*
VectorizationGetStatusInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response vectorizationGetStatusInternalServerError
*/
type VectorizationGetStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationGetStatusInternalServerError creates VectorizationGetStatusInternalServerError with default headers values
func NewVectorizationGetStatusInternalServerError() *VectorizationGetStatusInternalServerError {

	return &VectorizationGetStatusInternalServerError{}
}

// WithPayload adds the payload to the vectorization get status internal server error response
func (o *VectorizationGetStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *VectorizationGetStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization get status internal server error response
func (o *VectorizationGetStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationGetStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
