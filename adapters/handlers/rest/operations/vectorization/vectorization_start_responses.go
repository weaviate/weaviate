//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package vectorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// VectorizationStartOKCode is the HTTP code returned for type VectorizationStartOK
const VectorizationStartOKCode int = 200

/*
VectorizationStartOK The task was successfully started

swagger:response vectorizationStartOK
*/
type VectorizationStartOK struct {
}

// NewVectorizationStartOK creates VectorizationStartOK with default headers values
func NewVectorizationStartOK() *VectorizationStartOK {

	return &VectorizationStartOK{}
}

// WriteResponse to the client
func (o *VectorizationStartOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// VectorizationStartBadRequestCode is the HTTP code returned for type VectorizationStartBadRequest
const VectorizationStartBadRequestCode int = 400

/*
VectorizationStartBadRequest Malformed request.

swagger:response vectorizationStartBadRequest
*/
type VectorizationStartBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationStartBadRequest creates VectorizationStartBadRequest with default headers values
func NewVectorizationStartBadRequest() *VectorizationStartBadRequest {

	return &VectorizationStartBadRequest{}
}

// WithPayload adds the payload to the vectorization start bad request response
func (o *VectorizationStartBadRequest) WithPayload(payload *models.ErrorResponse) *VectorizationStartBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization start bad request response
func (o *VectorizationStartBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationStartBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationStartUnauthorizedCode is the HTTP code returned for type VectorizationStartUnauthorized
const VectorizationStartUnauthorizedCode int = 401

/*
VectorizationStartUnauthorized Unauthorized or invalid credentials.

swagger:response vectorizationStartUnauthorized
*/
type VectorizationStartUnauthorized struct {
}

// NewVectorizationStartUnauthorized creates VectorizationStartUnauthorized with default headers values
func NewVectorizationStartUnauthorized() *VectorizationStartUnauthorized {

	return &VectorizationStartUnauthorized{}
}

// WriteResponse to the client
func (o *VectorizationStartUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// VectorizationStartForbiddenCode is the HTTP code returned for type VectorizationStartForbidden
const VectorizationStartForbiddenCode int = 403

/*
VectorizationStartForbidden Forbidden

swagger:response vectorizationStartForbidden
*/
type VectorizationStartForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationStartForbidden creates VectorizationStartForbidden with default headers values
func NewVectorizationStartForbidden() *VectorizationStartForbidden {

	return &VectorizationStartForbidden{}
}

// WithPayload adds the payload to the vectorization start forbidden response
func (o *VectorizationStartForbidden) WithPayload(payload *models.ErrorResponse) *VectorizationStartForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization start forbidden response
func (o *VectorizationStartForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationStartForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationStartConflictCode is the HTTP code returned for type VectorizationStartConflict
const VectorizationStartConflictCode int = 409

/*
VectorizationStartConflict Task already exists

swagger:response vectorizationStartConflict
*/
type VectorizationStartConflict struct {
}

// NewVectorizationStartConflict creates VectorizationStartConflict with default headers values
func NewVectorizationStartConflict() *VectorizationStartConflict {

	return &VectorizationStartConflict{}
}

// WriteResponse to the client
func (o *VectorizationStartConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}

// VectorizationStartUnprocessableEntityCode is the HTTP code returned for type VectorizationStartUnprocessableEntity
const VectorizationStartUnprocessableEntityCode int = 422

/*
VectorizationStartUnprocessableEntity Request body is well-formed (i.e., syntactically correct), but semantically erroneous.

swagger:response vectorizationStartUnprocessableEntity
*/
type VectorizationStartUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationStartUnprocessableEntity creates VectorizationStartUnprocessableEntity with default headers values
func NewVectorizationStartUnprocessableEntity() *VectorizationStartUnprocessableEntity {

	return &VectorizationStartUnprocessableEntity{}
}

// WithPayload adds the payload to the vectorization start unprocessable entity response
func (o *VectorizationStartUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *VectorizationStartUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization start unprocessable entity response
func (o *VectorizationStartUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationStartUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VectorizationStartInternalServerErrorCode is the HTTP code returned for type VectorizationStartInternalServerError
const VectorizationStartInternalServerErrorCode int = 500

/*
VectorizationStartInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response vectorizationStartInternalServerError
*/
type VectorizationStartInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewVectorizationStartInternalServerError creates VectorizationStartInternalServerError with default headers values
func NewVectorizationStartInternalServerError() *VectorizationStartInternalServerError {

	return &VectorizationStartInternalServerError{}
}

// WithPayload adds the payload to the vectorization start internal server error response
func (o *VectorizationStartInternalServerError) WithPayload(payload *models.ErrorResponse) *VectorizationStartInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the vectorization start internal server error response
func (o *VectorizationStartInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VectorizationStartInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
