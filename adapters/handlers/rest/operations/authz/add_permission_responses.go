//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package authz

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// AddPermissionCreatedCode is the HTTP code returned for type AddPermissionCreated
const AddPermissionCreatedCode int = 201

/*
AddPermissionCreated Permission added successfully

swagger:response addPermissionCreated
*/
type AddPermissionCreated struct{}

// NewAddPermissionCreated creates AddPermissionCreated with default headers values
func NewAddPermissionCreated() *AddPermissionCreated {
	return &AddPermissionCreated{}
}

// WriteResponse to the client
func (o *AddPermissionCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// AddPermissionUnauthorizedCode is the HTTP code returned for type AddPermissionUnauthorized
const AddPermissionUnauthorizedCode int = 401

/*
AddPermissionUnauthorized Unauthorized or invalid credentials.

swagger:response addPermissionUnauthorized
*/
type AddPermissionUnauthorized struct{}

// NewAddPermissionUnauthorized creates AddPermissionUnauthorized with default headers values
func NewAddPermissionUnauthorized() *AddPermissionUnauthorized {
	return &AddPermissionUnauthorized{}
}

// WriteResponse to the client
func (o *AddPermissionUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
	rw.Header().Del(runtime.HeaderContentType) // Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// AddPermissionForbiddenCode is the HTTP code returned for type AddPermissionForbidden
const AddPermissionForbiddenCode int = 403

/*
AddPermissionForbidden Forbidden

swagger:response addPermissionForbidden
*/
type AddPermissionForbidden struct {
	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddPermissionForbidden creates AddPermissionForbidden with default headers values
func NewAddPermissionForbidden() *AddPermissionForbidden {
	return &AddPermissionForbidden{}
}

// WithPayload adds the payload to the add permission forbidden response
func (o *AddPermissionForbidden) WithPayload(payload *models.ErrorResponse) *AddPermissionForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add permission forbidden response
func (o *AddPermissionForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddPermissionForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddPermissionUnprocessableEntityCode is the HTTP code returned for type AddPermissionUnprocessableEntity
const AddPermissionUnprocessableEntityCode int = 422

/*
AddPermissionUnprocessableEntity Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?

swagger:response addPermissionUnprocessableEntity
*/
type AddPermissionUnprocessableEntity struct {
	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddPermissionUnprocessableEntity creates AddPermissionUnprocessableEntity with default headers values
func NewAddPermissionUnprocessableEntity() *AddPermissionUnprocessableEntity {
	return &AddPermissionUnprocessableEntity{}
}

// WithPayload adds the payload to the add permission unprocessable entity response
func (o *AddPermissionUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *AddPermissionUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add permission unprocessable entity response
func (o *AddPermissionUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddPermissionUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddPermissionInternalServerErrorCode is the HTTP code returned for type AddPermissionInternalServerError
const AddPermissionInternalServerErrorCode int = 500

/*
AddPermissionInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response addPermissionInternalServerError
*/
type AddPermissionInternalServerError struct {
	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddPermissionInternalServerError creates AddPermissionInternalServerError with default headers values
func NewAddPermissionInternalServerError() *AddPermissionInternalServerError {
	return &AddPermissionInternalServerError{}
}

// WithPayload adds the payload to the add permission internal server error response
func (o *AddPermissionInternalServerError) WithPayload(payload *models.ErrorResponse) *AddPermissionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add permission internal server error response
func (o *AddPermissionInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddPermissionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
