//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package batch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// BatchObjectsPatchOKCode is the HTTP code returned for type BatchObjectsPatchOK
const BatchObjectsPatchOKCode int = 200

/*
BatchObjectsPatchOK Request succeeded, see response body to get detailed information about each patched item.

swagger:response batchObjectsPatchOK
*/
type BatchObjectsPatchOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ObjectsGetResponse `json:"body,omitempty"`
}

// NewBatchObjectsPatchOK creates BatchObjectsPatchOK with default headers values
func NewBatchObjectsPatchOK() *BatchObjectsPatchOK {

	return &BatchObjectsPatchOK{}
}

// WithPayload adds the payload to the batch objects patch o k response
func (o *BatchObjectsPatchOK) WithPayload(payload []*models.ObjectsGetResponse) *BatchObjectsPatchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the batch objects patch o k response
func (o *BatchObjectsPatchOK) SetPayload(payload []*models.ObjectsGetResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BatchObjectsPatchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ObjectsGetResponse, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// BatchObjectsPatchBadRequestCode is the HTTP code returned for type BatchObjectsPatchBadRequest
const BatchObjectsPatchBadRequestCode int = 400

/*
BatchObjectsPatchBadRequest Malformed request.

swagger:response batchObjectsPatchBadRequest
*/
type BatchObjectsPatchBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewBatchObjectsPatchBadRequest creates BatchObjectsPatchBadRequest with default headers values
func NewBatchObjectsPatchBadRequest() *BatchObjectsPatchBadRequest {

	return &BatchObjectsPatchBadRequest{}
}

// WithPayload adds the payload to the batch objects patch bad request response
func (o *BatchObjectsPatchBadRequest) WithPayload(payload *models.ErrorResponse) *BatchObjectsPatchBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the batch objects patch bad request response
func (o *BatchObjectsPatchBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BatchObjectsPatchBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BatchObjectsPatchUnauthorizedCode is the HTTP code returned for type BatchObjectsPatchUnauthorized
const BatchObjectsPatchUnauthorizedCode int = 401

/*
BatchObjectsPatchUnauthorized Unauthorized or invalid credentials.

swagger:response batchObjectsPatchUnauthorized
*/
type BatchObjectsPatchUnauthorized struct {
}

// NewBatchObjectsPatchUnauthorized creates BatchObjectsPatchUnauthorized with default headers values
func NewBatchObjectsPatchUnauthorized() *BatchObjectsPatchUnauthorized {

	return &BatchObjectsPatchUnauthorized{}
}

// WriteResponse to the client
func (o *BatchObjectsPatchUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// BatchObjectsPatchForbiddenCode is the HTTP code returned for type BatchObjectsPatchForbidden
const BatchObjectsPatchForbiddenCode int = 403

/*
BatchObjectsPatchForbidden Forbidden

swagger:response batchObjectsPatchForbidden
*/
type BatchObjectsPatchForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewBatchObjectsPatchForbidden creates BatchObjectsPatchForbidden with default headers values
func NewBatchObjectsPatchForbidden() *BatchObjectsPatchForbidden {

	return &BatchObjectsPatchForbidden{}
}

// WithPayload adds the payload to the batch objects patch forbidden response
func (o *BatchObjectsPatchForbidden) WithPayload(payload *models.ErrorResponse) *BatchObjectsPatchForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the batch objects patch forbidden response
func (o *BatchObjectsPatchForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BatchObjectsPatchForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BatchObjectsPatchUnprocessableEntityCode is the HTTP code returned for type BatchObjectsPatchUnprocessableEntity
const BatchObjectsPatchUnprocessableEntityCode int = 422

/*
BatchObjectsPatchUnprocessableEntity Request body is well-formed (i.e., syntactically correct), but semantically erroneous. Are you sure the class is defined in the configuration file?

swagger:response batchObjectsPatchUnprocessableEntity
*/
type BatchObjectsPatchUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewBatchObjectsPatchUnprocessableEntity creates BatchObjectsPatchUnprocessableEntity with default headers values
func NewBatchObjectsPatchUnprocessableEntity() *BatchObjectsPatchUnprocessableEntity {

	return &BatchObjectsPatchUnprocessableEntity{}
}

// WithPayload adds the payload to the batch objects patch unprocessable entity response
func (o *BatchObjectsPatchUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *BatchObjectsPatchUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the batch objects patch unprocessable entity response
func (o *BatchObjectsPatchUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BatchObjectsPatchUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BatchObjectsPatchInternalServerErrorCode is the HTTP code returned for type BatchObjectsPatchInternalServerError
const BatchObjectsPatchInternalServerErrorCode int = 500

/*
BatchObjectsPatchInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response batchObjectsPatchInternalServerError
*/
type BatchObjectsPatchInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewBatchObjectsPatchInternalServerError creates BatchObjectsPatchInternalServerError with default headers values
func NewBatchObjectsPatchInternalServerError() *BatchObjectsPatchInternalServerError {

	return &BatchObjectsPatchInternalServerError{}
}

// WithPayload adds the payload to the batch objects patch internal server error response
func (o *BatchObjectsPatchInternalServerError) WithPayload(payload *models.ErrorResponse) *BatchObjectsPatchInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the batch objects patch internal server error response
func (o *BatchObjectsPatchInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BatchObjectsPatchInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
