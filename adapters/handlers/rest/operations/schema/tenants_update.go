// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/weaviate/weaviate/entities/models"
)

// TenantsUpdateHandlerFunc turns a function with the right signature into a tenants update handler
type TenantsUpdateHandlerFunc func(TenantsUpdateParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn TenantsUpdateHandlerFunc) Handle(params TenantsUpdateParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// TenantsUpdateHandler interface for that can handle valid tenants update params
type TenantsUpdateHandler interface {
	Handle(TenantsUpdateParams, *models.Principal) middleware.Responder
}

// NewTenantsUpdate creates a new http.Handler for the tenants update operation
func NewTenantsUpdate(ctx *middleware.Context, handler TenantsUpdateHandler) *TenantsUpdate {
	return &TenantsUpdate{Context: ctx, Handler: handler}
}

/*
	TenantsUpdate swagger:route PUT /schema/{className}/tenants schema tenantsUpdate

Update tenant of a specific class
*/
type TenantsUpdate struct {
	Context *middleware.Context
	Handler TenantsUpdateHandler
}

func (o *TenantsUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTenantsUpdateParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
