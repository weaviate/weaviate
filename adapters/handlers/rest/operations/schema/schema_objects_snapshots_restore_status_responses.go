//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2022 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/semi-technologies/weaviate/entities/models"
)

// SchemaObjectsSnapshotsRestoreStatusOKCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreStatusOK
const SchemaObjectsSnapshotsRestoreStatusOKCode int = 200

/*
SchemaObjectsSnapshotsRestoreStatusOK Snapshot restoration status successfully returned

swagger:response schemaObjectsSnapshotsRestoreStatusOK
*/
type SchemaObjectsSnapshotsRestoreStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.SnapshotRestoreMeta `json:"body,omitempty"`
}

// NewSchemaObjectsSnapshotsRestoreStatusOK creates SchemaObjectsSnapshotsRestoreStatusOK with default headers values
func NewSchemaObjectsSnapshotsRestoreStatusOK() *SchemaObjectsSnapshotsRestoreStatusOK {

	return &SchemaObjectsSnapshotsRestoreStatusOK{}
}

// WithPayload adds the payload to the schema objects snapshots restore status o k response
func (o *SchemaObjectsSnapshotsRestoreStatusOK) WithPayload(payload *models.SnapshotRestoreMeta) *SchemaObjectsSnapshotsRestoreStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema objects snapshots restore status o k response
func (o *SchemaObjectsSnapshotsRestoreStatusOK) SetPayload(payload *models.SnapshotRestoreMeta) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SchemaObjectsSnapshotsRestoreStatusUnauthorizedCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreStatusUnauthorized
const SchemaObjectsSnapshotsRestoreStatusUnauthorizedCode int = 401

/*
SchemaObjectsSnapshotsRestoreStatusUnauthorized Unauthorized or invalid credentials.

swagger:response schemaObjectsSnapshotsRestoreStatusUnauthorized
*/
type SchemaObjectsSnapshotsRestoreStatusUnauthorized struct {
}

// NewSchemaObjectsSnapshotsRestoreStatusUnauthorized creates SchemaObjectsSnapshotsRestoreStatusUnauthorized with default headers values
func NewSchemaObjectsSnapshotsRestoreStatusUnauthorized() *SchemaObjectsSnapshotsRestoreStatusUnauthorized {

	return &SchemaObjectsSnapshotsRestoreStatusUnauthorized{}
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreStatusUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// SchemaObjectsSnapshotsRestoreStatusForbiddenCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreStatusForbidden
const SchemaObjectsSnapshotsRestoreStatusForbiddenCode int = 403

/*
SchemaObjectsSnapshotsRestoreStatusForbidden Forbidden

swagger:response schemaObjectsSnapshotsRestoreStatusForbidden
*/
type SchemaObjectsSnapshotsRestoreStatusForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaObjectsSnapshotsRestoreStatusForbidden creates SchemaObjectsSnapshotsRestoreStatusForbidden with default headers values
func NewSchemaObjectsSnapshotsRestoreStatusForbidden() *SchemaObjectsSnapshotsRestoreStatusForbidden {

	return &SchemaObjectsSnapshotsRestoreStatusForbidden{}
}

// WithPayload adds the payload to the schema objects snapshots restore status forbidden response
func (o *SchemaObjectsSnapshotsRestoreStatusForbidden) WithPayload(payload *models.ErrorResponse) *SchemaObjectsSnapshotsRestoreStatusForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema objects snapshots restore status forbidden response
func (o *SchemaObjectsSnapshotsRestoreStatusForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreStatusForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SchemaObjectsSnapshotsRestoreStatusNotFoundCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreStatusNotFound
const SchemaObjectsSnapshotsRestoreStatusNotFoundCode int = 404

/*
SchemaObjectsSnapshotsRestoreStatusNotFound Not Found - Snapshot does not exist

swagger:response schemaObjectsSnapshotsRestoreStatusNotFound
*/
type SchemaObjectsSnapshotsRestoreStatusNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaObjectsSnapshotsRestoreStatusNotFound creates SchemaObjectsSnapshotsRestoreStatusNotFound with default headers values
func NewSchemaObjectsSnapshotsRestoreStatusNotFound() *SchemaObjectsSnapshotsRestoreStatusNotFound {

	return &SchemaObjectsSnapshotsRestoreStatusNotFound{}
}

// WithPayload adds the payload to the schema objects snapshots restore status not found response
func (o *SchemaObjectsSnapshotsRestoreStatusNotFound) WithPayload(payload *models.ErrorResponse) *SchemaObjectsSnapshotsRestoreStatusNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema objects snapshots restore status not found response
func (o *SchemaObjectsSnapshotsRestoreStatusNotFound) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreStatusNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SchemaObjectsSnapshotsRestoreStatusInternalServerErrorCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreStatusInternalServerError
const SchemaObjectsSnapshotsRestoreStatusInternalServerErrorCode int = 500

/*
SchemaObjectsSnapshotsRestoreStatusInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response schemaObjectsSnapshotsRestoreStatusInternalServerError
*/
type SchemaObjectsSnapshotsRestoreStatusInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaObjectsSnapshotsRestoreStatusInternalServerError creates SchemaObjectsSnapshotsRestoreStatusInternalServerError with default headers values
func NewSchemaObjectsSnapshotsRestoreStatusInternalServerError() *SchemaObjectsSnapshotsRestoreStatusInternalServerError {

	return &SchemaObjectsSnapshotsRestoreStatusInternalServerError{}
}

// WithPayload adds the payload to the schema objects snapshots restore status internal server error response
func (o *SchemaObjectsSnapshotsRestoreStatusInternalServerError) WithPayload(payload *models.ErrorResponse) *SchemaObjectsSnapshotsRestoreStatusInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema objects snapshots restore status internal server error response
func (o *SchemaObjectsSnapshotsRestoreStatusInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreStatusInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
