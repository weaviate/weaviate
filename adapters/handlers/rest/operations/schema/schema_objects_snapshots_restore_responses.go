//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2022 SeMI Technologies B.V. All rights reserved.
//
//  CONTACT: hello@semi.technology
//

// Code generated by go-swagger; DO NOT EDIT.

package schema

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/semi-technologies/weaviate/entities/models"
)

// SchemaObjectsSnapshotsRestoreOKCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreOK
const SchemaObjectsSnapshotsRestoreOKCode int = 200

/*SchemaObjectsSnapshotsRestoreOK Snapshot restoring process successfully started.

swagger:response schemaObjectsSnapshotsRestoreOK
*/
type SchemaObjectsSnapshotsRestoreOK struct {
}

// NewSchemaObjectsSnapshotsRestoreOK creates SchemaObjectsSnapshotsRestoreOK with default headers values
func NewSchemaObjectsSnapshotsRestoreOK() *SchemaObjectsSnapshotsRestoreOK {

	return &SchemaObjectsSnapshotsRestoreOK{}
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

// SchemaObjectsSnapshotsRestoreUnauthorizedCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreUnauthorized
const SchemaObjectsSnapshotsRestoreUnauthorizedCode int = 401

/*SchemaObjectsSnapshotsRestoreUnauthorized Unauthorized or invalid credentials.

swagger:response schemaObjectsSnapshotsRestoreUnauthorized
*/
type SchemaObjectsSnapshotsRestoreUnauthorized struct {
}

// NewSchemaObjectsSnapshotsRestoreUnauthorized creates SchemaObjectsSnapshotsRestoreUnauthorized with default headers values
func NewSchemaObjectsSnapshotsRestoreUnauthorized() *SchemaObjectsSnapshotsRestoreUnauthorized {

	return &SchemaObjectsSnapshotsRestoreUnauthorized{}
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// SchemaObjectsSnapshotsRestoreForbiddenCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreForbidden
const SchemaObjectsSnapshotsRestoreForbiddenCode int = 403

/*SchemaObjectsSnapshotsRestoreForbidden Forbidden

swagger:response schemaObjectsSnapshotsRestoreForbidden
*/
type SchemaObjectsSnapshotsRestoreForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaObjectsSnapshotsRestoreForbidden creates SchemaObjectsSnapshotsRestoreForbidden with default headers values
func NewSchemaObjectsSnapshotsRestoreForbidden() *SchemaObjectsSnapshotsRestoreForbidden {

	return &SchemaObjectsSnapshotsRestoreForbidden{}
}

// WithPayload adds the payload to the schema objects snapshots restore forbidden response
func (o *SchemaObjectsSnapshotsRestoreForbidden) WithPayload(payload *models.ErrorResponse) *SchemaObjectsSnapshotsRestoreForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema objects snapshots restore forbidden response
func (o *SchemaObjectsSnapshotsRestoreForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SchemaObjectsSnapshotsRestoreNotFoundCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreNotFound
const SchemaObjectsSnapshotsRestoreNotFoundCode int = 404

/*SchemaObjectsSnapshotsRestoreNotFound Not Found - Snapshot does not exist

swagger:response schemaObjectsSnapshotsRestoreNotFound
*/
type SchemaObjectsSnapshotsRestoreNotFound struct {
}

// NewSchemaObjectsSnapshotsRestoreNotFound creates SchemaObjectsSnapshotsRestoreNotFound with default headers values
func NewSchemaObjectsSnapshotsRestoreNotFound() *SchemaObjectsSnapshotsRestoreNotFound {

	return &SchemaObjectsSnapshotsRestoreNotFound{}
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// SchemaObjectsSnapshotsRestoreUnprocessableEntityCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreUnprocessableEntity
const SchemaObjectsSnapshotsRestoreUnprocessableEntityCode int = 422

/*SchemaObjectsSnapshotsRestoreUnprocessableEntity Invalid restore snapshot attempt.

swagger:response schemaObjectsSnapshotsRestoreUnprocessableEntity
*/
type SchemaObjectsSnapshotsRestoreUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaObjectsSnapshotsRestoreUnprocessableEntity creates SchemaObjectsSnapshotsRestoreUnprocessableEntity with default headers values
func NewSchemaObjectsSnapshotsRestoreUnprocessableEntity() *SchemaObjectsSnapshotsRestoreUnprocessableEntity {

	return &SchemaObjectsSnapshotsRestoreUnprocessableEntity{}
}

// WithPayload adds the payload to the schema objects snapshots restore unprocessable entity response
func (o *SchemaObjectsSnapshotsRestoreUnprocessableEntity) WithPayload(payload *models.ErrorResponse) *SchemaObjectsSnapshotsRestoreUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema objects snapshots restore unprocessable entity response
func (o *SchemaObjectsSnapshotsRestoreUnprocessableEntity) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SchemaObjectsSnapshotsRestoreInternalServerErrorCode is the HTTP code returned for type SchemaObjectsSnapshotsRestoreInternalServerError
const SchemaObjectsSnapshotsRestoreInternalServerErrorCode int = 500

/*SchemaObjectsSnapshotsRestoreInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response schemaObjectsSnapshotsRestoreInternalServerError
*/
type SchemaObjectsSnapshotsRestoreInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewSchemaObjectsSnapshotsRestoreInternalServerError creates SchemaObjectsSnapshotsRestoreInternalServerError with default headers values
func NewSchemaObjectsSnapshotsRestoreInternalServerError() *SchemaObjectsSnapshotsRestoreInternalServerError {

	return &SchemaObjectsSnapshotsRestoreInternalServerError{}
}

// WithPayload adds the payload to the schema objects snapshots restore internal server error response
func (o *SchemaObjectsSnapshotsRestoreInternalServerError) WithPayload(payload *models.ErrorResponse) *SchemaObjectsSnapshotsRestoreInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the schema objects snapshots restore internal server error response
func (o *SchemaObjectsSnapshotsRestoreInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SchemaObjectsSnapshotsRestoreInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
