//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/weaviate/weaviate/entities/models"
)

// ReplicateStatusHandlerFunc turns a function with the right signature into a replicate status handler
type ReplicateStatusHandlerFunc func(ReplicateStatusParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplicateStatusHandlerFunc) Handle(params ReplicateStatusParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ReplicateStatusHandler interface for that can handle valid replicate status params
type ReplicateStatusHandler interface {
	Handle(ReplicateStatusParams, *models.Principal) middleware.Responder
}

// NewReplicateStatus creates a new http.Handler for the replicate status operation
func NewReplicateStatus(ctx *middleware.Context, handler ReplicateStatusHandler) *ReplicateStatus {
	return &ReplicateStatus{Context: ctx, Handler: handler}
}

/*
	ReplicateStatus swagger:route GET /replication/replicate/{id}/status replication replicateStatus

# Get the status of a replication operation

Returns the status of a replication operation for a given shard, identified by the provided id.
*/
type ReplicateStatus struct {
	Context *middleware.Context
	Handler ReplicateStatusHandler
}

func (o *ReplicateStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReplicateStatusParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ReplicateStatusOKBody replicate status o k body
//
// swagger:model ReplicateStatusOKBody
type ReplicateStatusOKBody struct {

	// The current status of the shard replica move operation
	// Required: true
	// Enum: [READY INDEXING REPLICATION_FINALIZING REPLICATION_HYDRATING REPLICATION_DEHYDRATING]
	Status *string `json:"status" yaml:"status"`
}

// Validate validates this replicate status o k body
func (o *ReplicateStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var replicateStatusOKBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READY","INDEXING","REPLICATION_FINALIZING","REPLICATION_HYDRATING","REPLICATION_DEHYDRATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicateStatusOKBodyTypeStatusPropEnum = append(replicateStatusOKBodyTypeStatusPropEnum, v)
	}
}

const (

	// ReplicateStatusOKBodyStatusREADY captures enum value "READY"
	ReplicateStatusOKBodyStatusREADY string = "READY"

	// ReplicateStatusOKBodyStatusINDEXING captures enum value "INDEXING"
	ReplicateStatusOKBodyStatusINDEXING string = "INDEXING"

	// ReplicateStatusOKBodyStatusREPLICATIONFINALIZING captures enum value "REPLICATION_FINALIZING"
	ReplicateStatusOKBodyStatusREPLICATIONFINALIZING string = "REPLICATION_FINALIZING"

	// ReplicateStatusOKBodyStatusREPLICATIONHYDRATING captures enum value "REPLICATION_HYDRATING"
	ReplicateStatusOKBodyStatusREPLICATIONHYDRATING string = "REPLICATION_HYDRATING"

	// ReplicateStatusOKBodyStatusREPLICATIONDEHYDRATING captures enum value "REPLICATION_DEHYDRATING"
	ReplicateStatusOKBodyStatusREPLICATIONDEHYDRATING string = "REPLICATION_DEHYDRATING"
)

// prop value enum
func (o *ReplicateStatusOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, replicateStatusOKBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ReplicateStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("replicateStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("replicateStatusOK"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this replicate status o k body based on context it is used
func (o *ReplicateStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReplicateStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplicateStatusOKBody) UnmarshalBinary(b []byte) error {
	var res ReplicateStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
