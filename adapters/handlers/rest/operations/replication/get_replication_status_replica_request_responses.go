//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/weaviate/weaviate/entities/models"
)

// GetReplicationStatusReplicaRequestOKCode is the HTTP code returned for type GetReplicationStatusReplicaRequestOK
const GetReplicationStatusReplicaRequestOKCode int = 200

/*
GetReplicationStatusReplicaRequestOK The status of the shard replica move operation

swagger:response getReplicationStatusReplicaRequestOK
*/
type GetReplicationStatusReplicaRequestOK struct {

	/*
	  In: Body
	*/
	Payload *GetReplicationStatusReplicaRequestOKBody `json:"body,omitempty"`
}

// NewGetReplicationStatusReplicaRequestOK creates GetReplicationStatusReplicaRequestOK with default headers values
func NewGetReplicationStatusReplicaRequestOK() *GetReplicationStatusReplicaRequestOK {

	return &GetReplicationStatusReplicaRequestOK{}
}

// WithPayload adds the payload to the get replication status replica request o k response
func (o *GetReplicationStatusReplicaRequestOK) WithPayload(payload *GetReplicationStatusReplicaRequestOKBody) *GetReplicationStatusReplicaRequestOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication status replica request o k response
func (o *GetReplicationStatusReplicaRequestOK) SetPayload(payload *GetReplicationStatusReplicaRequestOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationStatusReplicaRequestOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationStatusReplicaRequestBadRequestCode is the HTTP code returned for type GetReplicationStatusReplicaRequestBadRequest
const GetReplicationStatusReplicaRequestBadRequestCode int = 400

/*
GetReplicationStatusReplicaRequestBadRequest Malformed replica move operation id

swagger:response getReplicationStatusReplicaRequestBadRequest
*/
type GetReplicationStatusReplicaRequestBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetReplicationStatusReplicaRequestBadRequest creates GetReplicationStatusReplicaRequestBadRequest with default headers values
func NewGetReplicationStatusReplicaRequestBadRequest() *GetReplicationStatusReplicaRequestBadRequest {

	return &GetReplicationStatusReplicaRequestBadRequest{}
}

// WithPayload adds the payload to the get replication status replica request bad request response
func (o *GetReplicationStatusReplicaRequestBadRequest) WithPayload(payload *models.ErrorResponse) *GetReplicationStatusReplicaRequestBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication status replica request bad request response
func (o *GetReplicationStatusReplicaRequestBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationStatusReplicaRequestBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetReplicationStatusReplicaRequestNotFoundCode is the HTTP code returned for type GetReplicationStatusReplicaRequestNotFound
const GetReplicationStatusReplicaRequestNotFoundCode int = 404

/*
GetReplicationStatusReplicaRequestNotFound Shard replica move operation not found

swagger:response getReplicationStatusReplicaRequestNotFound
*/
type GetReplicationStatusReplicaRequestNotFound struct {
}

// NewGetReplicationStatusReplicaRequestNotFound creates GetReplicationStatusReplicaRequestNotFound with default headers values
func NewGetReplicationStatusReplicaRequestNotFound() *GetReplicationStatusReplicaRequestNotFound {

	return &GetReplicationStatusReplicaRequestNotFound{}
}

// WriteResponse to the client
func (o *GetReplicationStatusReplicaRequestNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// GetReplicationStatusReplicaRequestInternalServerErrorCode is the HTTP code returned for type GetReplicationStatusReplicaRequestInternalServerError
const GetReplicationStatusReplicaRequestInternalServerErrorCode int = 500

/*
GetReplicationStatusReplicaRequestInternalServerError An error has occurred while trying to fulfill the request. Most likely the ErrorResponse will contain more information about the error.

swagger:response getReplicationStatusReplicaRequestInternalServerError
*/
type GetReplicationStatusReplicaRequestInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetReplicationStatusReplicaRequestInternalServerError creates GetReplicationStatusReplicaRequestInternalServerError with default headers values
func NewGetReplicationStatusReplicaRequestInternalServerError() *GetReplicationStatusReplicaRequestInternalServerError {

	return &GetReplicationStatusReplicaRequestInternalServerError{}
}

// WithPayload adds the payload to the get replication status replica request internal server error response
func (o *GetReplicationStatusReplicaRequestInternalServerError) WithPayload(payload *models.ErrorResponse) *GetReplicationStatusReplicaRequestInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get replication status replica request internal server error response
func (o *GetReplicationStatusReplicaRequestInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetReplicationStatusReplicaRequestInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
