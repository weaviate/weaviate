//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/weaviate/weaviate/entities/models"
)

// ReplicationDetailsHandlerFunc turns a function with the right signature into a replication details handler
type ReplicationDetailsHandlerFunc func(ReplicationDetailsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplicationDetailsHandlerFunc) Handle(params ReplicationDetailsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ReplicationDetailsHandler interface for that can handle valid replication details params
type ReplicationDetailsHandler interface {
	Handle(ReplicationDetailsParams, *models.Principal) middleware.Responder
}

// NewReplicationDetails creates a new http.Handler for the replication details operation
func NewReplicationDetails(ctx *middleware.Context, handler ReplicationDetailsHandler) *ReplicationDetails {
	return &ReplicationDetails{Context: ctx, Handler: handler}
}

/*
	ReplicationDetails swagger:route GET /replication/replicate/{id} replication replicationDetails

Get the details of a replica operation.

Returns the details of a replication operation for a given shard, identified by the provided id.
*/
type ReplicationDetails struct {
	Context *middleware.Context
	Handler ReplicationDetailsHandler
}

func (o *ReplicationDetails) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReplicationDetailsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ReplicationDetailsOKBody replication details o k body
//
// swagger:model ReplicationDetailsOKBody
type ReplicationDetailsOKBody struct {

	// The shard replica operation id.
	// Required: true
	ID *string `json:"id" yaml:"id"`

	// The source node for the shard replica operation.
	// Required: true
	SourceNode *string `json:"sourceNode" yaml:"sourceNode"`

	// The source shard for the shard replica operation.
	// Required: true
	SourceShard *string `json:"sourceShard" yaml:"sourceShard"`

	// The current status of the shard replica move operation.
	// Required: true
	// Enum: [READY INDEXING REPLICATION_FINALIZING REPLICATION_HYDRATING REPLICATION_DEHYDRATING]
	Status *string `json:"status" yaml:"status"`

	// The target node for the shard replica operation.
	// Required: true
	TargetNode *string `json:"targetNode" yaml:"targetNode"`

	// The target shard for the shard replica operation.
	// Required: true
	TargetShard *string `json:"targetShard" yaml:"targetShard"`
}

// Validate validates this replication details o k body
func (o *ReplicationDetailsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceNode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceShard(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetNode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTargetShard(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplicationDetailsOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("replicationDetailsOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *ReplicationDetailsOKBody) validateSourceNode(formats strfmt.Registry) error {

	if err := validate.Required("replicationDetailsOK"+"."+"sourceNode", "body", o.SourceNode); err != nil {
		return err
	}

	return nil
}

func (o *ReplicationDetailsOKBody) validateSourceShard(formats strfmt.Registry) error {

	if err := validate.Required("replicationDetailsOK"+"."+"sourceShard", "body", o.SourceShard); err != nil {
		return err
	}

	return nil
}

var replicationDetailsOKBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["READY","INDEXING","REPLICATION_FINALIZING","REPLICATION_HYDRATING","REPLICATION_DEHYDRATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replicationDetailsOKBodyTypeStatusPropEnum = append(replicationDetailsOKBodyTypeStatusPropEnum, v)
	}
}

const (

	// ReplicationDetailsOKBodyStatusREADY captures enum value "READY"
	ReplicationDetailsOKBodyStatusREADY string = "READY"

	// ReplicationDetailsOKBodyStatusINDEXING captures enum value "INDEXING"
	ReplicationDetailsOKBodyStatusINDEXING string = "INDEXING"

	// ReplicationDetailsOKBodyStatusREPLICATIONFINALIZING captures enum value "REPLICATION_FINALIZING"
	ReplicationDetailsOKBodyStatusREPLICATIONFINALIZING string = "REPLICATION_FINALIZING"

	// ReplicationDetailsOKBodyStatusREPLICATIONHYDRATING captures enum value "REPLICATION_HYDRATING"
	ReplicationDetailsOKBodyStatusREPLICATIONHYDRATING string = "REPLICATION_HYDRATING"

	// ReplicationDetailsOKBodyStatusREPLICATIONDEHYDRATING captures enum value "REPLICATION_DEHYDRATING"
	ReplicationDetailsOKBodyStatusREPLICATIONDEHYDRATING string = "REPLICATION_DEHYDRATING"
)

// prop value enum
func (o *ReplicationDetailsOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, replicationDetailsOKBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *ReplicationDetailsOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("replicationDetailsOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("replicationDetailsOK"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

func (o *ReplicationDetailsOKBody) validateTargetNode(formats strfmt.Registry) error {

	if err := validate.Required("replicationDetailsOK"+"."+"targetNode", "body", o.TargetNode); err != nil {
		return err
	}

	return nil
}

func (o *ReplicationDetailsOKBody) validateTargetShard(formats strfmt.Registry) error {

	if err := validate.Required("replicationDetailsOK"+"."+"targetShard", "body", o.TargetShard); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this replication details o k body based on context it is used
func (o *ReplicationDetailsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ReplicationDetailsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplicationDetailsOKBody) UnmarshalBinary(b []byte) error {
	var res ReplicationDetailsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
