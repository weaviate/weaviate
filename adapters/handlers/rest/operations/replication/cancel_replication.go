//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package replication

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/weaviate/weaviate/entities/models"
)

// CancelReplicationHandlerFunc turns a function with the right signature into a cancel replication handler
type CancelReplicationHandlerFunc func(CancelReplicationParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CancelReplicationHandlerFunc) Handle(params CancelReplicationParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// CancelReplicationHandler interface for that can handle valid cancel replication params
type CancelReplicationHandler interface {
	Handle(CancelReplicationParams, *models.Principal) middleware.Responder
}

// NewCancelReplication creates a new http.Handler for the cancel replication operation
func NewCancelReplication(ctx *middleware.Context, handler CancelReplicationHandler) *CancelReplication {
	return &CancelReplication{Context: ctx, Handler: handler}
}

/*
	CancelReplication swagger:route POST /replication/replicate/{id}/cancel replication cancelReplication

# Cancel a replication operation

Requests the cancellation of an active replication operation identified by its ID. The operation will be stopped, but its record will remain in the 'CANCELLED' state (can't be resumed) and will not be automatically deleted.
*/
type CancelReplication struct {
	Context *middleware.Context
	Handler CancelReplicationHandler
}

func (o *CancelReplication) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCancelReplicationParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
