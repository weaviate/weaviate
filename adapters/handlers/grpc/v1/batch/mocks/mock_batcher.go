//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	protocol "github.com/weaviate/weaviate/grpc/generated/protocol/v1"
)

// Mockbatcher is an autogenerated mock type for the batcher type
type Mockbatcher struct {
	mock.Mock
}

type Mockbatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockbatcher) EXPECT() *Mockbatcher_Expecter {
	return &Mockbatcher_Expecter{mock: &_m.Mock}
}

// BatchObjects provides a mock function with given fields: ctx, req
func (_m *Mockbatcher) BatchObjects(ctx context.Context, req *protocol.BatchObjectsRequest) (*protocol.BatchObjectsReply, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BatchObjects")
	}

	var r0 *protocol.BatchObjectsReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.BatchObjectsRequest) (*protocol.BatchObjectsReply, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.BatchObjectsRequest) *protocol.BatchObjectsReply); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.BatchObjectsReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.BatchObjectsRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockbatcher_BatchObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchObjects'
type Mockbatcher_BatchObjects_Call struct {
	*mock.Call
}

// BatchObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - req *protocol.BatchObjectsRequest
func (_e *Mockbatcher_Expecter) BatchObjects(ctx interface{}, req interface{}) *Mockbatcher_BatchObjects_Call {
	return &Mockbatcher_BatchObjects_Call{Call: _e.mock.On("BatchObjects", ctx, req)}
}

func (_c *Mockbatcher_BatchObjects_Call) Run(run func(ctx context.Context, req *protocol.BatchObjectsRequest)) *Mockbatcher_BatchObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.BatchObjectsRequest))
	})
	return _c
}

func (_c *Mockbatcher_BatchObjects_Call) Return(_a0 *protocol.BatchObjectsReply, _a1 error) *Mockbatcher_BatchObjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockbatcher_BatchObjects_Call) RunAndReturn(run func(context.Context, *protocol.BatchObjectsRequest) (*protocol.BatchObjectsReply, error)) *Mockbatcher_BatchObjects_Call {
	_c.Call.Return(run)
	return _c
}

// BatchReferences provides a mock function with given fields: ctx, req
func (_m *Mockbatcher) BatchReferences(ctx context.Context, req *protocol.BatchReferencesRequest) (*protocol.BatchReferencesReply, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for BatchReferences")
	}

	var r0 *protocol.BatchReferencesReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.BatchReferencesRequest) (*protocol.BatchReferencesReply, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *protocol.BatchReferencesRequest) *protocol.BatchReferencesReply); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocol.BatchReferencesReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *protocol.BatchReferencesRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockbatcher_BatchReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchReferences'
type Mockbatcher_BatchReferences_Call struct {
	*mock.Call
}

// BatchReferences is a helper method to define mock.On call
//   - ctx context.Context
//   - req *protocol.BatchReferencesRequest
func (_e *Mockbatcher_Expecter) BatchReferences(ctx interface{}, req interface{}) *Mockbatcher_BatchReferences_Call {
	return &Mockbatcher_BatchReferences_Call{Call: _e.mock.On("BatchReferences", ctx, req)}
}

func (_c *Mockbatcher_BatchReferences_Call) Run(run func(ctx context.Context, req *protocol.BatchReferencesRequest)) *Mockbatcher_BatchReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*protocol.BatchReferencesRequest))
	})
	return _c
}

func (_c *Mockbatcher_BatchReferences_Call) Return(_a0 *protocol.BatchReferencesReply, _a1 error) *Mockbatcher_BatchReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockbatcher_BatchReferences_Call) RunAndReturn(run func(context.Context, *protocol.BatchReferencesRequest) (*protocol.BatchReferencesReply, error)) *Mockbatcher_BatchReferences_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbatcher creates a new instance of Mockbatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockbatcher {
	mock := &Mockbatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
