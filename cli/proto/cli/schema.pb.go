// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: cli/schema.proto

package cli

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	mi := &file_cli_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{0}
}

type GetSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classes []string `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
}

func (x *GetSchemaResponse) Reset() {
	*x = GetSchemaResponse{}
	mi := &file_cli_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaResponse) ProtoMessage() {}

func (x *GetSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaResponse.ProtoReflect.Descriptor instead.
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{1}
}

func (x *GetSchemaResponse) GetClasses() []string {
	if x != nil {
		return x.Classes
	}
	return nil
}

type GetRaftStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRaftStatusRequest) Reset() {
	*x = GetRaftStatusRequest{}
	mi := &file_cli_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRaftStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaftStatusRequest) ProtoMessage() {}

func (x *GetRaftStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaftStatusRequest.ProtoReflect.Descriptor instead.
func (*GetRaftStatusRequest) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{2}
}

type GetRaftStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config            *RaftConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	LastAppliedIndex  string      `protobuf:"bytes,2,opt,name=last_applied_index,json=lastAppliedIndex,proto3" json:"last_applied_index,omitempty"`
	LastLogIndex      string      `protobuf:"bytes,3,opt,name=last_log_index,json=lastLogIndex,proto3" json:"last_log_index,omitempty"`
	LastSnapshotIndex string      `protobuf:"bytes,4,opt,name=last_snapshot_index,json=lastSnapshotIndex,proto3" json:"last_snapshot_index,omitempty"`
	DbIndexOnStartup  string      `protobuf:"bytes,5,opt,name=db_index_on_startup,json=dbIndexOnStartup,proto3" json:"db_index_on_startup,omitempty"`
}

func (x *GetRaftStatusResponse) Reset() {
	*x = GetRaftStatusResponse{}
	mi := &file_cli_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRaftStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRaftStatusResponse) ProtoMessage() {}

func (x *GetRaftStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRaftStatusResponse.ProtoReflect.Descriptor instead.
func (*GetRaftStatusResponse) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{3}
}

func (x *GetRaftStatusResponse) GetConfig() *RaftConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GetRaftStatusResponse) GetLastAppliedIndex() string {
	if x != nil {
		return x.LastAppliedIndex
	}
	return ""
}

func (x *GetRaftStatusResponse) GetLastLogIndex() string {
	if x != nil {
		return x.LastLogIndex
	}
	return ""
}

func (x *GetRaftStatusResponse) GetLastSnapshotIndex() string {
	if x != nil {
		return x.LastSnapshotIndex
	}
	return ""
}

func (x *GetRaftStatusResponse) GetDbIndexOnStartup() string {
	if x != nil {
		return x.DbIndexOnStartup
	}
	return ""
}

type RaftConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*RaftNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *RaftConfig) Reset() {
	*x = RaftConfig{}
	mi := &file_cli_schema_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftConfig) ProtoMessage() {}

func (x *RaftConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftConfig.ProtoReflect.Descriptor instead.
func (*RaftConfig) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{4}
}

func (x *RaftConfig) GetNodes() []*RaftNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type RaftNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId   string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeAddr string `protobuf:"bytes,2,opt,name=node_addr,json=nodeAddr,proto3" json:"node_addr,omitempty"`
	Voter    bool   `protobuf:"varint,3,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (x *RaftNode) Reset() {
	*x = RaftNode{}
	mi := &file_cli_schema_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftNode) ProtoMessage() {}

func (x *RaftNode) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftNode.ProtoReflect.Descriptor instead.
func (*RaftNode) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{5}
}

func (x *RaftNode) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RaftNode) GetNodeAddr() string {
	if x != nil {
		return x.NodeAddr
	}
	return ""
}

func (x *RaftNode) GetVoter() bool {
	if x != nil {
		return x.Voter
	}
	return false
}

type RaftTakeSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RaftTakeSnapshotRequest) Reset() {
	*x = RaftTakeSnapshotRequest{}
	mi := &file_cli_schema_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftTakeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftTakeSnapshotRequest) ProtoMessage() {}

func (x *RaftTakeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftTakeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*RaftTakeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{6}
}

type RaftTakeSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RaftTakeSnapshotResponse) Reset() {
	*x = RaftTakeSnapshotResponse{}
	mi := &file_cli_schema_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftTakeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftTakeSnapshotResponse) ProtoMessage() {}

func (x *RaftTakeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cli_schema_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftTakeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*RaftTakeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_cli_schema_proto_rawDescGZIP(), []int{7}
}

var File_cli_schema_proto protoreflect.FileDescriptor

var file_cli_schema_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69,
	0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65,
	0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x13, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x62, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x22, 0x3a, 0x0a, 0x0a, 0x52, 0x61,
	0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x52, 0x61, 0x66, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x22, 0x19,
	0x0a, 0x17, 0x52, 0x61, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x61, 0x66,
	0x74, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa0, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6c, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6c, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69,
	0x61, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x66, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77,
	0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x52, 0x61, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x25, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x52, 0x61,
	0x66, 0x74, 0x54, 0x61, 0x6b, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x9c, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6c, 0x69, 0x42, 0x0b, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74,
	0x65, 0x2f, 0x77, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0xa2, 0x02, 0x03, 0x57, 0x43, 0x58, 0xaa, 0x02,
	0x0c, 0x57, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0xca, 0x02, 0x0c,
	0x57, 0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6c, 0x69, 0xe2, 0x02, 0x18, 0x57,
	0x65, 0x61, 0x76, 0x69, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6c, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x57, 0x65, 0x61, 0x76, 0x69, 0x61,
	0x74, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cli_schema_proto_rawDescOnce sync.Once
	file_cli_schema_proto_rawDescData = file_cli_schema_proto_rawDesc
)

func file_cli_schema_proto_rawDescGZIP() []byte {
	file_cli_schema_proto_rawDescOnce.Do(func() {
		file_cli_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_cli_schema_proto_rawDescData)
	})
	return file_cli_schema_proto_rawDescData
}

var file_cli_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cli_schema_proto_goTypes = []any{
	(*GetSchemaRequest)(nil),         // 0: weaviate.cli.GetSchemaRequest
	(*GetSchemaResponse)(nil),        // 1: weaviate.cli.GetSchemaResponse
	(*GetRaftStatusRequest)(nil),     // 2: weaviate.cli.GetRaftStatusRequest
	(*GetRaftStatusResponse)(nil),    // 3: weaviate.cli.GetRaftStatusResponse
	(*RaftConfig)(nil),               // 4: weaviate.cli.RaftConfig
	(*RaftNode)(nil),                 // 5: weaviate.cli.RaftNode
	(*RaftTakeSnapshotRequest)(nil),  // 6: weaviate.cli.RaftTakeSnapshotRequest
	(*RaftTakeSnapshotResponse)(nil), // 7: weaviate.cli.RaftTakeSnapshotResponse
}
var file_cli_schema_proto_depIdxs = []int32{
	4, // 0: weaviate.cli.GetRaftStatusResponse.config:type_name -> weaviate.cli.RaftConfig
	5, // 1: weaviate.cli.RaftConfig.nodes:type_name -> weaviate.cli.RaftNode
	0, // 2: weaviate.cli.SchemaService.GetSchema:input_type -> weaviate.cli.GetSchemaRequest
	2, // 3: weaviate.cli.SchemaService.GetRaftStatus:input_type -> weaviate.cli.GetRaftStatusRequest
	6, // 4: weaviate.cli.SchemaService.RaftTakeSnapshot:input_type -> weaviate.cli.RaftTakeSnapshotRequest
	1, // 5: weaviate.cli.SchemaService.GetSchema:output_type -> weaviate.cli.GetSchemaResponse
	3, // 6: weaviate.cli.SchemaService.GetRaftStatus:output_type -> weaviate.cli.GetRaftStatusResponse
	7, // 7: weaviate.cli.SchemaService.RaftTakeSnapshot:output_type -> weaviate.cli.RaftTakeSnapshotResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_cli_schema_proto_init() }
func file_cli_schema_proto_init() {
	if File_cli_schema_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cli_schema_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cli_schema_proto_goTypes,
		DependencyIndexes: file_cli_schema_proto_depIdxs,
		MessageInfos:      file_cli_schema_proto_msgTypes,
	}.Build()
	File_cli_schema_proto = out.File
	file_cli_schema_proto_rawDesc = nil
	file_cli_schema_proto_goTypes = nil
	file_cli_schema_proto_depIdxs = nil
}
