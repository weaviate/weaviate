//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2025 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by mockery v2.53.2. DO NOT EDIT.

package moduletools

import (
	logrus "github.com/sirupsen/logrus"
	config "github.com/weaviate/weaviate/usecases/config"

	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockModuleInitParams is an autogenerated mock type for the ModuleInitParams type
type MockModuleInitParams struct {
	mock.Mock
}

type MockModuleInitParams_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModuleInitParams) EXPECT() *MockModuleInitParams_Expecter {
	return &MockModuleInitParams_Expecter{mock: &_m.Mock}
}

// GetAppState provides a mock function with no fields
func (_m *MockModuleInitParams) GetAppState() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAppState")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockModuleInitParams_GetAppState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppState'
type MockModuleInitParams_GetAppState_Call struct {
	*mock.Call
}

// GetAppState is a helper method to define mock.On call
func (_e *MockModuleInitParams_Expecter) GetAppState() *MockModuleInitParams_GetAppState_Call {
	return &MockModuleInitParams_GetAppState_Call{Call: _e.mock.On("GetAppState")}
}

func (_c *MockModuleInitParams_GetAppState_Call) Run(run func()) *MockModuleInitParams_GetAppState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleInitParams_GetAppState_Call) Return(_a0 interface{}) *MockModuleInitParams_GetAppState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleInitParams_GetAppState_Call) RunAndReturn(run func() interface{}) *MockModuleInitParams_GetAppState_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with no fields
func (_m *MockModuleInitParams) GetConfig() *config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// MockModuleInitParams_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockModuleInitParams_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockModuleInitParams_Expecter) GetConfig() *MockModuleInitParams_GetConfig_Call {
	return &MockModuleInitParams_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockModuleInitParams_GetConfig_Call) Run(run func()) *MockModuleInitParams_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleInitParams_GetConfig_Call) Return(_a0 *config.Config) *MockModuleInitParams_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleInitParams_GetConfig_Call) RunAndReturn(run func() *config.Config) *MockModuleInitParams_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogger provides a mock function with no fields
func (_m *MockModuleInitParams) GetLogger() logrus.FieldLogger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 logrus.FieldLogger
	if rf, ok := ret.Get(0).(func() logrus.FieldLogger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logrus.FieldLogger)
		}
	}

	return r0
}

// MockModuleInitParams_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type MockModuleInitParams_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
func (_e *MockModuleInitParams_Expecter) GetLogger() *MockModuleInitParams_GetLogger_Call {
	return &MockModuleInitParams_GetLogger_Call{Call: _e.mock.On("GetLogger")}
}

func (_c *MockModuleInitParams_GetLogger_Call) Run(run func()) *MockModuleInitParams_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleInitParams_GetLogger_Call) Return(_a0 logrus.FieldLogger) *MockModuleInitParams_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleInitParams_GetLogger_Call) RunAndReturn(run func() logrus.FieldLogger) *MockModuleInitParams_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetricsRegisterer provides a mock function with no fields
func (_m *MockModuleInitParams) GetMetricsRegisterer() prometheus.Registerer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsRegisterer")
	}

	var r0 prometheus.Registerer
	if rf, ok := ret.Get(0).(func() prometheus.Registerer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(prometheus.Registerer)
		}
	}

	return r0
}

// MockModuleInitParams_GetMetricsRegisterer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsRegisterer'
type MockModuleInitParams_GetMetricsRegisterer_Call struct {
	*mock.Call
}

// GetMetricsRegisterer is a helper method to define mock.On call
func (_e *MockModuleInitParams_Expecter) GetMetricsRegisterer() *MockModuleInitParams_GetMetricsRegisterer_Call {
	return &MockModuleInitParams_GetMetricsRegisterer_Call{Call: _e.mock.On("GetMetricsRegisterer")}
}

func (_c *MockModuleInitParams_GetMetricsRegisterer_Call) Run(run func()) *MockModuleInitParams_GetMetricsRegisterer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleInitParams_GetMetricsRegisterer_Call) Return(_a0 prometheus.Registerer) *MockModuleInitParams_GetMetricsRegisterer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleInitParams_GetMetricsRegisterer_Call) RunAndReturn(run func() prometheus.Registerer) *MockModuleInitParams_GetMetricsRegisterer_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageProvider provides a mock function with no fields
func (_m *MockModuleInitParams) GetStorageProvider() StorageProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStorageProvider")
	}

	var r0 StorageProvider
	if rf, ok := ret.Get(0).(func() StorageProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StorageProvider)
		}
	}

	return r0
}

// MockModuleInitParams_GetStorageProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageProvider'
type MockModuleInitParams_GetStorageProvider_Call struct {
	*mock.Call
}

// GetStorageProvider is a helper method to define mock.On call
func (_e *MockModuleInitParams_Expecter) GetStorageProvider() *MockModuleInitParams_GetStorageProvider_Call {
	return &MockModuleInitParams_GetStorageProvider_Call{Call: _e.mock.On("GetStorageProvider")}
}

func (_c *MockModuleInitParams_GetStorageProvider_Call) Run(run func()) *MockModuleInitParams_GetStorageProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModuleInitParams_GetStorageProvider_Call) Return(_a0 StorageProvider) *MockModuleInitParams_GetStorageProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModuleInitParams_GetStorageProvider_Call) RunAndReturn(run func() StorageProvider) *MockModuleInitParams_GetStorageProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModuleInitParams creates a new instance of MockModuleInitParams. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModuleInitParams(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModuleInitParams {
	mock := &MockModuleInitParams{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
