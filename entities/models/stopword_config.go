//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopwordConfig fine-grained control over stopword list usage
//
// swagger:model StopwordConfig
type StopwordConfig struct {

	// Stopwords to be considered additionally. Can be any array of custom strings.
	Additions []string `json:"additions"`

	// pre-existing list of common words by language
	// Enum: [en none]
	Preset *string `json:"preset,omitempty"`

	// stopwords to be removed from consideration. Can be any array of custom strings.
	Removals []string `json:"removals"`
}

// Validate validates this stopword config
func (m *StopwordConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stopwordConfigTypePresetPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopwordConfigTypePresetPropEnum = append(stopwordConfigTypePresetPropEnum, v)
	}
}

const (

	// StopwordConfigPresetEn captures enum value "en"
	StopwordConfigPresetEn string = "en"

	// StopwordConfigPresetNone captures enum value "none"
	StopwordConfigPresetNone string = "none"
)

// prop value enum
func (m *StopwordConfig) validatePresetEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stopwordConfigTypePresetPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StopwordConfig) validatePreset(formats strfmt.Registry) error {
	if swag.IsZero(m.Preset) { // not required
		return nil
	}

	// value enum
	if err := m.validatePresetEnum("preset", "body", *m.Preset); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stopword config based on context it is used
func (m *StopwordConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StopwordConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopwordConfig) UnmarshalBinary(b []byte) error {
	var res StopwordConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
