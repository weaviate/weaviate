//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VectorizationStatusResponse The status of the vectorization process for a given collection and target vector
//
// swagger:model VectorizationStatusResponse
type VectorizationStatusResponse struct {

	// Date and time in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// The reason why vectorization failed
	FailureReason *string `json:"failureReason,omitempty"`

	// Date and time in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)
	// Format: date-time
	FinishedAt *strfmt.DateTime `json:"finishedAt,omitempty"`

	// The status of vectorization
	// Enum: [STARTED FINISHED CANCELLED FAILED]
	Status interface{} `json:"status,omitempty"`

	// Filter to scope the vectorization to a subset of tenants
	TenantFilter *string `json:"tenantFilter,omitempty"`
}

// Validate validates this vectorization status response
func (m *VectorizationStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VectorizationStatusResponse) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VectorizationStatusResponse) validateFinishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("finishedAt", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vectorization status response based on context it is used
func (m *VectorizationStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VectorizationStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VectorizationStatusResponse) UnmarshalBinary(b []byte) error {
	var res VectorizationStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
