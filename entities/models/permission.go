//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Permission permissions attached to a role.
//
// swagger:model Permission
type Permission struct {

	// allowed actions in weaviate.
	// Required: true
	// Enum: [manage_users manage_roles read_roles manage_cluster create_schema read_schema update_schema delete_schema create_data_collection_objects read_data_collection_objects update_data_collection_objects delete_data_collection_objects create_data_tenant_objects read_data_tenant_objects update_data_tenant_objects delete_data_tenant_objects]
	Action *string `json:"action"`

	// string or regex. if a specific collection name, if left empty it will be ALL or *
	Collection *string `json:"collection,omitempty"`

	// string or regex. if a specific object ID, if left empty it will be ALL or *
	Object *string `json:"object,omitempty"`

	// string or regex. if a specific role name, if left empty it will be ALL or *
	Role *string `json:"role,omitempty"`

	// string or regex. if a specific tenant name, if left empty it will be ALL or *
	Tenant *string `json:"tenant,omitempty"`

	// string or regex. if a specific user name, if left empty it will be ALL or *
	User *string `json:"user,omitempty"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var permissionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["manage_users","manage_roles","read_roles","manage_cluster","create_schema","read_schema","update_schema","delete_schema","create_data_collection_objects","read_data_collection_objects","update_data_collection_objects","delete_data_collection_objects","create_data_tenant_objects","read_data_tenant_objects","update_data_tenant_objects","delete_data_tenant_objects"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionTypeActionPropEnum = append(permissionTypeActionPropEnum, v)
	}
}

const (

	// PermissionActionManageUsers captures enum value "manage_users"
	PermissionActionManageUsers string = "manage_users"

	// PermissionActionManageRoles captures enum value "manage_roles"
	PermissionActionManageRoles string = "manage_roles"

	// PermissionActionReadRoles captures enum value "read_roles"
	PermissionActionReadRoles string = "read_roles"

	// PermissionActionManageCluster captures enum value "manage_cluster"
	PermissionActionManageCluster string = "manage_cluster"

	// PermissionActionCreateSchema captures enum value "create_schema"
	PermissionActionCreateSchema string = "create_schema"

	// PermissionActionReadSchema captures enum value "read_schema"
	PermissionActionReadSchema string = "read_schema"

	// PermissionActionUpdateSchema captures enum value "update_schema"
	PermissionActionUpdateSchema string = "update_schema"

	// PermissionActionDeleteSchema captures enum value "delete_schema"
	PermissionActionDeleteSchema string = "delete_schema"

	// PermissionActionCreateDataCollectionObjects captures enum value "create_data_collection_objects"
	PermissionActionCreateDataCollectionObjects string = "create_data_collection_objects"

	// PermissionActionReadDataCollectionObjects captures enum value "read_data_collection_objects"
	PermissionActionReadDataCollectionObjects string = "read_data_collection_objects"

	// PermissionActionUpdateDataCollectionObjects captures enum value "update_data_collection_objects"
	PermissionActionUpdateDataCollectionObjects string = "update_data_collection_objects"

	// PermissionActionDeleteDataCollectionObjects captures enum value "delete_data_collection_objects"
	PermissionActionDeleteDataCollectionObjects string = "delete_data_collection_objects"

	// PermissionActionCreateDataTenantObjects captures enum value "create_data_tenant_objects"
	PermissionActionCreateDataTenantObjects string = "create_data_tenant_objects"

	// PermissionActionReadDataTenantObjects captures enum value "read_data_tenant_objects"
	PermissionActionReadDataTenantObjects string = "read_data_tenant_objects"

	// PermissionActionUpdateDataTenantObjects captures enum value "update_data_tenant_objects"
	PermissionActionUpdateDataTenantObjects string = "update_data_tenant_objects"

	// PermissionActionDeleteDataTenantObjects captures enum value "delete_data_tenant_objects"
	PermissionActionDeleteDataTenantObjects string = "delete_data_tenant_objects"
)

// prop value enum
func (m *Permission) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, permissionTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Permission) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this permission based on context it is used
func (m *Permission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Permission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permission) UnmarshalBinary(b []byte) error {
	var res Permission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
