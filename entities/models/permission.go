//                           _       _
// __      _____  __ ___   ___  __ _| |_ ___
// \ \ /\ / / _ \/ _` \ \ / / |/ _` | __/ _ \
//  \ V  V /  __/ (_| |\ V /| | (_| | ||  __/
//   \_/\_/ \___|\__,_| \_/ |_|\__,_|\__\___|
//
//  Copyright Â© 2016 - 2024 Weaviate B.V. All rights reserved.
//
//  CONTACT: hello@weaviate.io
//

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Permission permissions attached to a role.
//
// swagger:model Permission
type Permission struct {

	// actions
	// Required: true
	Actions []string `json:"actions"`

	// level of that permission
	// Required: true
	// Enum: [database collection tenant]
	Level *string `json:"level"`

	// resources
	Resources []*string `json:"resources"`
}

// Validate validates this permission
func (m *Permission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var permissionActionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["manage_roles","read_roles","manage_cluster","create_collection","read_collection","update_collection","delete_collection","create_tenant","read_tenant","update_tenant","delete_tenant"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionActionsItemsEnum = append(permissionActionsItemsEnum, v)
	}
}

func (m *Permission) validateActionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, permissionActionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Permission) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	for i := 0; i < len(m.Actions); i++ {

		// value enum
		if err := m.validateActionsItemsEnum("actions"+"."+strconv.Itoa(i), "body", m.Actions[i]); err != nil {
			return err
		}

	}

	return nil
}

var permissionTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["database","collection","tenant"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		permissionTypeLevelPropEnum = append(permissionTypeLevelPropEnum, v)
	}
}

const (

	// PermissionLevelDatabase captures enum value "database"
	PermissionLevelDatabase string = "database"

	// PermissionLevelCollection captures enum value "collection"
	PermissionLevelCollection string = "collection"

	// PermissionLevelTenant captures enum value "tenant"
	PermissionLevelTenant string = "tenant"
)

// prop value enum
func (m *Permission) validateLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, permissionTypeLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Permission) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this permission based on context it is used
func (m *Permission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Permission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Permission) UnmarshalBinary(b []byte) error {
	var res Permission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
